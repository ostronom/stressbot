// Code generated by protoc-gen-go.
// source: media_and_files.proto
// DO NOT EDIT!

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Colors int32

const (
	Colors_COLORS_UNKNOWN Colors = 0
	Colors_COLORS_RED     Colors = 1
	Colors_COLORS_YELLOW  Colors = 2
	Colors_COLORS_GREEN   Colors = 3
)

var Colors_name = map[int32]string{
	0: "COLORS_UNKNOWN",
	1: "COLORS_RED",
	2: "COLORS_YELLOW",
	3: "COLORS_GREEN",
}
var Colors_value = map[string]int32{
	"COLORS_UNKNOWN": 0,
	"COLORS_RED":     1,
	"COLORS_YELLOW":  2,
	"COLORS_GREEN":   3,
}

func (x Colors) String() string {
	return proto.EnumName(Colors_name, int32(x))
}
func (Colors) EnumDescriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

// Location of file on server
type FileLocation struct {
	FileId     int64 `protobuf:"varint,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash" json:"access_hash,omitempty"`
}

func (m *FileLocation) Reset()                    { *m = FileLocation{} }
func (m *FileLocation) String() string            { return proto.CompactTextString(m) }
func (*FileLocation) ProtoMessage()               {}
func (*FileLocation) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *FileLocation) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *FileLocation) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// Image location
type ImageLocation struct {
	FileLocation *FileLocation `protobuf:"bytes,1,opt,name=file_location,json=fileLocation" json:"file_location,omitempty"`
	Width        int32         `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height       int32         `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	FileSize     int32         `protobuf:"varint,4,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
}

func (m *ImageLocation) Reset()                    { *m = ImageLocation{} }
func (m *ImageLocation) String() string            { return proto.CompactTextString(m) }
func (*ImageLocation) ProtoMessage()               {}
func (*ImageLocation) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{1} }

func (m *ImageLocation) GetFileLocation() *FileLocation {
	if m != nil {
		return m.FileLocation
	}
	return nil
}

func (m *ImageLocation) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *ImageLocation) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *ImageLocation) GetFileSize() int32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

// Audio location
type AudioLocation struct {
	FileLocation *FileLocation `protobuf:"bytes,1,opt,name=file_location,json=fileLocation" json:"file_location,omitempty"`
	Duration     int32         `protobuf:"varint,2,opt,name=duration" json:"duration,omitempty"`
	MimeType     string        `protobuf:"bytes,3,opt,name=mime_type,json=mimeType" json:"mime_type,omitempty"`
	FileSize     int32         `protobuf:"varint,4,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
}

func (m *AudioLocation) Reset()                    { *m = AudioLocation{} }
func (m *AudioLocation) String() string            { return proto.CompactTextString(m) }
func (*AudioLocation) ProtoMessage()               {}
func (*AudioLocation) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{2} }

func (m *AudioLocation) GetFileLocation() *FileLocation {
	if m != nil {
		return m.FileLocation
	}
	return nil
}

func (m *AudioLocation) GetDuration() int32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *AudioLocation) GetMimeType() string {
	if m != nil {
		return m.MimeType
	}
	return ""
}

func (m *AudioLocation) GetFileSize() int32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

// Avatar Image
type AvatarImage struct {
	FileLocation *FileLocation `protobuf:"bytes,1,opt,name=file_location,json=fileLocation" json:"file_location,omitempty"`
	Width        int32         `protobuf:"varint,2,opt,name=width" json:"width,omitempty"`
	Height       int32         `protobuf:"varint,3,opt,name=height" json:"height,omitempty"`
	FileSize     int32         `protobuf:"varint,4,opt,name=file_size,json=fileSize" json:"file_size,omitempty"`
}

func (m *AvatarImage) Reset()                    { *m = AvatarImage{} }
func (m *AvatarImage) String() string            { return proto.CompactTextString(m) }
func (*AvatarImage) ProtoMessage()               {}
func (*AvatarImage) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{3} }

func (m *AvatarImage) GetFileLocation() *FileLocation {
	if m != nil {
		return m.FileLocation
	}
	return nil
}

func (m *AvatarImage) GetWidth() int32 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *AvatarImage) GetHeight() int32 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *AvatarImage) GetFileSize() int32 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

// Avatar of User or Group
type Avatar struct {
	// / Optional small image of avatar box in 100x100
	SmallImage *AvatarImage `protobuf:"bytes,1,opt,name=small_image,json=smallImage" json:"small_image,omitempty"`
	// / Optional large image of avatar box in 200x200
	LargeImage *AvatarImage `protobuf:"bytes,2,opt,name=large_image,json=largeImage" json:"large_image,omitempty"`
	// / Optional full screen image of avatar
	FullImage *AvatarImage `protobuf:"bytes,3,opt,name=full_image,json=fullImage" json:"full_image,omitempty"`
}

func (m *Avatar) Reset()                    { *m = Avatar{} }
func (m *Avatar) String() string            { return proto.CompactTextString(m) }
func (*Avatar) ProtoMessage()               {}
func (*Avatar) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{4} }

func (m *Avatar) GetSmallImage() *AvatarImage {
	if m != nil {
		return m.SmallImage
	}
	return nil
}

func (m *Avatar) GetLargeImage() *AvatarImage {
	if m != nil {
		return m.LargeImage
	}
	return nil
}

func (m *Avatar) GetFullImage() *AvatarImage {
	if m != nil {
		return m.FullImage
	}
	return nil
}

// Fast thumb of media messages. Less than 90x90 and compressed by JPEG with low quality
type FastThumb struct {
	W     int32  `protobuf:"varint,1,opt,name=w" json:"w,omitempty"`
	H     int32  `protobuf:"varint,2,opt,name=h" json:"h,omitempty"`
	Thumb []byte `protobuf:"bytes,3,opt,name=thumb,proto3" json:"thumb,omitempty"`
}

func (m *FastThumb) Reset()                    { *m = FastThumb{} }
func (m *FastThumb) String() string            { return proto.CompactTextString(m) }
func (*FastThumb) ProtoMessage()               {}
func (*FastThumb) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{5} }

func (m *FastThumb) GetW() int32 {
	if m != nil {
		return m.W
	}
	return 0
}

func (m *FastThumb) GetH() int32 {
	if m != nil {
		return m.H
	}
	return 0
}

func (m *FastThumb) GetThumb() []byte {
	if m != nil {
		return m.Thumb
	}
	return nil
}

type Color struct {
	// Types that are valid to be assigned to Body:
	//	*Color_Rgb
	//	*Color_Predefined
	Body isColor_Body `protobuf_oneof:"body"`
}

func (m *Color) Reset()                    { *m = Color{} }
func (m *Color) String() string            { return proto.CompactTextString(m) }
func (*Color) ProtoMessage()               {}
func (*Color) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{6} }

type isColor_Body interface {
	isColor_Body()
}

type Color_Rgb struct {
	Rgb *RgbColor `protobuf:"bytes,1,opt,name=rgb,oneof"`
}
type Color_Predefined struct {
	Predefined *PredefinedColor `protobuf:"bytes,2,opt,name=predefined,oneof"`
}

func (*Color_Rgb) isColor_Body()        {}
func (*Color_Predefined) isColor_Body() {}

func (m *Color) GetBody() isColor_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Color) GetRgb() *RgbColor {
	if x, ok := m.GetBody().(*Color_Rgb); ok {
		return x.Rgb
	}
	return nil
}

func (m *Color) GetPredefined() *PredefinedColor {
	if x, ok := m.GetBody().(*Color_Predefined); ok {
		return x.Predefined
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Color) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Color_OneofMarshaler, _Color_OneofUnmarshaler, _Color_OneofSizer, []interface{}{
		(*Color_Rgb)(nil),
		(*Color_Predefined)(nil),
	}
}

func _Color_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Color)
	// body
	switch x := m.Body.(type) {
	case *Color_Rgb:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Rgb); err != nil {
			return err
		}
	case *Color_Predefined:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Predefined); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Color.Body has unexpected type %T", x)
	}
	return nil
}

func _Color_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Color)
	switch tag {
	case 1: // body.rgb
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RgbColor)
		err := b.DecodeMessage(msg)
		m.Body = &Color_Rgb{msg}
		return true, err
	case 2: // body.predefined
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PredefinedColor)
		err := b.DecodeMessage(msg)
		m.Body = &Color_Predefined{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Color_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Color)
	// body
	switch x := m.Body.(type) {
	case *Color_Rgb:
		s := proto.Size(x.Rgb)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Color_Predefined:
		s := proto.Size(x.Predefined)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// RGB Color
type RgbColor struct {
	Rgb int32 `protobuf:"varint,1,opt,name=rgb" json:"rgb,omitempty"`
}

func (m *RgbColor) Reset()                    { *m = RgbColor{} }
func (m *RgbColor) String() string            { return proto.CompactTextString(m) }
func (*RgbColor) ProtoMessage()               {}
func (*RgbColor) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{7} }

func (m *RgbColor) GetRgb() int32 {
	if m != nil {
		return m.Rgb
	}
	return 0
}

// Predefined color
type PredefinedColor struct {
	Color Colors `protobuf:"varint,1,opt,name=color,enum=dialog.Colors" json:"color,omitempty"`
}

func (m *PredefinedColor) Reset()                    { *m = PredefinedColor{} }
func (m *PredefinedColor) String() string            { return proto.CompactTextString(m) }
func (*PredefinedColor) ProtoMessage()               {}
func (*PredefinedColor) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{8} }

func (m *PredefinedColor) GetColor() Colors {
	if m != nil {
		return m.Color
	}
	return Colors_COLORS_UNKNOWN
}

// HTTP Header record
type HTTPHeader struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *HTTPHeader) Reset()                    { *m = HTTPHeader{} }
func (m *HTTPHeader) String() string            { return proto.CompactTextString(m) }
func (*HTTPHeader) ProtoMessage()               {}
func (*HTTPHeader) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{9} }

func (m *HTTPHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *HTTPHeader) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// File url description
type FileUrlDescription struct {
	FileId  int64  `protobuf:"varint,1,opt,name=file_id,json=fileId" json:"file_id,omitempty"`
	Url     string `protobuf:"bytes,2,opt,name=url" json:"url,omitempty"`
	Timeout int32  `protobuf:"varint,3,opt,name=timeout" json:"timeout,omitempty"`
	// / Unsigned URL (used to honor web caches)
	UnsignedUrl *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=unsigned_url,json=unsignedUrl" json:"unsigned_url,omitempty"`
	// / Headers that is required to download files with unsigned url
	UnsignedUrlHeaders []*HTTPHeader `protobuf:"bytes,5,rep,name=unsigned_url_headers,json=unsignedUrlHeaders" json:"unsigned_url_headers,omitempty"`
}

func (m *FileUrlDescription) Reset()                    { *m = FileUrlDescription{} }
func (m *FileUrlDescription) String() string            { return proto.CompactTextString(m) }
func (*FileUrlDescription) ProtoMessage()               {}
func (*FileUrlDescription) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{10} }

func (m *FileUrlDescription) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

func (m *FileUrlDescription) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *FileUrlDescription) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *FileUrlDescription) GetUnsignedUrl() *google_protobuf.StringValue {
	if m != nil {
		return m.UnsignedUrl
	}
	return nil
}

func (m *FileUrlDescription) GetUnsignedUrlHeaders() []*HTTPHeader {
	if m != nil {
		return m.UnsignedUrlHeaders
	}
	return nil
}

// Requesting file URL for downloading
type RequestGetFileUrl struct {
	File *FileLocation `protobuf:"bytes,1,opt,name=file" json:"file,omitempty"`
}

func (m *RequestGetFileUrl) Reset()                    { *m = RequestGetFileUrl{} }
func (m *RequestGetFileUrl) String() string            { return proto.CompactTextString(m) }
func (*RequestGetFileUrl) ProtoMessage()               {}
func (*RequestGetFileUrl) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{11} }

func (m *RequestGetFileUrl) GetFile() *FileLocation {
	if m != nil {
		return m.File
	}
	return nil
}

type ResponseGetFileUrl struct {
	Url                string                       `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	Timeout            int32                        `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
	UnsignedUrl        *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=unsigned_url,json=unsignedUrl" json:"unsigned_url,omitempty"`
	UnsignedUrlHeaders []*HTTPHeader                `protobuf:"bytes,4,rep,name=unsigned_url_headers,json=unsignedUrlHeaders" json:"unsigned_url_headers,omitempty"`
}

func (m *ResponseGetFileUrl) Reset()                    { *m = ResponseGetFileUrl{} }
func (m *ResponseGetFileUrl) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetFileUrl) ProtoMessage()               {}
func (*ResponseGetFileUrl) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{12} }

func (m *ResponseGetFileUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ResponseGetFileUrl) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *ResponseGetFileUrl) GetUnsignedUrl() *google_protobuf.StringValue {
	if m != nil {
		return m.UnsignedUrl
	}
	return nil
}

func (m *ResponseGetFileUrl) GetUnsignedUrlHeaders() []*HTTPHeader {
	if m != nil {
		return m.UnsignedUrlHeaders
	}
	return nil
}

// Requesting multiple fle URL for downloading
type RequestGetFileUrls struct {
	Files []*FileLocation `protobuf:"bytes,1,rep,name=files" json:"files,omitempty"`
}

func (m *RequestGetFileUrls) Reset()                    { *m = RequestGetFileUrls{} }
func (m *RequestGetFileUrls) String() string            { return proto.CompactTextString(m) }
func (*RequestGetFileUrls) ProtoMessage()               {}
func (*RequestGetFileUrls) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{13} }

func (m *RequestGetFileUrls) GetFiles() []*FileLocation {
	if m != nil {
		return m.Files
	}
	return nil
}

type ResponseGetFileUrls struct {
	FileUrls []*FileUrlDescription `protobuf:"bytes,1,rep,name=file_urls,json=fileUrls" json:"file_urls,omitempty"`
}

func (m *ResponseGetFileUrls) Reset()                    { *m = ResponseGetFileUrls{} }
func (m *ResponseGetFileUrls) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetFileUrls) ProtoMessage()               {}
func (*ResponseGetFileUrls) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{14} }

func (m *ResponseGetFileUrls) GetFileUrls() []*FileUrlDescription {
	if m != nil {
		return m.FileUrls
	}
	return nil
}

// Get File URL Builder that allows to build file urls from client side
type RequestGetFileUrlBuilder struct {
	SupportedSignatureAlgorithms []string `protobuf:"bytes,1,rep,name=supported_signature_algorithms,json=supportedSignatureAlgorithms" json:"supported_signature_algorithms,omitempty"`
}

func (m *RequestGetFileUrlBuilder) Reset()                    { *m = RequestGetFileUrlBuilder{} }
func (m *RequestGetFileUrlBuilder) String() string            { return proto.CompactTextString(m) }
func (*RequestGetFileUrlBuilder) ProtoMessage()               {}
func (*RequestGetFileUrlBuilder) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{15} }

func (m *RequestGetFileUrlBuilder) GetSupportedSignatureAlgorithms() []string {
	if m != nil {
		return m.SupportedSignatureAlgorithms
	}
	return nil
}

type ResponseGetFileUrlBuilder struct {
	BaseUrl         string `protobuf:"bytes,1,opt,name=base_url,json=baseUrl" json:"base_url,omitempty"`
	Algo            string `protobuf:"bytes,2,opt,name=algo" json:"algo,omitempty"`
	Seed            string `protobuf:"bytes,5,opt,name=seed" json:"seed,omitempty"`
	SignatureSecret []byte `protobuf:"bytes,3,opt,name=signature_secret,json=signatureSecret,proto3" json:"signature_secret,omitempty"`
	Timeout         int32  `protobuf:"varint,4,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *ResponseGetFileUrlBuilder) Reset()                    { *m = ResponseGetFileUrlBuilder{} }
func (m *ResponseGetFileUrlBuilder) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetFileUrlBuilder) ProtoMessage()               {}
func (*ResponseGetFileUrlBuilder) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{16} }

func (m *ResponseGetFileUrlBuilder) GetBaseUrl() string {
	if m != nil {
		return m.BaseUrl
	}
	return ""
}

func (m *ResponseGetFileUrlBuilder) GetAlgo() string {
	if m != nil {
		return m.Algo
	}
	return ""
}

func (m *ResponseGetFileUrlBuilder) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

func (m *ResponseGetFileUrlBuilder) GetSignatureSecret() []byte {
	if m != nil {
		return m.SignatureSecret
	}
	return nil
}

func (m *ResponseGetFileUrlBuilder) GetTimeout() int32 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// Requesting pload url
type RequestGetFileUploadUrl struct {
	ExpectedSize int32 `protobuf:"varint,1,opt,name=expected_size,json=expectedSize" json:"expected_size,omitempty"`
}

func (m *RequestGetFileUploadUrl) Reset()                    { *m = RequestGetFileUploadUrl{} }
func (m *RequestGetFileUploadUrl) String() string            { return proto.CompactTextString(m) }
func (*RequestGetFileUploadUrl) ProtoMessage()               {}
func (*RequestGetFileUploadUrl) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{17} }

func (m *RequestGetFileUploadUrl) GetExpectedSize() int32 {
	if m != nil {
		return m.ExpectedSize
	}
	return 0
}

type ResponseGetFileUploadUrl struct {
	Url       string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
	UploadKey []byte `protobuf:"bytes,2,opt,name=upload_key,json=uploadKey,proto3" json:"upload_key,omitempty"`
}

func (m *ResponseGetFileUploadUrl) Reset()                    { *m = ResponseGetFileUploadUrl{} }
func (m *ResponseGetFileUploadUrl) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetFileUploadUrl) ProtoMessage()               {}
func (*ResponseGetFileUploadUrl) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{18} }

func (m *ResponseGetFileUploadUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ResponseGetFileUploadUrl) GetUploadKey() []byte {
	if m != nil {
		return m.UploadKey
	}
	return nil
}

// Comminting uploaded file to storage
type RequestCommitFileUpload struct {
	UploadKey []byte `protobuf:"bytes,1,opt,name=upload_key,json=uploadKey,proto3" json:"upload_key,omitempty"`
	FileName  string `protobuf:"bytes,2,opt,name=file_name,json=fileName" json:"file_name,omitempty"`
}

func (m *RequestCommitFileUpload) Reset()                    { *m = RequestCommitFileUpload{} }
func (m *RequestCommitFileUpload) String() string            { return proto.CompactTextString(m) }
func (*RequestCommitFileUpload) ProtoMessage()               {}
func (*RequestCommitFileUpload) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{19} }

func (m *RequestCommitFileUpload) GetUploadKey() []byte {
	if m != nil {
		return m.UploadKey
	}
	return nil
}

func (m *RequestCommitFileUpload) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

type ResponseCommitFileUpload struct {
	UploadedFileLocation *FileLocation `protobuf:"bytes,1,opt,name=uploaded_file_location,json=uploadedFileLocation" json:"uploaded_file_location,omitempty"`
}

func (m *ResponseCommitFileUpload) Reset()                    { *m = ResponseCommitFileUpload{} }
func (m *ResponseCommitFileUpload) String() string            { return proto.CompactTextString(m) }
func (*ResponseCommitFileUpload) ProtoMessage()               {}
func (*ResponseCommitFileUpload) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{20} }

func (m *ResponseCommitFileUpload) GetUploadedFileLocation() *FileLocation {
	if m != nil {
		return m.UploadedFileLocation
	}
	return nil
}

// Upload file part
type RequestGetFileUploadPartUrl struct {
	PartNumber int32  `protobuf:"varint,1,opt,name=part_number,json=partNumber" json:"part_number,omitempty"`
	PartSize   int32  `protobuf:"varint,2,opt,name=part_size,json=partSize" json:"part_size,omitempty"`
	UploadKey  []byte `protobuf:"bytes,3,opt,name=upload_key,json=uploadKey,proto3" json:"upload_key,omitempty"`
}

func (m *RequestGetFileUploadPartUrl) Reset()                    { *m = RequestGetFileUploadPartUrl{} }
func (m *RequestGetFileUploadPartUrl) String() string            { return proto.CompactTextString(m) }
func (*RequestGetFileUploadPartUrl) ProtoMessage()               {}
func (*RequestGetFileUploadPartUrl) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{21} }

func (m *RequestGetFileUploadPartUrl) GetPartNumber() int32 {
	if m != nil {
		return m.PartNumber
	}
	return 0
}

func (m *RequestGetFileUploadPartUrl) GetPartSize() int32 {
	if m != nil {
		return m.PartSize
	}
	return 0
}

func (m *RequestGetFileUploadPartUrl) GetUploadKey() []byte {
	if m != nil {
		return m.UploadKey
	}
	return nil
}

type ResponseGetFileUploadPartUrl struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *ResponseGetFileUploadPartUrl) Reset()                    { *m = ResponseGetFileUploadPartUrl{} }
func (m *ResponseGetFileUploadPartUrl) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetFileUploadPartUrl) ProtoMessage()               {}
func (*ResponseGetFileUploadPartUrl) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{22} }

func (m *ResponseGetFileUploadPartUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*FileLocation)(nil), "dialog.FileLocation")
	proto.RegisterType((*ImageLocation)(nil), "dialog.ImageLocation")
	proto.RegisterType((*AudioLocation)(nil), "dialog.AudioLocation")
	proto.RegisterType((*AvatarImage)(nil), "dialog.AvatarImage")
	proto.RegisterType((*Avatar)(nil), "dialog.Avatar")
	proto.RegisterType((*FastThumb)(nil), "dialog.FastThumb")
	proto.RegisterType((*Color)(nil), "dialog.Color")
	proto.RegisterType((*RgbColor)(nil), "dialog.RgbColor")
	proto.RegisterType((*PredefinedColor)(nil), "dialog.PredefinedColor")
	proto.RegisterType((*HTTPHeader)(nil), "dialog.HTTPHeader")
	proto.RegisterType((*FileUrlDescription)(nil), "dialog.FileUrlDescription")
	proto.RegisterType((*RequestGetFileUrl)(nil), "dialog.RequestGetFileUrl")
	proto.RegisterType((*ResponseGetFileUrl)(nil), "dialog.ResponseGetFileUrl")
	proto.RegisterType((*RequestGetFileUrls)(nil), "dialog.RequestGetFileUrls")
	proto.RegisterType((*ResponseGetFileUrls)(nil), "dialog.ResponseGetFileUrls")
	proto.RegisterType((*RequestGetFileUrlBuilder)(nil), "dialog.RequestGetFileUrlBuilder")
	proto.RegisterType((*ResponseGetFileUrlBuilder)(nil), "dialog.ResponseGetFileUrlBuilder")
	proto.RegisterType((*RequestGetFileUploadUrl)(nil), "dialog.RequestGetFileUploadUrl")
	proto.RegisterType((*ResponseGetFileUploadUrl)(nil), "dialog.ResponseGetFileUploadUrl")
	proto.RegisterType((*RequestCommitFileUpload)(nil), "dialog.RequestCommitFileUpload")
	proto.RegisterType((*ResponseCommitFileUpload)(nil), "dialog.ResponseCommitFileUpload")
	proto.RegisterType((*RequestGetFileUploadPartUrl)(nil), "dialog.RequestGetFileUploadPartUrl")
	proto.RegisterType((*ResponseGetFileUploadPartUrl)(nil), "dialog.ResponseGetFileUploadPartUrl")
	proto.RegisterEnum("dialog.Colors", Colors_name, Colors_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for MediaAndFiles service

type MediaAndFilesClient interface {
	// / Get link to file for downloading
	GetFileUrl(ctx context.Context, in *RequestGetFileUrl, opts ...grpc.CallOption) (*ResponseGetFileUrl, error)
	// / Get link to files for downloading
	GetFileUrls(ctx context.Context, in *RequestGetFileUrls, opts ...grpc.CallOption) (*ResponseGetFileUrls, error)
	// / Create builder for file url
	GetFileUrlBuilder(ctx context.Context, in *RequestGetFileUrlBuilder, opts ...grpc.CallOption) (*ResponseGetFileUrlBuilder, error)
	// / Get url for uploading
	GetFileUploadUrl(ctx context.Context, in *RequestGetFileUploadUrl, opts ...grpc.CallOption) (*ResponseGetFileUploadUrl, error)
	// / Finish uploading a file
	CommitFileUpload(ctx context.Context, in *RequestCommitFileUpload, opts ...grpc.CallOption) (*ResponseCommitFileUpload, error)
	// / Get url for uploading chunk of file
	GetFileUploadPartUrl(ctx context.Context, in *RequestGetFileUploadPartUrl, opts ...grpc.CallOption) (*ResponseGetFileUploadPartUrl, error)
}

type mediaAndFilesClient struct {
	cc *grpc.ClientConn
}

func NewMediaAndFilesClient(cc *grpc.ClientConn) MediaAndFilesClient {
	return &mediaAndFilesClient{cc}
}

func (c *mediaAndFilesClient) GetFileUrl(ctx context.Context, in *RequestGetFileUrl, opts ...grpc.CallOption) (*ResponseGetFileUrl, error) {
	out := new(ResponseGetFileUrl)
	err := grpc.Invoke(ctx, "/dialog.MediaAndFiles/GetFileUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAndFilesClient) GetFileUrls(ctx context.Context, in *RequestGetFileUrls, opts ...grpc.CallOption) (*ResponseGetFileUrls, error) {
	out := new(ResponseGetFileUrls)
	err := grpc.Invoke(ctx, "/dialog.MediaAndFiles/GetFileUrls", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAndFilesClient) GetFileUrlBuilder(ctx context.Context, in *RequestGetFileUrlBuilder, opts ...grpc.CallOption) (*ResponseGetFileUrlBuilder, error) {
	out := new(ResponseGetFileUrlBuilder)
	err := grpc.Invoke(ctx, "/dialog.MediaAndFiles/GetFileUrlBuilder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAndFilesClient) GetFileUploadUrl(ctx context.Context, in *RequestGetFileUploadUrl, opts ...grpc.CallOption) (*ResponseGetFileUploadUrl, error) {
	out := new(ResponseGetFileUploadUrl)
	err := grpc.Invoke(ctx, "/dialog.MediaAndFiles/GetFileUploadUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAndFilesClient) CommitFileUpload(ctx context.Context, in *RequestCommitFileUpload, opts ...grpc.CallOption) (*ResponseCommitFileUpload, error) {
	out := new(ResponseCommitFileUpload)
	err := grpc.Invoke(ctx, "/dialog.MediaAndFiles/CommitFileUpload", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaAndFilesClient) GetFileUploadPartUrl(ctx context.Context, in *RequestGetFileUploadPartUrl, opts ...grpc.CallOption) (*ResponseGetFileUploadPartUrl, error) {
	out := new(ResponseGetFileUploadPartUrl)
	err := grpc.Invoke(ctx, "/dialog.MediaAndFiles/GetFileUploadPartUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MediaAndFiles service

type MediaAndFilesServer interface {
	// / Get link to file for downloading
	GetFileUrl(context.Context, *RequestGetFileUrl) (*ResponseGetFileUrl, error)
	// / Get link to files for downloading
	GetFileUrls(context.Context, *RequestGetFileUrls) (*ResponseGetFileUrls, error)
	// / Create builder for file url
	GetFileUrlBuilder(context.Context, *RequestGetFileUrlBuilder) (*ResponseGetFileUrlBuilder, error)
	// / Get url for uploading
	GetFileUploadUrl(context.Context, *RequestGetFileUploadUrl) (*ResponseGetFileUploadUrl, error)
	// / Finish uploading a file
	CommitFileUpload(context.Context, *RequestCommitFileUpload) (*ResponseCommitFileUpload, error)
	// / Get url for uploading chunk of file
	GetFileUploadPartUrl(context.Context, *RequestGetFileUploadPartUrl) (*ResponseGetFileUploadPartUrl, error)
}

func RegisterMediaAndFilesServer(s *grpc.Server, srv MediaAndFilesServer) {
	s.RegisterService(&_MediaAndFiles_serviceDesc, srv)
}

func _MediaAndFiles_GetFileUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetFileUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAndFilesServer).GetFileUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.MediaAndFiles/GetFileUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAndFilesServer).GetFileUrl(ctx, req.(*RequestGetFileUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAndFiles_GetFileUrls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetFileUrls)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAndFilesServer).GetFileUrls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.MediaAndFiles/GetFileUrls",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAndFilesServer).GetFileUrls(ctx, req.(*RequestGetFileUrls))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAndFiles_GetFileUrlBuilder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetFileUrlBuilder)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAndFilesServer).GetFileUrlBuilder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.MediaAndFiles/GetFileUrlBuilder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAndFilesServer).GetFileUrlBuilder(ctx, req.(*RequestGetFileUrlBuilder))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAndFiles_GetFileUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetFileUploadUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAndFilesServer).GetFileUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.MediaAndFiles/GetFileUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAndFilesServer).GetFileUploadUrl(ctx, req.(*RequestGetFileUploadUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAndFiles_CommitFileUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCommitFileUpload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAndFilesServer).CommitFileUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.MediaAndFiles/CommitFileUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAndFilesServer).CommitFileUpload(ctx, req.(*RequestCommitFileUpload))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaAndFiles_GetFileUploadPartUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetFileUploadPartUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAndFilesServer).GetFileUploadPartUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.MediaAndFiles/GetFileUploadPartUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAndFilesServer).GetFileUploadPartUrl(ctx, req.(*RequestGetFileUploadPartUrl))
	}
	return interceptor(ctx, in, info, handler)
}

var _MediaAndFiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.MediaAndFiles",
	HandlerType: (*MediaAndFilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFileUrl",
			Handler:    _MediaAndFiles_GetFileUrl_Handler,
		},
		{
			MethodName: "GetFileUrls",
			Handler:    _MediaAndFiles_GetFileUrls_Handler,
		},
		{
			MethodName: "GetFileUrlBuilder",
			Handler:    _MediaAndFiles_GetFileUrlBuilder_Handler,
		},
		{
			MethodName: "GetFileUploadUrl",
			Handler:    _MediaAndFiles_GetFileUploadUrl_Handler,
		},
		{
			MethodName: "CommitFileUpload",
			Handler:    _MediaAndFiles_CommitFileUpload_Handler,
		},
		{
			MethodName: "GetFileUploadPartUrl",
			Handler:    _MediaAndFiles_GetFileUploadPartUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "media_and_files.proto",
}

func init() { proto.RegisterFile("media_and_files.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 1423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xdc, 0x57, 0x4d, 0x73, 0xd3, 0xc6,
	0x1b, 0x47, 0x71, 0xec, 0xc4, 0x8f, 0xed, 0xe0, 0x2c, 0x01, 0x1c, 0x27, 0x90, 0x20, 0xf8, 0xf3,
	0x12, 0xc0, 0xe6, 0x6f, 0x66, 0x4a, 0x9b, 0x4b, 0x26, 0x09, 0x81, 0x50, 0x42, 0x42, 0x95, 0x50,
	0xa6, 0x27, 0xcf, 0xda, 0xda, 0xc8, 0x0b, 0x7a, 0x43, 0x2b, 0x25, 0x0d, 0xc7, 0xce, 0xf4, 0x50,
	0xa6, 0x3d, 0xf5, 0xd4, 0x4f, 0xd0, 0xe9, 0x87, 0xe8, 0xa5, 0x5f, 0xa0, 0xd3, 0xe9, 0xf4, 0xd6,
	0x13, 0xd3, 0xe9, 0x81, 0x4f, 0xd1, 0xd9, 0x5d, 0xc9, 0x56, 0x24, 0x1b, 0x85, 0x43, 0x2f, 0x3d,
	0x45, 0x79, 0x5e, 0x7f, 0xbf, 0xdf, 0xee, 0xf3, 0x48, 0x86, 0xb3, 0x16, 0xd1, 0x29, 0x6e, 0x63,
	0x5b, 0x6f, 0xef, 0x53, 0x93, 0xb0, 0x86, 0xeb, 0x39, 0xbe, 0x83, 0x0a, 0x3a, 0xc5, 0xa6, 0x63,
	0xd4, 0x2f, 0x1a, 0x8e, 0x63, 0x98, 0xa4, 0x29, 0xac, 0x9d, 0x60, 0xbf, 0x79, 0xe8, 0x61, 0xd7,
	0x25, 0x5e, 0x18, 0x57, 0x9f, 0x0f, 0xfd, 0xd8, 0xa5, 0x4d, 0x6c, 0xdb, 0x8e, 0x8f, 0x7d, 0xea,
	0xd8, 0x91, 0x77, 0x5a, 0x27, 0xfb, 0xd4, 0xa6, 0x71, 0xd3, 0x59, 0xd6, 0xc5, 0x26, 0x76, 0x3b,
	0xcd, 0xf0, 0xaf, 0x34, 0xab, 0x04, 0xca, 0x0f, 0xa8, 0x49, 0xb6, 0x9c, 0xae, 0x28, 0x80, 0xae,
	0xc2, 0x04, 0x87, 0xd3, 0xa6, 0x7a, 0x4d, 0x59, 0x54, 0xae, 0xe7, 0xd6, 0x2a, 0x6f, 0xde, 0xdd,
	0x29, 0xc2, 0xc4, 0x01, 0x65, 0xb4, 0x63, 0x12, 0xad, 0xc0, 0xbd, 0x8f, 0x74, 0x74, 0x1b, 0x4a,
	0xb8, 0xdb, 0x25, 0x8c, 0xb5, 0x7b, 0x98, 0xf5, 0x6a, 0x63, 0x22, 0xb6, 0xfc, 0xe6, 0xdd, 0x9d,
	0x49, 0x28, 0xe8, 0xd8, 0x36, 0x88, 0xa7, 0x81, 0x0c, 0xd8, 0xc4, 0xac, 0xa7, 0xfe, 0xa6, 0x40,
	0xe5, 0x91, 0x85, 0x8d, 0x41, 0xa3, 0x4d, 0xa8, 0x88, 0x46, 0x66, 0x68, 0x10, 0xed, 0x4a, 0xad,
	0x99, 0x86, 0x14, 0xa0, 0x11, 0x47, 0x95, 0x04, 0x51, 0xde, 0x8f, 0x43, 0xbe, 0x0c, 0xf9, 0x43,
	0xaa, 0xfb, 0x12, 0x44, 0x3e, 0x19, 0x2b, 0x7d, 0xe8, 0x7f, 0x50, 0xe8, 0x11, 0x6a, 0xf4, 0xfc,
	0x5a, 0x6e, 0x58, 0x54, 0xe8, 0x44, 0x4b, 0x50, 0x14, 0xa8, 0x18, 0x7d, 0x4d, 0x6a, 0xe3, 0xc3,
	0x22, 0x27, 0xb9, 0x7f, 0x97, 0xbe, 0x26, 0xea, 0x9f, 0x0a, 0x54, 0x56, 0x03, 0x9d, 0x3a, 0xff,
	0x02, 0xa7, 0x1b, 0x30, 0xa9, 0x07, 0x9e, 0x2c, 0x32, 0x94, 0x56, 0xdf, 0xcd, 0x21, 0x5b, 0xd4,
	0x22, 0x6d, 0xff, 0xc8, 0x25, 0x82, 0x5c, 0x31, 0x15, 0xcb, 0xfd, 0x7b, 0x47, 0x2e, 0xf9, 0x20,
	0x7a, 0xbf, 0x2a, 0x50, 0x5a, 0x3d, 0xc0, 0x3e, 0xf6, 0xc4, 0xc1, 0xfd, 0x07, 0x0e, 0xec, 0x0f,
	0x05, 0x0a, 0x92, 0x11, 0x5a, 0x87, 0x12, 0xb3, 0xb0, 0x69, 0xb6, 0x29, 0xe7, 0x16, 0x52, 0x39,
	0x13, 0x51, 0x89, 0xd1, 0x8e, 0xaa, 0x75, 0x1d, 0xcb, 0xc5, 0x5d, 0x5f, 0x03, 0x91, 0x26, 0x15,
	0x59, 0x87, 0x92, 0x89, 0x3d, 0x83, 0x84, 0x45, 0xc6, 0x4e, 0x5e, 0x44, 0xa4, 0xc9, 0x22, 0xab,
	0x00, 0xfb, 0x41, 0x1f, 0x48, 0xee, 0xc4, 0x35, 0x8a, 0x3c, 0x4b, 0x78, 0xd4, 0x17, 0x50, 0x7c,
	0x80, 0x99, 0xbf, 0xd7, 0x0b, 0xac, 0x0e, 0x9a, 0x03, 0xe5, 0x50, 0xf0, 0x49, 0x09, 0xa1, 0x1c,
	0x72, 0xe7, 0x08, 0xd5, 0x95, 0x1e, 0x3f, 0x16, 0x9f, 0x97, 0x10, 0x20, 0xca, 0xc9, 0x7e, 0xd2,
	0xa7, 0xba, 0x90, 0x5f, 0x77, 0x4c, 0xc7, 0x43, 0x57, 0x20, 0xe7, 0x19, 0x9d, 0x50, 0xb9, 0x6a,
	0x04, 0x58, 0x33, 0x3a, 0xc2, 0xbd, 0x79, 0x4a, 0xe3, 0x6e, 0xf4, 0x09, 0x80, 0xeb, 0x11, 0xb1,
	0x8d, 0x88, 0x1e, 0x2a, 0x74, 0x3e, 0x0a, 0x7e, 0xda, 0xf7, 0x44, 0x39, 0xb1, 0xe0, 0xb5, 0x02,
	0x8c, 0x77, 0x1c, 0xfd, 0x48, 0xbd, 0x09, 0x93, 0x51, 0x55, 0xb4, 0x30, 0x68, 0x9a, 0x62, 0xc0,
	0x3d, 0xea, 0x06, 0x9c, 0x4e, 0x54, 0x45, 0x2d, 0xc8, 0x77, 0xf9, 0x83, 0xc8, 0x9a, 0x6a, 0x4d,
	0x45, 0xdd, 0x85, 0x97, 0x45, 0x3b, 0xab, 0x47, 0x75, 0x9d, 0xd8, 0x9a, 0x0c, 0x55, 0x35, 0x80,
	0xcd, 0xbd, 0xbd, 0xa7, 0x9b, 0x04, 0xeb, 0x44, 0x74, 0x7d, 0x49, 0x8e, 0x44, 0x7e, 0x6a, 0xb6,
	0xb8, 0x87, 0x2b, 0x77, 0x80, 0xcd, 0x40, 0x5e, 0x81, 0x54, 0x88, 0xf4, 0xa9, 0x3f, 0x8d, 0x01,
	0xe2, 0x33, 0xf2, 0xcc, 0x33, 0xef, 0x13, 0xd6, 0xf5, 0xa8, 0xfb, 0x41, 0x0b, 0x77, 0x01, 0x72,
	0x81, 0x67, 0x0e, 0xef, 0xc0, 0x3d, 0xe8, 0x1a, 0x4c, 0xf8, 0xd4, 0x22, 0x4e, 0x30, 0x62, 0x62,
	0x22, 0x2f, 0x7a, 0x02, 0xe5, 0xc0, 0x66, 0xd4, 0xb0, 0x89, 0xde, 0xe6, 0x25, 0xc7, 0xc5, 0xa9,
	0xcc, 0x37, 0xe4, 0x1b, 0xa5, 0x11, 0xbd, 0x71, 0x1a, 0xbb, 0xbe, 0x47, 0x6d, 0xe3, 0x73, 0x0e,
	0x3e, 0xa1, 0x52, 0x29, 0xca, 0x7f, 0xe6, 0x99, 0x48, 0x83, 0x99, 0x78, 0xb9, 0x76, 0x4f, 0x88,
	0xc6, 0x6a, 0xf9, 0xc5, 0xdc, 0xf5, 0x52, 0x0b, 0x45, 0x72, 0x0f, 0xf4, 0x4c, 0x14, 0x43, 0xb1,
	0x62, 0x32, 0x80, 0xa9, 0x2f, 0x60, 0x5a, 0x23, 0xaf, 0x02, 0xc2, 0xfc, 0x87, 0xc4, 0x0f, 0x45,
	0x43, 0xf7, 0x60, 0x9c, 0x6b, 0xf1, 0x21, 0x7b, 0x47, 0x24, 0x2c, 0xcf, 0xbf, 0x5d, 0x99, 0x85,
	0xf3, 0xd4, 0x6a, 0xe8, 0xa6, 0xd1, 0x30, 0x3c, 0xb7, 0xdb, 0x78, 0xe8, 0xb9, 0xdd, 0xb0, 0x81,
	0xfa, 0xb7, 0x02, 0x48, 0x23, 0xcc, 0x75, 0x6c, 0x46, 0x62, 0xdd, 0xaa, 0x52, 0x6f, 0x71, 0xe8,
	0x52, 0xe0, 0xda, 0x40, 0x60, 0x31, 0x42, 0x03, 0x45, 0x57, 0x12, 0x8a, 0xe6, 0xb2, 0x15, 0x3d,
	0xae, 0xe1, 0xfd, 0x11, 0x1a, 0x8e, 0x8f, 0xd2, 0x70, 0x98, 0x6a, 0xcb, 0x17, 0xde, 0xae, 0xd4,
	0xa1, 0x96, 0xe6, 0x29, 0xb9, 0xa9, 0x26, 0xe7, 0x99, 0x10, 0x95, 0xa1, 0x8f, 0x21, 0x2f, 0xbe,
	0x3f, 0x6a, 0x8a, 0xe8, 0x35, 0x5c, 0xd6, 0xc4, 0x90, 0x88, 0x84, 0x0c, 0x59, 0x2d, 0x38, 0x93,
	0x56, 0x95, 0xa1, 0x7b, 0xe1, 0xbe, 0x0e, 0x3c, 0x33, 0x6a, 0x59, 0x8f, 0xb7, 0x3c, 0x3e, 0x1d,
	0x72, 0x79, 0xf3, 0xc4, 0x2c, 0x72, 0xdf, 0x2a, 0x50, 0x4b, 0xb1, 0x5b, 0x0b, 0xa8, 0xc9, 0x07,
	0x58, 0x83, 0x8b, 0x2c, 0x70, 0x5d, 0xc7, 0xf3, 0x89, 0xde, 0xe6, 0xb2, 0x61, 0x3f, 0xf0, 0x48,
	0x1b, 0x9b, 0x86, 0xe3, 0x51, 0xbf, 0x67, 0x49, 0x24, 0xc5, 0x04, 0xcd, 0xf9, 0x7e, 0xce, 0x6e,
	0x94, 0xb2, 0xda, 0xcf, 0xc8, 0x60, 0xff, 0x8b, 0x02, 0xb3, 0x69, 0xfa, 0x11, 0x9e, 0x59, 0x98,
	0xec, 0x60, 0x26, 0x44, 0x08, 0x2f, 0xd8, 0x04, 0xff, 0x9f, 0xdf, 0x04, 0x04, 0xe3, 0x1c, 0x96,
	0x9c, 0x73, 0x4d, 0x3c, 0x73, 0x1b, 0x23, 0x44, 0xaf, 0xe5, 0xa5, 0x8d, 0x3f, 0xa3, 0x1b, 0x50,
	0x1d, 0x10, 0x61, 0xa4, 0xeb, 0x11, 0x39, 0xf6, 0x65, 0xed, 0x74, 0xdf, 0xbe, 0x2b, 0xcc, 0xf1,
	0x7b, 0x3b, 0x7e, 0xec, 0xde, 0x66, 0x69, 0xfa, 0x12, 0xce, 0x27, 0x24, 0x75, 0x4d, 0x07, 0x8b,
	0x0b, 0xdb, 0x82, 0x0a, 0xf9, 0xd2, 0x25, 0x5d, 0x29, 0xe8, 0x6b, 0x32, 0x7c, 0x25, 0x97, 0xa3,
	0x18, 0xfe, 0xfa, 0xcd, 0x50, 0xec, 0x05, 0x3f, 0xbf, 0xe3, 0x82, 0xf5, 0xbb, 0xa5, 0x67, 0xf1,
	0x02, 0x40, 0x20, 0xdc, 0x6d, 0xbe, 0x99, 0xc7, 0x04, 0xf1, 0xa2, 0xb4, 0x3c, 0x26, 0x47, 0x59,
	0xc4, 0x58, 0x9f, 0xd8, 0xba, 0x63, 0x59, 0x34, 0xd6, 0x2d, 0x51, 0x58, 0x49, 0x14, 0x46, 0x73,
	0xe1, 0xf5, 0xb5, 0xb1, 0x15, 0x6e, 0x7b, 0x79, 0x45, 0xb7, 0xb1, 0x95, 0x45, 0xf0, 0x6b, 0x65,
	0xc0, 0x30, 0xd5, 0xf6, 0x53, 0x38, 0x27, 0x9b, 0x10, 0xf9, 0x73, 0xe0, 0x44, 0x5f, 0x59, 0xda,
	0x4c, 0x94, 0x13, 0xb7, 0x66, 0x91, 0xff, 0x51, 0x81, 0xb9, 0x61, 0xc7, 0xfa, 0x14, 0x7b, 0x3e,
	0x17, 0x7b, 0x01, 0x4a, 0x2e, 0xf6, 0xfc, 0xb6, 0x1d, 0x58, 0x1d, 0x22, 0xdf, 0x9a, 0x79, 0x0d,
	0xb8, 0x69, 0x5b, 0x58, 0xb8, 0x06, 0x22, 0x40, 0x9c, 0xbb, 0xdc, 0x84, 0x93, 0xdc, 0xc0, 0x0f,
	0x19, 0xdd, 0x3a, 0xa6, 0xdf, 0xd0, 0x2f, 0x89, 0xd8, 0x39, 0xbd, 0x5f, 0xb1, 0x1d, 0x98, 0x1f,
	0x7a, 0x25, 0x22, 0xa4, 0xa9, 0x6b, 0x91, 0x41, 0x7d, 0xe9, 0x33, 0x28, 0xc8, 0xb7, 0x3e, 0x42,
	0x30, 0xb5, 0xbe, 0xb3, 0xb5, 0xa3, 0xed, 0xb6, 0x9f, 0x6d, 0x3f, 0xde, 0xde, 0x79, 0xbe, 0x5d,
	0x3d, 0x85, 0xa6, 0x00, 0x42, 0x9b, 0xb6, 0x71, 0xbf, 0xaa, 0xa0, 0x69, 0xa8, 0x84, 0xff, 0x7f,
	0xb1, 0xb1, 0xb5, 0xb5, 0xf3, 0xbc, 0x3a, 0x86, 0xaa, 0x50, 0x0e, 0x4d, 0x0f, 0xb5, 0x8d, 0x8d,
	0xed, 0x6a, 0xae, 0xf5, 0x73, 0x01, 0x2a, 0x4f, 0xf8, 0x2f, 0xb9, 0x55, 0x5b, 0x9c, 0x02, 0x43,
	0xaf, 0x00, 0x62, 0xaf, 0x91, 0xd9, 0xfe, 0x97, 0x51, 0x72, 0x39, 0xd5, 0xeb, 0x03, 0x57, 0x72,
	0x51, 0xa8, 0xb7, 0xbe, 0xfa, 0xfd, 0xaf, 0xef, 0xc7, 0xae, 0xaa, 0x97, 0x9a, 0x07, 0xff, 0x6f,
	0x72, 0x22, 0xcd, 0x63, 0x4d, 0x9a, 0x83, 0xd0, 0x65, 0x65, 0x09, 0x05, 0x50, 0x8a, 0xef, 0xd8,
	0xfa, 0xc8, 0x9e, 0xac, 0x3e, 0x37, 0xba, 0x29, 0x53, 0x6f, 0x8b, 0xae, 0xd7, 0x54, 0x35, 0xb3,
	0x2b, 0xe3, 0x6d, 0xbf, 0x53, 0x60, 0x3a, 0xbd, 0xdc, 0x16, 0x47, 0x76, 0x0f, 0x23, 0xea, 0x97,
	0x46, 0x63, 0x08, 0x43, 0xd4, 0xbb, 0x02, 0xc9, 0x6d, 0xf5, 0x7a, 0x26, 0x92, 0x30, 0x83, 0xe3,
	0xf9, 0x46, 0x81, 0x6a, 0x6a, 0x77, 0x2c, 0x8c, 0x80, 0x13, 0x05, 0xd4, 0x17, 0x47, 0xa1, 0x89,
	0x22, 0xd4, 0x96, 0x00, 0x73, 0x4b, 0xbd, 0x96, 0x01, 0x26, 0x4a, 0x88, 0xb0, 0xa4, 0xa6, 0x3c,
	0x89, 0x25, 0x19, 0x90, 0xc6, 0x92, 0x8c, 0xc8, 0xc4, 0x92, 0x4c, 0xe0, 0x58, 0x7e, 0x50, 0x60,
	0x66, 0xe8, 0x00, 0x5d, 0x7e, 0x9f, 0x36, 0x61, 0x50, 0xfd, 0xca, 0x7b, 0xf5, 0x09, 0xa3, 0xd4,
	0x8f, 0x04, 0xae, 0x3b, 0xea, 0xcd, 0x93, 0x68, 0x14, 0x26, 0x2d, 0x2b, 0x4b, 0x6b, 0xb3, 0x6f,
	0x57, 0xce, 0xc1, 0x4c, 0x7c, 0x62, 0x19, 0xf1, 0x0e, 0x68, 0x97, 0xb0, 0x4e, 0x41, 0x7c, 0x37,
	0xdd, 0xfd, 0x27, 0x00, 0x00, 0xff, 0xff, 0x6f, 0xb2, 0x62, 0xe8, 0x2a, 0x11, 0x00, 0x00,
}
