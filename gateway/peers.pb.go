// Code generated by protoc-gen-go.
// source: peers.proto
// DO NOT EDIT!

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PeerType int32

const (
	PeerType_PEERTYPE_UNKNOWN          PeerType = 0
	PeerType_PEERTYPE_PRIVATE          PeerType = 1
	PeerType_PEERTYPE_GROUP            PeerType = 2
	PeerType_PEERTYPE_ENCRYPTEDPRIVATE PeerType = 3
	PeerType_PEERTYPE_SIP              PeerType = 4
)

var PeerType_name = map[int32]string{
	0: "PEERTYPE_UNKNOWN",
	1: "PEERTYPE_PRIVATE",
	2: "PEERTYPE_GROUP",
	3: "PEERTYPE_ENCRYPTEDPRIVATE",
	4: "PEERTYPE_SIP",
}
var PeerType_value = map[string]int32{
	"PEERTYPE_UNKNOWN":          0,
	"PEERTYPE_PRIVATE":          1,
	"PEERTYPE_GROUP":            2,
	"PEERTYPE_ENCRYPTEDPRIVATE": 3,
	"PEERTYPE_SIP":              4,
}

func (x PeerType) String() string {
	return proto.EnumName(PeerType_name, int32(x))
}
func (PeerType) EnumDescriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

// Peer
type Peer struct {
	Type  PeerType                     `protobuf:"varint,1,opt,name=type,enum=dialog.PeerType" json:"type,omitempty"`
	Id    int32                        `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	StrId *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=str_id,json=strId" json:"str_id,omitempty"`
}

func (m *Peer) Reset()                    { *m = Peer{} }
func (m *Peer) String() string            { return proto.CompactTextString(m) }
func (*Peer) ProtoMessage()               {}
func (*Peer) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{0} }

func (m *Peer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PeerType_PEERTYPE_UNKNOWN
}

func (m *Peer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Peer) GetStrId() *google_protobuf.StringValue {
	if m != nil {
		return m.StrId
	}
	return nil
}

// Out peer with access hash
type OutPeer struct {
	Type       PeerType                     `protobuf:"varint,1,opt,name=type,enum=dialog.PeerType" json:"type,omitempty"`
	Id         int32                        `protobuf:"varint,2,opt,name=id" json:"id,omitempty"`
	AccessHash int64                        `protobuf:"varint,3,opt,name=access_hash,json=accessHash" json:"access_hash,omitempty"`
	StrId      *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=str_id,json=strId" json:"str_id,omitempty"`
}

func (m *OutPeer) Reset()                    { *m = OutPeer{} }
func (m *OutPeer) String() string            { return proto.CompactTextString(m) }
func (*OutPeer) ProtoMessage()               {}
func (*OutPeer) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{1} }

func (m *OutPeer) GetType() PeerType {
	if m != nil {
		return m.Type
	}
	return PeerType_PEERTYPE_UNKNOWN
}

func (m *OutPeer) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *OutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *OutPeer) GetStrId() *google_protobuf.StringValue {
	if m != nil {
		return m.StrId
	}
	return nil
}

// User's out peer
type UserOutPeer struct {
	Uid        int32 `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash" json:"access_hash,omitempty"`
}

func (m *UserOutPeer) Reset()                    { *m = UserOutPeer{} }
func (m *UserOutPeer) String() string            { return proto.CompactTextString(m) }
func (*UserOutPeer) ProtoMessage()               {}
func (*UserOutPeer) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{2} }

func (m *UserOutPeer) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserOutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

// Group's out peer
type GroupOutPeer struct {
	GroupId    int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	AccessHash int64 `protobuf:"varint,2,opt,name=access_hash,json=accessHash" json:"access_hash,omitempty"`
}

func (m *GroupOutPeer) Reset()                    { *m = GroupOutPeer{} }
func (m *GroupOutPeer) String() string            { return proto.CompactTextString(m) }
func (*GroupOutPeer) ProtoMessage()               {}
func (*GroupOutPeer) Descriptor() ([]byte, []int) { return fileDescriptor14, []int{3} }

func (m *GroupOutPeer) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupOutPeer) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func init() {
	proto.RegisterType((*Peer)(nil), "dialog.Peer")
	proto.RegisterType((*OutPeer)(nil), "dialog.OutPeer")
	proto.RegisterType((*UserOutPeer)(nil), "dialog.UserOutPeer")
	proto.RegisterType((*GroupOutPeer)(nil), "dialog.GroupOutPeer")
	proto.RegisterEnum("dialog.PeerType", PeerType_name, PeerType_value)
}

func init() { proto.RegisterFile("peers.proto", fileDescriptor14) }

var fileDescriptor14 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xb4, 0x91, 0xd1, 0x6a, 0xdb, 0x30,
	0x18, 0x85, 0x67, 0x27, 0x4d, 0xb2, 0x3f, 0x59, 0xf1, 0x44, 0x37, 0xd2, 0xd2, 0x6e, 0x21, 0x57,
	0x61, 0x30, 0xa5, 0xb4, 0x0f, 0x30, 0x96, 0xcd, 0x74, 0x61, 0x90, 0x18, 0x37, 0xe9, 0xe8, 0xc5,
	0x30, 0xb2, 0xa5, 0x2a, 0x02, 0xcf, 0x12, 0x92, 0xdc, 0x51, 0xf6, 0x06, 0x7d, 0x88, 0x3d, 0xd3,
	0x9e, 0x61, 0x97, 0x7d, 0x8a, 0x11, 0xbb, 0x36, 0x5d, 0xc3, 0x06, 0x1b, 0xf4, 0x4a, 0xe8, 0x9c,
	0x23, 0xfd, 0xdf, 0x91, 0xa0, 0xab, 0x18, 0xd3, 0x06, 0x2b, 0x2d, 0xad, 0x44, 0x2d, 0x2a, 0x48,
	0x2a, 0xf9, 0xde, 0x0b, 0x2e, 0x25, 0x4f, 0xd9, 0xb8, 0x50, 0xe3, 0xfc, 0x62, 0xfc, 0x55, 0x13,
	0xa5, 0xea, 0xdc, 0xde, 0xfe, 0xad, 0x4f, 0x94, 0x18, 0x93, 0x2c, 0x93, 0x96, 0x58, 0x21, 0xb3,
	0xca, 0x7d, 0x4a, 0xd9, 0x85, 0xc8, 0xc4, 0x5d, 0xe9, 0x99, 0x49, 0x48, 0x4a, 0x54, 0x3c, 0xbe,
	0x5d, 0x4b, 0x79, 0xf8, 0xdd, 0x81, 0x66, 0xc0, 0x98, 0x46, 0xc7, 0xd0, 0xb4, 0x57, 0x8a, 0xf5,
	0x9d, 0x81, 0x33, 0xda, 0x3e, 0xf2, 0x70, 0xc9, 0x81, 0xd7, 0xde, 0xe2, 0x4a, 0xb1, 0xc9, 0x93,
	0xeb, 0x9b, 0xc3, 0xc7, 0xd0, 0xbe, 0x14, 0x46, 0xc4, 0x29, 0x0b, 0x8b, 0x30, 0x3a, 0x00, 0x57,
	0xd0, 0xbe, 0x3b, 0x70, 0x46, 0x5b, 0xf7, 0x03, 0xae, 0xa0, 0x68, 0x02, 0x2d, 0x63, 0x75, 0x24,
	0x68, 0xbf, 0x31, 0x70, 0x46, 0xdd, 0xa3, 0x7d, 0x5c, 0x52, 0xe3, 0xaa, 0x15, 0x3e, 0xb5, 0x5a,
	0x64, 0xfc, 0x8c, 0xa4, 0xf9, 0xc6, 0x84, 0x2d, 0x63, 0xf5, 0x94, 0x0e, 0x7f, 0x38, 0xd0, 0x9e,
	0xe7, 0xf6, 0xc1, 0x18, 0x5f, 0x43, 0x97, 0x24, 0x09, 0x33, 0x26, 0x5a, 0x11, 0xb3, 0x2a, 0x40,
	0x1b, 0x93, 0xde, 0xf5, 0xcd, 0x61, 0x07, 0x5a, 0x94, 0x64, 0x9c, 0xe9, 0x10, 0xca, 0xc0, 0x07,
	0x62, 0x56, 0x77, 0x2a, 0x35, 0xff, 0xbb, 0xd2, 0x67, 0xe8, 0x2e, 0x0d, 0xd3, 0x55, 0xab, 0x97,
	0xd0, 0xc8, 0x05, 0x2d, 0x4a, 0x6d, 0x10, 0xae, 0x9d, 0xfb, 0x88, 0xee, 0xdf, 0x11, 0x87, 0x1c,
	0x7a, 0x27, 0x5a, 0xe6, 0xaa, 0xba, 0x7f, 0x04, 0x1d, 0xbe, 0xde, 0x47, 0x7f, 0x1a, 0xd2, 0x2e,
	0xec, 0xe9, 0xbf, 0x0e, 0x7a, 0xf5, 0x0d, 0x3a, 0xd5, 0xd3, 0xa3, 0x1d, 0xf0, 0x02, 0xdf, 0x0f,
	0x17, 0xe7, 0x81, 0x1f, 0x2d, 0x67, 0x1f, 0x67, 0xf3, 0x4f, 0x33, 0xef, 0xd1, 0x6f, 0x6a, 0x10,
	0x4e, 0xcf, 0xde, 0x2e, 0x7c, 0xcf, 0x41, 0x08, 0xb6, 0x6b, 0xf5, 0x24, 0x9c, 0x2f, 0x03, 0xcf,
	0x45, 0x07, 0xb0, 0x5b, 0x6b, 0xfe, 0xec, 0x5d, 0x78, 0x1e, 0x2c, 0xfc, 0xf7, 0xd5, 0x91, 0x06,
	0xf2, 0xa0, 0x57, 0xdb, 0xa7, 0xd3, 0xc0, 0x6b, 0x4e, 0x76, 0x7f, 0xbe, 0x79, 0x0e, 0x3b, 0xe2,
	0x0b, 0xa6, 0x29, 0xc7, 0x5c, 0xab, 0x04, 0x1b, 0xa6, 0x2f, 0x45, 0xc2, 0x4c, 0xdc, 0x2a, 0xfe,
	0xe2, 0xf8, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x29, 0x3e, 0x22, 0xfe, 0x59, 0x03, 0x00, 0x00,
}
