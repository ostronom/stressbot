// Code generated by protoc-gen-go.
// source: event_bus.proto
// DO NOT EDIT!

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Joining Event Bus
type RequestJoinEventBus struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *RequestJoinEventBus) Reset()                    { *m = RequestJoinEventBus{} }
func (m *RequestJoinEventBus) String() string            { return proto.CompactTextString(m) }
func (*RequestJoinEventBus) ProtoMessage()               {}
func (*RequestJoinEventBus) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{0} }

func (m *RequestJoinEventBus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestJoinEventBus) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

type ResponseJoinEventBus struct {
	DeviceId int64 `protobuf:"varint,1,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
}

func (m *ResponseJoinEventBus) Reset()                    { *m = ResponseJoinEventBus{} }
func (m *ResponseJoinEventBus) String() string            { return proto.CompactTextString(m) }
func (*ResponseJoinEventBus) ProtoMessage()               {}
func (*ResponseJoinEventBus) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{1} }

func (m *ResponseJoinEventBus) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

// Keep Alive Event Bus
type RequestKeepAliveEventBus struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Timeout int64  `protobuf:"varint,2,opt,name=timeout" json:"timeout,omitempty"`
}

func (m *RequestKeepAliveEventBus) Reset()                    { *m = RequestKeepAliveEventBus{} }
func (m *RequestKeepAliveEventBus) String() string            { return proto.CompactTextString(m) }
func (*RequestKeepAliveEventBus) ProtoMessage()               {}
func (*RequestKeepAliveEventBus) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{2} }

func (m *RequestKeepAliveEventBus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestKeepAliveEventBus) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

// Event Bus Destination
type RequestPostToEventBus struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// / Destination device ids
	Destinations []int64 `protobuf:"varint,2,rep,packed,name=destinations" json:"destinations,omitempty"`
	// / Message to send
	Message []byte `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *RequestPostToEventBus) Reset()                    { *m = RequestPostToEventBus{} }
func (m *RequestPostToEventBus) String() string            { return proto.CompactTextString(m) }
func (*RequestPostToEventBus) ProtoMessage()               {}
func (*RequestPostToEventBus) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{3} }

func (m *RequestPostToEventBus) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *RequestPostToEventBus) GetDestinations() []int64 {
	if m != nil {
		return m.Destinations
	}
	return nil
}

func (m *RequestPostToEventBus) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// Update about pubsub device connected
type UpdateEventBusDeviceConnected struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	DeviceId int64  `protobuf:"varint,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Peer     *Peer  `protobuf:"bytes,4,opt,name=peer" json:"peer,omitempty"`
}

func (m *UpdateEventBusDeviceConnected) Reset()                    { *m = UpdateEventBusDeviceConnected{} }
func (m *UpdateEventBusDeviceConnected) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventBusDeviceConnected) ProtoMessage()               {}
func (*UpdateEventBusDeviceConnected) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{4} }

func (m *UpdateEventBusDeviceConnected) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEventBusDeviceConnected) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateEventBusDeviceConnected) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *UpdateEventBusDeviceConnected) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Update about device disconnected
type UpdateEventBusDeviceDisconnected struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	UserId   int32  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	DeviceId int64  `protobuf:"varint,3,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	Peer     *Peer  `protobuf:"bytes,4,opt,name=peer" json:"peer,omitempty"`
}

func (m *UpdateEventBusDeviceDisconnected) Reset()         { *m = UpdateEventBusDeviceDisconnected{} }
func (m *UpdateEventBusDeviceDisconnected) String() string { return proto.CompactTextString(m) }
func (*UpdateEventBusDeviceDisconnected) ProtoMessage()    {}
func (*UpdateEventBusDeviceDisconnected) Descriptor() ([]byte, []int) {
	return fileDescriptor7, []int{5}
}

func (m *UpdateEventBusDeviceDisconnected) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEventBusDeviceDisconnected) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateEventBusDeviceDisconnected) GetDeviceId() int64 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *UpdateEventBusDeviceDisconnected) GetPeer() *Peer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// Event Bus Message
type UpdateEventBusMessage struct {
	Id             string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	SenderId       int32  `protobuf:"varint,2,opt,name=sender_id,json=senderId" json:"sender_id,omitempty"`
	SenderDeviceId int64  `protobuf:"varint,3,opt,name=sender_device_id,json=senderDeviceId" json:"sender_device_id,omitempty"`
	Message        []byte `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *UpdateEventBusMessage) Reset()                    { *m = UpdateEventBusMessage{} }
func (m *UpdateEventBusMessage) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventBusMessage) ProtoMessage()               {}
func (*UpdateEventBusMessage) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{6} }

func (m *UpdateEventBusMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEventBusMessage) GetSenderId() int32 {
	if m != nil {
		return m.SenderId
	}
	return 0
}

func (m *UpdateEventBusMessage) GetSenderDeviceId() int64 {
	if m != nil {
		return m.SenderDeviceId
	}
	return 0
}

func (m *UpdateEventBusMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

// Event Bus dispose
type UpdateEventBusDisposed struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *UpdateEventBusDisposed) Reset()                    { *m = UpdateEventBusDisposed{} }
func (m *UpdateEventBusDisposed) String() string            { return proto.CompactTextString(m) }
func (*UpdateEventBusDisposed) ProtoMessage()               {}
func (*UpdateEventBusDisposed) Descriptor() ([]byte, []int) { return fileDescriptor7, []int{7} }

func (m *UpdateEventBusDisposed) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestJoinEventBus)(nil), "dialog.RequestJoinEventBus")
	proto.RegisterType((*ResponseJoinEventBus)(nil), "dialog.ResponseJoinEventBus")
	proto.RegisterType((*RequestKeepAliveEventBus)(nil), "dialog.RequestKeepAliveEventBus")
	proto.RegisterType((*RequestPostToEventBus)(nil), "dialog.RequestPostToEventBus")
	proto.RegisterType((*UpdateEventBusDeviceConnected)(nil), "dialog.UpdateEventBusDeviceConnected")
	proto.RegisterType((*UpdateEventBusDeviceDisconnected)(nil), "dialog.UpdateEventBusDeviceDisconnected")
	proto.RegisterType((*UpdateEventBusMessage)(nil), "dialog.UpdateEventBusMessage")
	proto.RegisterType((*UpdateEventBusDisposed)(nil), "dialog.UpdateEventBusDisposed")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventBus service

type EventBusClient interface {
	JoinEventBus(ctx context.Context, in *RequestJoinEventBus, opts ...grpc.CallOption) (*ResponseJoinEventBus, error)
	KeepAliveEventBus(ctx context.Context, in *RequestKeepAliveEventBus, opts ...grpc.CallOption) (*ResponseVoid, error)
	PostToEventBus(ctx context.Context, in *RequestPostToEventBus, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type eventBusClient struct {
	cc *grpc.ClientConn
}

func NewEventBusClient(cc *grpc.ClientConn) EventBusClient {
	return &eventBusClient{cc}
}

func (c *eventBusClient) JoinEventBus(ctx context.Context, in *RequestJoinEventBus, opts ...grpc.CallOption) (*ResponseJoinEventBus, error) {
	out := new(ResponseJoinEventBus)
	err := grpc.Invoke(ctx, "/dialog.EventBus/JoinEventBus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) KeepAliveEventBus(ctx context.Context, in *RequestKeepAliveEventBus, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.EventBus/KeepAliveEventBus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) PostToEventBus(ctx context.Context, in *RequestPostToEventBus, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.EventBus/PostToEventBus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventBus service

type EventBusServer interface {
	JoinEventBus(context.Context, *RequestJoinEventBus) (*ResponseJoinEventBus, error)
	KeepAliveEventBus(context.Context, *RequestKeepAliveEventBus) (*ResponseVoid, error)
	PostToEventBus(context.Context, *RequestPostToEventBus) (*ResponseVoid, error)
}

func RegisterEventBusServer(s *grpc.Server, srv EventBusServer) {
	s.RegisterService(&_EventBus_serviceDesc, srv)
}

func _EventBus_JoinEventBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinEventBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).JoinEventBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.EventBus/JoinEventBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).JoinEventBus(ctx, req.(*RequestJoinEventBus))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_KeepAliveEventBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKeepAliveEventBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).KeepAliveEventBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.EventBus/KeepAliveEventBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).KeepAliveEventBus(ctx, req.(*RequestKeepAliveEventBus))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_PostToEventBus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestPostToEventBus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).PostToEventBus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.EventBus/PostToEventBus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).PostToEventBus(ctx, req.(*RequestPostToEventBus))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventBus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.EventBus",
	HandlerType: (*EventBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinEventBus",
			Handler:    _EventBus_JoinEventBus_Handler,
		},
		{
			MethodName: "KeepAliveEventBus",
			Handler:    _EventBus_KeepAliveEventBus_Handler,
		},
		{
			MethodName: "PostToEventBus",
			Handler:    _EventBus_PostToEventBus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_bus.proto",
}

func init() { proto.RegisterFile("event_bus.proto", fileDescriptor7) }

var fileDescriptor7 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xd4, 0x55, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xd5, 0x24, 0xfd, 0xf2, 0x73, 0x9b, 0xaf, 0x50, 0xf7, 0x07, 0x37, 0xb4, 0xc8, 0x72, 0x45,
	0x09, 0x41, 0xb2, 0xdb, 0xb2, 0xa8, 0x94, 0x4d, 0x45, 0x28, 0x42, 0x05, 0x21, 0x55, 0x16, 0xb0,
	0xad, 0x1c, 0xcf, 0xc5, 0x8c, 0xe4, 0xcc, 0x18, 0xcf, 0x24, 0x9b, 0x6e, 0x10, 0xcb, 0x6e, 0x79,
	0x10, 0x1e, 0xa2, 0x12, 0x2f, 0xc0, 0x1b, 0x54, 0xac, 0xba, 0xe3, 0x0d, 0x90, 0x63, 0xbb, 0xc4,
	0x76, 0x68, 0x58, 0x21, 0xb1, 0xb2, 0x3d, 0xe7, 0xcc, 0x3d, 0xf7, 0xde, 0x33, 0x73, 0x0d, 0xb7,
	0x70, 0x8c, 0x5c, 0x9d, 0x0e, 0x46, 0xd2, 0x0a, 0x23, 0xa1, 0x84, 0x56, 0xa3, 0xcc, 0x0d, 0x84,
	0xdf, 0xde, 0xf4, 0x85, 0xf0, 0x03, 0xb4, 0xdd, 0x90, 0xd9, 0x2e, 0xe7, 0x42, 0xb9, 0x8a, 0x09,
	0x9e, 0xb2, 0xda, 0x8b, 0x21, 0x62, 0x94, 0x7d, 0x2c, 0x53, 0x7c, 0xc7, 0x38, 0x9b, 0xc6, 0x57,
	0x86, 0x4c, 0x7a, 0x18, 0x04, 0x2e, 0x47, 0x91, 0x85, 0x6e, 0xaf, 0x49, 0xcf, 0x0d, 0xdc, 0x70,
	0x60, 0xa7, 0xcf, 0x64, 0xd9, 0x3c, 0x83, 0x15, 0x07, 0x3f, 0x8c, 0x50, 0xaa, 0x17, 0x82, 0xf1,
	0x67, 0x71, 0x3e, 0xfd, 0x91, 0xd4, 0xb6, 0xa0, 0xc2, 0xa8, 0x4e, 0x0c, 0xd2, 0x69, 0xf6, 0xff,
	0x3f, 0xbf, 0xda, 0x6d, 0x42, 0x7d, 0xcc, 0x24, 0x1b, 0x04, 0xe8, 0x54, 0x18, 0xd5, 0x1e, 0x40,
	0x5d, 0xb1, 0x21, 0x8a, 0x91, 0xd2, 0x2b, 0x06, 0xe9, 0x54, 0x8b, 0x9c, 0x0c, 0xed, 0x6d, 0x5e,
	0x1e, 0x6e, 0xc0, 0x1d, 0x36, 0xb4, 0x68, 0xe0, 0x5b, 0x7e, 0x14, 0x7a, 0xd6, 0xf3, 0x28, 0xf4,
	0x52, 0x45, 0xd3, 0x81, 0x55, 0x07, 0x65, 0x28, 0xb8, 0xc4, 0x9c, 0xfa, 0x5d, 0x68, 0x52, 0x1c,
	0x33, 0x0f, 0x4f, 0xd3, 0x24, 0xaa, 0x4e, 0x23, 0x59, 0x38, 0xa6, 0xbd, 0xad, 0xcb, 0xc3, 0x36,
	0xe8, 0xe5, 0x90, 0x49, 0x1c, 0xf3, 0x23, 0x01, 0x3d, 0x8d, 0xff, 0x12, 0x31, 0x7c, 0x12, 0xb0,
	0x31, 0xfe, 0xe5, 0xb2, 0xbe, 0x10, 0x58, 0x4b, 0xdf, 0x4f, 0x84, 0x54, 0xaf, 0xc5, 0x9f, 0xea,
	0xef, 0x41, 0x8b, 0xa2, 0x54, 0x8c, 0x27, 0x76, 0xeb, 0x15, 0xa3, 0x5a, 0x4e, 0x22, 0x47, 0xd1,
	0x76, 0xa0, 0x3e, 0x44, 0x29, 0x5d, 0x1f, 0xf5, 0xaa, 0x41, 0x3a, 0xad, 0x7e, 0xeb, 0xfc, 0x6a,
	0xb7, 0x01, 0xb5, 0xf7, 0x8c, 0x52, 0xe4, 0x4e, 0x06, 0xce, 0xc9, 0xf8, 0x82, 0xc0, 0xd6, 0x9b,
	0x90, 0xba, 0xea, 0xba, 0x55, 0x47, 0x93, 0x76, 0x3f, 0x15, 0x9c, 0xa3, 0xa7, 0x90, 0xce, 0xcb,
	0x7c, 0x07, 0xea, 0x23, 0x89, 0x51, 0xec, 0x57, 0xdc, 0xb9, 0xff, 0x8a, 0x9c, 0x5a, 0x8c, 0x1e,
	0x53, 0xad, 0x3b, 0xed, 0x6c, 0x75, 0x56, 0x8f, 0xaf, 0x8d, 0xd6, 0x6c, 0x58, 0x88, 0x0f, 0xba,
	0xbe, 0x60, 0x90, 0xce, 0xe2, 0x7e, 0xcb, 0x4a, 0xee, 0x86, 0x75, 0x82, 0x18, 0x15, 0x37, 0x4d,
	0x88, 0xe6, 0x57, 0x02, 0xc6, 0xac, 0x2a, 0x8e, 0x98, 0xf4, 0xfe, 0xa9, 0x42, 0x2e, 0x08, 0xac,
	0xe5, 0x0b, 0x79, 0x95, 0xd8, 0x38, 0x2f, 0xfb, 0x2e, 0x34, 0x25, 0x72, 0x7a, 0x43, 0xfe, 0x8d,
	0x04, 0x3f, 0xa6, 0xda, 0x01, 0xdc, 0x4e, 0xb9, 0x73, 0x0a, 0x59, 0x4a, 0x68, 0x47, 0x59, 0x39,
	0x53, 0x47, 0x6e, 0xe1, 0x86, 0x23, 0x67, 0x1e, 0xc0, 0x7a, 0xc1, 0x0d, 0x26, 0x43, 0x21, 0xe7,
	0x7a, 0xb0, 0xff, 0xa3, 0x02, 0x8d, 0xeb, 0x2b, 0xa3, 0xa0, 0x95, 0x9f, 0x0d, 0x59, 0xfb, 0x66,
	0x8c, 0xad, 0xf6, 0xe6, 0x2f, 0xb0, 0x3c, 0x56, 0xcc, 0x87, 0x9f, 0xbe, 0x7d, 0xff, 0x5c, 0xd9,
	0x36, 0xef, 0xd9, 0xe3, 0x3d, 0x3b, 0xbe, 0x03, 0x76, 0x06, 0xd9, 0xd3, 0xbc, 0x1e, 0xe9, 0x6a,
	0x67, 0xb0, 0x5c, 0x9e, 0x1e, 0x46, 0x41, 0xba, 0xc4, 0x68, 0xaf, 0x16, 0xf5, 0xdf, 0x0a, 0x46,
	0x4d, 0x6b, 0xa2, 0xdb, 0x31, 0xb7, 0xcb, 0xba, 0xa5, 0x10, 0xb1, 0x78, 0x04, 0x4b, 0xc5, 0xb9,
	0x51, 0x50, 0xce, 0xc3, 0xbf, 0x91, 0x7d, 0x34, 0x91, 0xbd, 0x6f, 0x1a, 0x65, 0xd9, 0xfc, 0xfe,
	0x1e, 0xe9, 0xf6, 0x37, 0x2e, 0x0f, 0xd7, 0x61, 0x75, 0x7a, 0x3e, 0x48, 0x8c, 0x62, 0xc3, 0xe5,
	0xa0, 0x36, 0xf9, 0x53, 0x3c, 0xfe, 0x19, 0x00, 0x00, 0xff, 0xff, 0x0a, 0xd8, 0x02, 0x7e, 0xae,
	0x06, 0x00, 0x00,
}
