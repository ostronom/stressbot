// Code generated by protoc-gen-go. DO NOT EDIT.
// source: crypto.proto

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Exchange public keys
type RequestKeyExchange struct {
	ClientKey            *wrappers.BytesValue `protobuf:"bytes,1,opt,name=client_key,json=clientKey,proto3" json:"client_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *RequestKeyExchange) Reset()         { *m = RequestKeyExchange{} }
func (m *RequestKeyExchange) String() string { return proto.CompactTextString(m) }
func (*RequestKeyExchange) ProtoMessage()    {}
func (*RequestKeyExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_760579c7adc31f76, []int{0}
}
func (m *RequestKeyExchange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestKeyExchange.Unmarshal(m, b)
}
func (m *RequestKeyExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestKeyExchange.Marshal(b, m, deterministic)
}
func (dst *RequestKeyExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestKeyExchange.Merge(dst, src)
}
func (m *RequestKeyExchange) XXX_Size() int {
	return xxx_messageInfo_RequestKeyExchange.Size(m)
}
func (m *RequestKeyExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestKeyExchange.DiscardUnknown(m)
}

var xxx_messageInfo_RequestKeyExchange proto.InternalMessageInfo

func (m *RequestKeyExchange) GetClientKey() *wrappers.BytesValue {
	if m != nil {
		return m.ClientKey
	}
	return nil
}

type ResponseKeyExchange struct {
	ServerKey            *wrappers.BytesValue `protobuf:"bytes,1,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ResponseKeyExchange) Reset()         { *m = ResponseKeyExchange{} }
func (m *ResponseKeyExchange) String() string { return proto.CompactTextString(m) }
func (*ResponseKeyExchange) ProtoMessage()    {}
func (*ResponseKeyExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_crypto_760579c7adc31f76, []int{1}
}
func (m *ResponseKeyExchange) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResponseKeyExchange.Unmarshal(m, b)
}
func (m *ResponseKeyExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResponseKeyExchange.Marshal(b, m, deterministic)
}
func (dst *ResponseKeyExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResponseKeyExchange.Merge(dst, src)
}
func (m *ResponseKeyExchange) XXX_Size() int {
	return xxx_messageInfo_ResponseKeyExchange.Size(m)
}
func (m *ResponseKeyExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_ResponseKeyExchange.DiscardUnknown(m)
}

var xxx_messageInfo_ResponseKeyExchange proto.InternalMessageInfo

func (m *ResponseKeyExchange) GetServerKey() *wrappers.BytesValue {
	if m != nil {
		return m.ServerKey
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestKeyExchange)(nil), "dialog.RequestKeyExchange")
	proto.RegisterType((*ResponseKeyExchange)(nil), "dialog.ResponseKeyExchange")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CryptoClient is the client API for Crypto service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CryptoClient interface {
	KeyExchange(ctx context.Context, in *RequestKeyExchange, opts ...grpc.CallOption) (*ResponseKeyExchange, error)
}

type cryptoClient struct {
	cc *grpc.ClientConn
}

func NewCryptoClient(cc *grpc.ClientConn) CryptoClient {
	return &cryptoClient{cc}
}

func (c *cryptoClient) KeyExchange(ctx context.Context, in *RequestKeyExchange, opts ...grpc.CallOption) (*ResponseKeyExchange, error) {
	out := new(ResponseKeyExchange)
	err := c.cc.Invoke(ctx, "/dialog.Crypto/KeyExchange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CryptoServer is the server API for Crypto service.
type CryptoServer interface {
	KeyExchange(context.Context, *RequestKeyExchange) (*ResponseKeyExchange, error)
}

func RegisterCryptoServer(s *grpc.Server, srv CryptoServer) {
	s.RegisterService(&_Crypto_serviceDesc, srv)
}

func _Crypto_KeyExchange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKeyExchange)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptoServer).KeyExchange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Crypto/KeyExchange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptoServer).KeyExchange(ctx, req.(*RequestKeyExchange))
	}
	return interceptor(ctx, in, info, handler)
}

var _Crypto_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Crypto",
	HandlerType: (*CryptoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "KeyExchange",
			Handler:    _Crypto_KeyExchange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "crypto.proto",
}

func init() { proto.RegisterFile("crypto.proto", fileDescriptor_crypto_760579c7adc31f76) }

var fileDescriptor_crypto_760579c7adc31f76 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0xbf, 0x4e, 0x42, 0x31,
	0x18, 0xc5, 0x83, 0x03, 0x86, 0x0f, 0x1d, 0xbc, 0xfe, 0x83, 0x0b, 0x1a, 0x72, 0x07, 0x63, 0x1c,
	0x5a, 0xc5, 0x8d, 0x85, 0x04, 0x63, 0x8c, 0x61, 0xbb, 0x83, 0xab, 0x29, 0xe5, 0xe3, 0xda, 0x58,
	0xda, 0xda, 0x16, 0xe4, 0x0e, 0x2e, 0x8e, 0xae, 0x3e, 0x9a, 0x6f, 0x40, 0x9c, 0x7c, 0x0a, 0x03,
	0x85, 0x78, 0x13, 0x16, 0xa7, 0x26, 0xe7, 0x9c, 0xe6, 0x77, 0xbe, 0x03, 0x3b, 0xdc, 0xe6, 0xc6,
	0x6b, 0x62, 0xac, 0xf6, 0x3a, 0x2a, 0x0f, 0x05, 0x93, 0x3a, 0x8b, 0x4f, 0x33, 0xad, 0x33, 0x89,
	0x74, 0xa9, 0x0e, 0x26, 0x23, 0xfa, 0x6a, 0x99, 0x31, 0x68, 0x5d, 0xc8, 0xc5, 0xcd, 0x95, 0xcf,
	0x8c, 0xa0, 0x4c, 0x29, 0xed, 0x99, 0x17, 0x5a, 0xad, 0xdd, 0xbd, 0x21, 0x8e, 0x84, 0x12, 0x45,
	0xe9, 0xd0, 0x71, 0x26, 0x99, 0x19, 0xd0, 0xd5, 0x1b, 0xe4, 0xe4, 0x0d, 0xa2, 0x14, 0x5f, 0x26,
	0xe8, 0x7c, 0x1f, 0xf3, 0xdb, 0x19, 0x7f, 0x62, 0x2a, 0xc3, 0xe8, 0x1e, 0x80, 0x4b, 0x81, 0xca,
	0x3f, 0x3e, 0x63, 0x5e, 0x2b, 0xb5, 0x4a, 0xe7, 0xd5, 0x76, 0x83, 0x04, 0x24, 0x59, 0x57, 0x22,
	0xbd, 0xdc, 0xa3, 0x7b, 0x60, 0x72, 0x82, 0xbd, 0xdd, 0x8f, 0x9f, 0xcb, 0x0a, 0x6c, 0x73, 0x3d,
	0x36, 0x8c, 0xfb, 0xb4, 0x12, 0x7e, 0xf7, 0x31, 0xef, 0x34, 0xe7, 0xdd, 0x3a, 0x1c, 0x8b, 0x31,
	0x19, 0xca, 0x8c, 0x64, 0xd6, 0x70, 0x72, 0x67, 0x0d, 0x5f, 0x31, 0x13, 0x03, 0xfb, 0x29, 0x3a,
	0xa3, 0x95, 0xc3, 0x22, 0xbf, 0x03, 0xe0, 0xd0, 0x4e, 0xd1, 0xfe, 0x93, 0x9f, 0x56, 0x42, 0x7c,
	0x01, 0x3c, 0x99, 0x77, 0x63, 0xa8, 0x6d, 0x02, 0x03, 0xa5, 0x3d, 0x83, 0xf2, 0xcd, 0x72, 0xf0,
	0x48, 0x41, 0xb5, 0xc8, 0x8c, 0x49, 0x98, 0x9e, 0x6c, 0xee, 0x11, 0x37, 0xfe, 0xbc, 0x8d, 0xb2,
	0xc9, 0xd9, 0xfb, 0xd7, 0xf7, 0xe7, 0x56, 0x2b, 0x69, 0xd0, 0xe9, 0x15, 0x5d, 0x00, 0x69, 0x00,
	0xd0, 0x42, 0xa8, 0x53, 0xba, 0xe8, 0xd5, 0xe7, 0xdd, 0x23, 0x38, 0x28, 0x16, 0x5b, 0x94, 0x16,
	0x1c, 0xdd, 0xa0, 0xbc, 0xbc, 0xe9, 0xfa, 0x37, 0x00, 0x00, 0xff, 0xff, 0x5b, 0x07, 0xc5, 0xa7,
	0x0c, 0x02, 0x00, 0x00,
}
