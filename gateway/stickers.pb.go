// Code generated by protoc-gen-go.
// source: stickers.proto
// DO NOT EDIT!

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Descriptor of a Sticker
type StickerDescriptor struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// / Emoji code for sticker
	Emoji *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=emoji" json:"emoji,omitempty"`
	// / Image of sticker 128x128 in WebP format
	Image_128 *ImageLocation `protobuf:"bytes,3,opt,name=image_128,json=image128" json:"image_128,omitempty"`
	// / Image of sticker 512x512 in WebP format
	Image_512 *ImageLocation `protobuf:"bytes,4,opt,name=image_512,json=image512" json:"image_512,omitempty"`
	// / Image of sticker 256x256 in WebP format
	Image_256 *ImageLocation `protobuf:"bytes,5,opt,name=image_256,json=image256" json:"image_256,omitempty"`
}

func (m *StickerDescriptor) Reset()                    { *m = StickerDescriptor{} }
func (m *StickerDescriptor) String() string            { return proto.CompactTextString(m) }
func (*StickerDescriptor) ProtoMessage()               {}
func (*StickerDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{0} }

func (m *StickerDescriptor) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerDescriptor) GetEmoji() *google_protobuf.StringValue {
	if m != nil {
		return m.Emoji
	}
	return nil
}

func (m *StickerDescriptor) GetImage_128() *ImageLocation {
	if m != nil {
		return m.Image_128
	}
	return nil
}

func (m *StickerDescriptor) GetImage_512() *ImageLocation {
	if m != nil {
		return m.Image_512
	}
	return nil
}

func (m *StickerDescriptor) GetImage_256() *ImageLocation {
	if m != nil {
		return m.Image_256
	}
	return nil
}

// Sticker collection
type StickerCollection struct {
	// / Unique id of a collection
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// / Sticker pack title
	Title    *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Stickers []*StickerDescriptor         `protobuf:"bytes,3,rep,name=stickers" json:"stickers,omitempty"`
	// / does this pack belongs to current user
	OwnedByMe *google_protobuf.BoolValue `protobuf:"bytes,4,opt,name=owned_by_me,json=ownedByMe" json:"owned_by_me,omitempty"`
}

func (m *StickerCollection) Reset()                    { *m = StickerCollection{} }
func (m *StickerCollection) String() string            { return proto.CompactTextString(m) }
func (*StickerCollection) ProtoMessage()               {}
func (*StickerCollection) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{1} }

func (m *StickerCollection) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *StickerCollection) GetTitle() *google_protobuf.StringValue {
	if m != nil {
		return m.Title
	}
	return nil
}

func (m *StickerCollection) GetStickers() []*StickerDescriptor {
	if m != nil {
		return m.Stickers
	}
	return nil
}

func (m *StickerCollection) GetOwnedByMe() *google_protobuf.BoolValue {
	if m != nil {
		return m.OwnedByMe
	}
	return nil
}

// Stickers response
type ResponseStickersResponse struct {
	Collections []*StickerCollection `protobuf:"bytes,1,rep,name=collections" json:"collections,omitempty"`
	Seq         int32                `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	State       []byte               `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ResponseStickersResponse) Reset()                    { *m = ResponseStickersResponse{} }
func (m *ResponseStickersResponse) String() string            { return proto.CompactTextString(m) }
func (*ResponseStickersResponse) ProtoMessage()               {}
func (*ResponseStickersResponse) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{2} }

func (m *ResponseStickersResponse) GetCollections() []*StickerCollection {
	if m != nil {
		return m.Collections
	}
	return nil
}

func (m *ResponseStickersResponse) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseStickersResponse) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// Loading own stickers
type RequestLoadOwnStickers struct {
}

func (m *RequestLoadOwnStickers) Reset()                    { *m = RequestLoadOwnStickers{} }
func (m *RequestLoadOwnStickers) String() string            { return proto.CompactTextString(m) }
func (*RequestLoadOwnStickers) ProtoMessage()               {}
func (*RequestLoadOwnStickers) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{3} }

type ResponseLoadOwnStickers struct {
	OwnStickers []*StickerCollection `protobuf:"bytes,1,rep,name=own_stickers,json=ownStickers" json:"own_stickers,omitempty"`
}

func (m *ResponseLoadOwnStickers) Reset()                    { *m = ResponseLoadOwnStickers{} }
func (m *ResponseLoadOwnStickers) String() string            { return proto.CompactTextString(m) }
func (*ResponseLoadOwnStickers) ProtoMessage()               {}
func (*ResponseLoadOwnStickers) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{4} }

func (m *ResponseLoadOwnStickers) GetOwnStickers() []*StickerCollection {
	if m != nil {
		return m.OwnStickers
	}
	return nil
}

// Load accessible stickers
type RequestLoadAcesssibleStickers struct {
}

func (m *RequestLoadAcesssibleStickers) Reset()                    { *m = RequestLoadAcesssibleStickers{} }
func (m *RequestLoadAcesssibleStickers) String() string            { return proto.CompactTextString(m) }
func (*RequestLoadAcesssibleStickers) ProtoMessage()               {}
func (*RequestLoadAcesssibleStickers) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{5} }

type ResponseLoadAcesssibleStickers struct {
	AccessibleStickers []*StickerCollection `protobuf:"bytes,1,rep,name=accessible_stickers,json=accessibleStickers" json:"accessible_stickers,omitempty"`
}

func (m *ResponseLoadAcesssibleStickers) Reset()                    { *m = ResponseLoadAcesssibleStickers{} }
func (m *ResponseLoadAcesssibleStickers) String() string            { return proto.CompactTextString(m) }
func (*ResponseLoadAcesssibleStickers) ProtoMessage()               {}
func (*ResponseLoadAcesssibleStickers) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{6} }

func (m *ResponseLoadAcesssibleStickers) GetAccessibleStickers() []*StickerCollection {
	if m != nil {
		return m.AccessibleStickers
	}
	return nil
}

// Add a reference to other user's sticker pack
type RequestAddStickerPackReference struct {
	SourceStickerPack int32 `protobuf:"varint,1,opt,name=source_sticker_pack,json=sourceStickerPack" json:"source_sticker_pack,omitempty"`
}

func (m *RequestAddStickerPackReference) Reset()                    { *m = RequestAddStickerPackReference{} }
func (m *RequestAddStickerPackReference) String() string            { return proto.CompactTextString(m) }
func (*RequestAddStickerPackReference) ProtoMessage()               {}
func (*RequestAddStickerPackReference) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{7} }

func (m *RequestAddStickerPackReference) GetSourceStickerPack() int32 {
	if m != nil {
		return m.SourceStickerPack
	}
	return 0
}

// Remove a reference to an other user's sticker pack
type RequestRemoveStickerPackReference struct {
	SourceStickerPack int32 `protobuf:"varint,1,opt,name=source_sticker_pack,json=sourceStickerPack" json:"source_sticker_pack,omitempty"`
}

func (m *RequestRemoveStickerPackReference) Reset()         { *m = RequestRemoveStickerPackReference{} }
func (m *RequestRemoveStickerPackReference) String() string { return proto.CompactTextString(m) }
func (*RequestRemoveStickerPackReference) ProtoMessage()    {}
func (*RequestRemoveStickerPackReference) Descriptor() ([]byte, []int) {
	return fileDescriptor23, []int{8}
}

func (m *RequestRemoveStickerPackReference) GetSourceStickerPack() int32 {
	if m != nil {
		return m.SourceStickerPack
	}
	return 0
}

// Sticker collection changed
type UpdateStickerCollectionsChanged struct {
	UpdatedCollections []*StickerCollection `protobuf:"bytes,1,rep,name=updated_collections,json=updatedCollections" json:"updated_collections,omitempty"`
}

func (m *UpdateStickerCollectionsChanged) Reset()         { *m = UpdateStickerCollectionsChanged{} }
func (m *UpdateStickerCollectionsChanged) String() string { return proto.CompactTextString(m) }
func (*UpdateStickerCollectionsChanged) ProtoMessage()    {}
func (*UpdateStickerCollectionsChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor23, []int{9}
}

func (m *UpdateStickerCollectionsChanged) GetUpdatedCollections() []*StickerCollection {
	if m != nil {
		return m.UpdatedCollections
	}
	return nil
}

// Sticker pack removed
type UpdateStickerPackRemoved struct {
	PackId int32 `protobuf:"varint,1,opt,name=pack_id,json=packId" json:"pack_id,omitempty"`
}

func (m *UpdateStickerPackRemoved) Reset()                    { *m = UpdateStickerPackRemoved{} }
func (m *UpdateStickerPackRemoved) String() string            { return proto.CompactTextString(m) }
func (*UpdateStickerPackRemoved) ProtoMessage()               {}
func (*UpdateStickerPackRemoved) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{10} }

func (m *UpdateStickerPackRemoved) GetPackId() int32 {
	if m != nil {
		return m.PackId
	}
	return 0
}

// Sticker pack was added
type UpdateStickerPackAdded struct {
	Pack *StickerCollection `protobuf:"bytes,1,opt,name=pack" json:"pack,omitempty"`
}

func (m *UpdateStickerPackAdded) Reset()                    { *m = UpdateStickerPackAdded{} }
func (m *UpdateStickerPackAdded) String() string            { return proto.CompactTextString(m) }
func (*UpdateStickerPackAdded) ProtoMessage()               {}
func (*UpdateStickerPackAdded) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{11} }

func (m *UpdateStickerPackAdded) GetPack() *StickerCollection {
	if m != nil {
		return m.Pack
	}
	return nil
}

// Adding sticker collection
type RequestAddStickerCollection struct {
	Title string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
}

func (m *RequestAddStickerCollection) Reset()                    { *m = RequestAddStickerCollection{} }
func (m *RequestAddStickerCollection) String() string            { return proto.CompactTextString(m) }
func (*RequestAddStickerCollection) ProtoMessage()               {}
func (*RequestAddStickerCollection) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{12} }

func (m *RequestAddStickerCollection) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// Removing sticker collection
type RequestRemoveStickerCollection struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestRemoveStickerCollection) Reset()         { *m = RequestRemoveStickerCollection{} }
func (m *RequestRemoveStickerCollection) String() string { return proto.CompactTextString(m) }
func (*RequestRemoveStickerCollection) ProtoMessage()    {}
func (*RequestRemoveStickerCollection) Descriptor() ([]byte, []int) {
	return fileDescriptor23, []int{13}
}

func (m *RequestRemoveStickerCollection) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// Loading stickers
type RequestLoadStickerCollection struct {
	Id int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *RequestLoadStickerCollection) Reset()                    { *m = RequestLoadStickerCollection{} }
func (m *RequestLoadStickerCollection) String() string            { return proto.CompactTextString(m) }
func (*RequestLoadStickerCollection) ProtoMessage()               {}
func (*RequestLoadStickerCollection) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{14} }

func (m *RequestLoadStickerCollection) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ResponseLoadStickerCollection struct {
	Collection *StickerCollection `protobuf:"bytes,1,opt,name=collection" json:"collection,omitempty"`
}

func (m *ResponseLoadStickerCollection) Reset()                    { *m = ResponseLoadStickerCollection{} }
func (m *ResponseLoadStickerCollection) String() string            { return proto.CompactTextString(m) }
func (*ResponseLoadStickerCollection) ProtoMessage()               {}
func (*ResponseLoadStickerCollection) Descriptor() ([]byte, []int) { return fileDescriptor23, []int{15} }

func (m *ResponseLoadStickerCollection) GetCollection() *StickerCollection {
	if m != nil {
		return m.Collection
	}
	return nil
}

func init() {
	proto.RegisterType((*StickerDescriptor)(nil), "dialog.StickerDescriptor")
	proto.RegisterType((*StickerCollection)(nil), "dialog.StickerCollection")
	proto.RegisterType((*ResponseStickersResponse)(nil), "dialog.ResponseStickersResponse")
	proto.RegisterType((*RequestLoadOwnStickers)(nil), "dialog.RequestLoadOwnStickers")
	proto.RegisterType((*ResponseLoadOwnStickers)(nil), "dialog.ResponseLoadOwnStickers")
	proto.RegisterType((*RequestLoadAcesssibleStickers)(nil), "dialog.RequestLoadAcesssibleStickers")
	proto.RegisterType((*ResponseLoadAcesssibleStickers)(nil), "dialog.ResponseLoadAcesssibleStickers")
	proto.RegisterType((*RequestAddStickerPackReference)(nil), "dialog.RequestAddStickerPackReference")
	proto.RegisterType((*RequestRemoveStickerPackReference)(nil), "dialog.RequestRemoveStickerPackReference")
	proto.RegisterType((*UpdateStickerCollectionsChanged)(nil), "dialog.UpdateStickerCollectionsChanged")
	proto.RegisterType((*UpdateStickerPackRemoved)(nil), "dialog.UpdateStickerPackRemoved")
	proto.RegisterType((*UpdateStickerPackAdded)(nil), "dialog.UpdateStickerPackAdded")
	proto.RegisterType((*RequestAddStickerCollection)(nil), "dialog.RequestAddStickerCollection")
	proto.RegisterType((*RequestRemoveStickerCollection)(nil), "dialog.RequestRemoveStickerCollection")
	proto.RegisterType((*RequestLoadStickerCollection)(nil), "dialog.RequestLoadStickerCollection")
	proto.RegisterType((*ResponseLoadStickerCollection)(nil), "dialog.ResponseLoadStickerCollection")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Stickers service

type StickersClient interface {
	LoadOwnStickers(ctx context.Context, in *RequestLoadOwnStickers, opts ...grpc.CallOption) (*ResponseLoadOwnStickers, error)
	LoadAcesssibleStickers(ctx context.Context, in *RequestLoadAcesssibleStickers, opts ...grpc.CallOption) (*ResponseLoadAcesssibleStickers, error)
	AddStickerPackReference(ctx context.Context, in *RequestAddStickerPackReference, opts ...grpc.CallOption) (*ResponseSeq, error)
	RemoveStickerPackReference(ctx context.Context, in *RequestRemoveStickerPackReference, opts ...grpc.CallOption) (*ResponseSeq, error)
	AddStickerCollection(ctx context.Context, in *RequestAddStickerCollection, opts ...grpc.CallOption) (*ResponseSeq, error)
	RemoveStickerCollection(ctx context.Context, in *RequestRemoveStickerCollection, opts ...grpc.CallOption) (*ResponseSeq, error)
	LoadStickerCollection(ctx context.Context, in *RequestLoadStickerCollection, opts ...grpc.CallOption) (*ResponseLoadStickerCollection, error)
}

type stickersClient struct {
	cc *grpc.ClientConn
}

func NewStickersClient(cc *grpc.ClientConn) StickersClient {
	return &stickersClient{cc}
}

func (c *stickersClient) LoadOwnStickers(ctx context.Context, in *RequestLoadOwnStickers, opts ...grpc.CallOption) (*ResponseLoadOwnStickers, error) {
	out := new(ResponseLoadOwnStickers)
	err := grpc.Invoke(ctx, "/dialog.Stickers/LoadOwnStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) LoadAcesssibleStickers(ctx context.Context, in *RequestLoadAcesssibleStickers, opts ...grpc.CallOption) (*ResponseLoadAcesssibleStickers, error) {
	out := new(ResponseLoadAcesssibleStickers)
	err := grpc.Invoke(ctx, "/dialog.Stickers/LoadAcesssibleStickers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) AddStickerPackReference(ctx context.Context, in *RequestAddStickerPackReference, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Stickers/AddStickerPackReference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) RemoveStickerPackReference(ctx context.Context, in *RequestRemoveStickerPackReference, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Stickers/RemoveStickerPackReference", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) AddStickerCollection(ctx context.Context, in *RequestAddStickerCollection, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Stickers/AddStickerCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) RemoveStickerCollection(ctx context.Context, in *RequestRemoveStickerCollection, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Stickers/RemoveStickerCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stickersClient) LoadStickerCollection(ctx context.Context, in *RequestLoadStickerCollection, opts ...grpc.CallOption) (*ResponseLoadStickerCollection, error) {
	out := new(ResponseLoadStickerCollection)
	err := grpc.Invoke(ctx, "/dialog.Stickers/LoadStickerCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Stickers service

type StickersServer interface {
	LoadOwnStickers(context.Context, *RequestLoadOwnStickers) (*ResponseLoadOwnStickers, error)
	LoadAcesssibleStickers(context.Context, *RequestLoadAcesssibleStickers) (*ResponseLoadAcesssibleStickers, error)
	AddStickerPackReference(context.Context, *RequestAddStickerPackReference) (*ResponseSeq, error)
	RemoveStickerPackReference(context.Context, *RequestRemoveStickerPackReference) (*ResponseSeq, error)
	AddStickerCollection(context.Context, *RequestAddStickerCollection) (*ResponseSeq, error)
	RemoveStickerCollection(context.Context, *RequestRemoveStickerCollection) (*ResponseSeq, error)
	LoadStickerCollection(context.Context, *RequestLoadStickerCollection) (*ResponseLoadStickerCollection, error)
}

func RegisterStickersServer(s *grpc.Server, srv StickersServer) {
	s.RegisterService(&_Stickers_serviceDesc, srv)
}

func _Stickers_LoadOwnStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadOwnStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).LoadOwnStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/LoadOwnStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).LoadOwnStickers(ctx, req.(*RequestLoadOwnStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_LoadAcesssibleStickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadAcesssibleStickers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).LoadAcesssibleStickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/LoadAcesssibleStickers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).LoadAcesssibleStickers(ctx, req.(*RequestLoadAcesssibleStickers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_AddStickerPackReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddStickerPackReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).AddStickerPackReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/AddStickerPackReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).AddStickerPackReference(ctx, req.(*RequestAddStickerPackReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_RemoveStickerPackReference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveStickerPackReference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).RemoveStickerPackReference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/RemoveStickerPackReference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).RemoveStickerPackReference(ctx, req.(*RequestRemoveStickerPackReference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_AddStickerCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestAddStickerCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).AddStickerCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/AddStickerCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).AddStickerCollection(ctx, req.(*RequestAddStickerCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_RemoveStickerCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveStickerCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).RemoveStickerCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/RemoveStickerCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).RemoveStickerCollection(ctx, req.(*RequestRemoveStickerCollection))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stickers_LoadStickerCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadStickerCollection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StickersServer).LoadStickerCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Stickers/LoadStickerCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StickersServer).LoadStickerCollection(ctx, req.(*RequestLoadStickerCollection))
	}
	return interceptor(ctx, in, info, handler)
}

var _Stickers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Stickers",
	HandlerType: (*StickersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadOwnStickers",
			Handler:    _Stickers_LoadOwnStickers_Handler,
		},
		{
			MethodName: "LoadAcesssibleStickers",
			Handler:    _Stickers_LoadAcesssibleStickers_Handler,
		},
		{
			MethodName: "AddStickerPackReference",
			Handler:    _Stickers_AddStickerPackReference_Handler,
		},
		{
			MethodName: "RemoveStickerPackReference",
			Handler:    _Stickers_RemoveStickerPackReference_Handler,
		},
		{
			MethodName: "AddStickerCollection",
			Handler:    _Stickers_AddStickerCollection_Handler,
		},
		{
			MethodName: "RemoveStickerCollection",
			Handler:    _Stickers_RemoveStickerCollection_Handler,
		},
		{
			MethodName: "LoadStickerCollection",
			Handler:    _Stickers_LoadStickerCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stickers.proto",
}

func init() { proto.RegisterFile("stickers.proto", fileDescriptor23) }

var fileDescriptor23 = []byte{
	// 971 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x96, 0xdf, 0x6e, 0x1b, 0x45,
	0x14, 0xc6, 0xb5, 0x4e, 0x93, 0x26, 0x27, 0x05, 0x94, 0x71, 0x93, 0x6c, 0x4c, 0xfe, 0x75, 0x4b,
	0x4d, 0x5a, 0xc2, 0x1a, 0x6f, 0x49, 0x28, 0x55, 0xab, 0xc8, 0x6e, 0x25, 0x94, 0xaa, 0x08, 0xe4,
	0x88, 0x4a, 0x08, 0x21, 0x33, 0xde, 0x39, 0x31, 0x43, 0xd6, 0x3b, 0x9b, 0x9d, 0xb5, 0xa3, 0x48,
	0x20, 0x55, 0x54, 0xe2, 0x02, 0xb8, 0x43, 0x48, 0x5c, 0xf0, 0x2c, 0xbc, 0x00, 0x97, 0xbc, 0x41,
	0xc4, 0x15, 0x4f, 0x81, 0x76, 0xec, 0xf5, 0x6e, 0xf7, 0x4f, 0x9c, 0x00, 0xe2, 0xca, 0xf6, 0xcc,
	0x39, 0xdf, 0xfc, 0xe6, 0x9b, 0x99, 0x4f, 0x86, 0x57, 0x65, 0xc0, 0xed, 0x23, 0xf4, 0xa5, 0xe9,
	0xf9, 0x22, 0x10, 0x64, 0x86, 0x71, 0xea, 0x88, 0x6e, 0x65, 0xbd, 0x2b, 0x44, 0xd7, 0xc1, 0x9a,
	0x1a, 0xed, 0xf4, 0x0f, 0x6b, 0x27, 0x3e, 0xf5, 0xbc, 0x71, 0x5d, 0x65, 0x75, 0x34, 0x4f, 0x3d,
	0x5e, 0xa3, 0xae, 0x2b, 0x02, 0x1a, 0x70, 0xe1, 0x46, 0xb3, 0x0b, 0x0c, 0x0f, 0xb9, 0xcb, 0x93,
	0x43, 0xe5, 0x1e, 0x97, 0x36, 0x3a, 0x0e, 0x75, 0x51, 0xf4, 0xa3, 0xc1, 0xc5, 0x1e, 0x32, 0x4e,
	0xdb, 0xd4, 0x65, 0xed, 0x43, 0xee, 0xe0, 0x78, 0x58, 0xda, 0xd4, 0xa1, 0x5e, 0xa7, 0x36, 0xfa,
	0x1c, 0x0e, 0x1b, 0xbf, 0x95, 0x60, 0xe1, 0x60, 0x88, 0xfb, 0x18, 0xa5, 0xed, 0x73, 0x2f, 0x10,
	0x3e, 0x59, 0x83, 0x12, 0x67, 0xba, 0xb6, 0xa9, 0x6d, 0x4d, 0x37, 0x5f, 0xf9, 0xfe, 0xaf, 0x77,
	0xe6, 0xe0, 0xea, 0x80, 0x4b, 0xde, 0x71, 0xb0, 0x55, 0xe2, 0x8c, 0x34, 0x60, 0x1a, 0x7b, 0xe2,
	0x2b, 0xae, 0x97, 0x36, 0xb5, 0xad, 0x79, 0x6b, 0xd5, 0x1c, 0x82, 0x9b, 0xd1, 0xc6, 0xcc, 0x83,
	0xc0, 0xe7, 0x6e, 0xf7, 0x19, 0x75, 0xfa, 0x98, 0xee, 0x1f, 0x76, 0x92, 0x06, 0xcc, 0xf1, 0x1e,
	0xed, 0x62, 0xbb, 0x6e, 0xdd, 0xd3, 0xa7, 0x94, 0xcc, 0xa2, 0x39, 0xf4, 0xc9, 0xdc, 0x0f, 0x27,
	0x9e, 0x0a, 0x5b, 0x6d, 0x3f, 0xdd, 0x3f, 0xab, 0xda, 0xea, 0xd6, 0xbd, 0x58, 0x62, 0xa7, 0x6e,
	0xe9, 0x57, 0x2e, 0x2d, 0xb1, 0x53, 0xb7, 0x62, 0x09, 0x6b, 0x67, 0x57, 0x9f, 0xbe, 0xb4, 0x84,
	0xb5, 0xb3, 0x6b, 0x7c, 0x17, 0x1b, 0xf8, 0x48, 0x38, 0x0e, 0xda, 0x61, 0xf9, 0x05, 0x0c, 0x0c,
	0x78, 0xe0, 0xe0, 0x3f, 0x32, 0x50, 0x75, 0x92, 0xc7, 0x30, 0x1b, 0x5d, 0x33, 0x7d, 0x6a, 0x73,
	0x6a, 0x6b, 0xde, 0x5a, 0x89, 0xc8, 0x33, 0xe7, 0x99, 0xa1, 0x8f, 0x3a, 0xc9, 0x3e, 0xcc, 0x8b,
	0x13, 0x17, 0x59, 0xbb, 0x73, 0xda, 0xee, 0xe1, 0xc8, 0xc5, 0x4a, 0x06, 0xa7, 0x29, 0x84, 0x93,
	0x0b, 0x33, 0xa7, 0xba, 0x9b, 0xa7, 0x1f, 0xa2, 0xf1, 0xbb, 0x06, 0x7a, 0x0b, 0xa5, 0x27, 0x5c,
	0x89, 0x23, 0x02, 0x19, 0xfd, 0x26, 0x4f, 0x60, 0xde, 0x1e, 0xbb, 0x23, 0x75, 0x2d, 0x17, 0x38,
	0xf6, 0x2f, 0xbd, 0x4c, 0xb2, 0x99, 0x6c, 0xc0, 0x94, 0xc4, 0x63, 0x65, 0x5d, 0xc6, 0xdc, 0x70,
	0x86, 0xdc, 0x84, 0x69, 0x19, 0xd0, 0x00, 0xd5, 0xbd, 0xba, 0x96, 0xf1, 0x4f, 0xcd, 0xdd, 0x5f,
	0x3b, 0xdb, 0xab, 0x80, 0xce, 0x7b, 0x26, 0x73, 0xba, 0x66, 0xd7, 0xf7, 0x6c, 0xf3, 0x03, 0xdf,
	0xb3, 0x23, 0x60, 0x63, 0x17, 0x96, 0x5a, 0x78, 0xdc, 0x47, 0x19, 0x3c, 0x15, 0x94, 0x7d, 0x74,
	0xe2, 0x46, 0x5b, 0xba, 0xbf, 0x7a, 0xb6, 0xb7, 0x02, 0xcb, 0xd9, 0x46, 0x55, 0x6c, 0x0c, 0x60,
	0x39, 0xd2, 0x48, 0x35, 0x92, 0x07, 0x70, 0x4d, 0x9c, 0xb8, 0xed, 0xf1, 0xa9, 0x4d, 0x32, 0xa1,
	0x15, 0x1e, 0xcd, 0x78, 0xd9, 0x09, 0xbc, 0x0f, 0x61, 0x2d, 0xc1, 0xdb, 0xb0, 0x51, 0x4a, 0xb5,
	0xdd, 0x0b, 0x62, 0xff, 0xa0, 0xc1, 0x7a, 0x92, 0x3b, 0x2b, 0x40, 0x9e, 0x40, 0x99, 0xda, 0xe1,
	0x70, 0x38, 0x7a, 0x89, 0x5d, 0x90, 0xb8, 0xeb, 0xa2, 0x9b, 0xf9, 0x26, 0x84, 0x51, 0x60, 0x0d,
	0xc6, 0x46, 0x4d, 0x1f, 0x53, 0xfb, 0xa8, 0x85, 0x87, 0xe8, 0xa3, 0x6b, 0x23, 0x79, 0x08, 0x65,
	0x29, 0xfa, 0xbe, 0x3d, 0x06, 0x69, 0x7b, 0xd4, 0x3e, 0xca, 0x7f, 0x70, 0x0b, 0xc3, 0xca, 0x84,
	0xce, 0x04, 0x33, 0x9e, 0x6b, 0x70, 0x63, 0xf4, 0xbd, 0x85, 0x3d, 0x31, 0xc0, 0xff, 0x1f, 0xe1,
	0x6b, 0xd8, 0xf8, 0xc4, 0x63, 0x34, 0xc0, 0x8c, 0x9f, 0xf2, 0xd1, 0x97, 0xd4, 0xed, 0x22, 0x23,
	0x9f, 0x42, 0xb9, 0xaf, 0x4a, 0x58, 0xfb, 0xdf, 0x3c, 0x2d, 0x32, 0x12, 0x49, 0xac, 0x60, 0x34,
	0x41, 0x7f, 0x69, 0xf5, 0xe1, 0xc6, 0x43, 0x27, 0x18, 0xa9, 0xc2, 0xd5, 0x70, 0x9f, 0xed, 0xa2,
	0x78, 0x9b, 0x09, 0x67, 0xf7, 0x99, 0xf1, 0x0c, 0x96, 0x32, 0x1a, 0x0d, 0xc6, 0x90, 0x91, 0x07,
	0x70, 0x65, 0xec, 0xd4, 0x65, 0x48, 0x55, 0x97, 0xf1, 0x05, 0xbc, 0x9e, 0xb9, 0x1b, 0x89, 0xe0,
	0xbd, 0x19, 0x25, 0x6b, 0xa8, 0x3e, 0x97, 0x9f, 0x9d, 0x13, 0xbc, 0xff, 0x7c, 0x7c, 0xfb, 0x5e,
	0x3a, 0xfd, 0x0b, 0xa7, 0xfb, 0x04, 0xf9, 0xcf, 0x60, 0x35, 0xf1, 0x52, 0xff, 0x63, 0xf1, 0xd3,
	0x30, 0x06, 0xe2, 0x67, 0x9c, 0x55, 0x7f, 0x1f, 0x20, 0xbe, 0x2d, 0x13, 0x8f, 0xa0, 0x95, 0x28,
	0x9e, 0xf0, 0x68, 0xad, 0x17, 0xb3, 0x30, 0x3b, 0x0e, 0x8b, 0xe7, 0x1a, 0xbc, 0x96, 0xce, 0xbf,
	0xf5, 0x68, 0x99, 0xfc, 0x60, 0xad, 0x6c, 0xc4, 0xf3, 0xb9, 0x01, 0x6a, 0x6c, 0x7f, 0xfb, 0xc7,
	0x9f, 0x3f, 0x95, 0xaa, 0xc6, 0x8d, 0xda, 0xa0, 0x5e, 0x0b, 0x01, 0x6a, 0xd1, 0x54, 0x2d, 0x1d,
	0xd2, 0xda, 0x1d, 0xf2, 0xab, 0x06, 0x4b, 0x05, 0x51, 0x76, 0x2b, 0x87, 0x24, 0x5b, 0x56, 0xa9,
	0xe6, 0x01, 0x65, 0xeb, 0x8c, 0xbb, 0x8a, 0xeb, 0x6d, 0x63, 0x2b, 0x9f, 0x2b, 0x27, 0x8c, 0xb5,
	0x3b, 0xe4, 0x47, 0x0d, 0x96, 0x8b, 0xd2, 0xad, 0x9a, 0xe2, 0x2b, 0xa8, 0xab, 0x94, 0xd3, 0x80,
	0x07, 0x78, 0x6c, 0xbc, 0xab, 0x68, 0x4c, 0xe3, 0x76, 0x96, 0xa6, 0x40, 0x27, 0xc4, 0xf9, 0x59,
	0x83, 0xca, 0x39, 0x61, 0x77, 0x3b, 0x45, 0x54, 0x5c, 0x9a, 0x0f, 0xf5, 0x9e, 0x82, 0xaa, 0x1b,
	0xdb, 0x59, 0xa8, 0x62, 0xa9, 0x90, 0xeb, 0x85, 0x06, 0xd7, 0xf3, 0x1f, 0x7a, 0xa1, 0x47, 0x71,
	0x51, 0x3e, 0x4b, 0x5d, 0xb1, 0xbc, 0x65, 0x54, 0xcf, 0x33, 0x28, 0x16, 0x89, 0x0e, 0xab, 0x28,
	0x0c, 0xaa, 0xe7, 0x59, 0x33, 0x89, 0xe5, 0x9c, 0xc3, 0x2a, 0xd0, 0x09, 0x71, 0x7e, 0xd1, 0x60,
	0x31, 0xff, 0x79, 0xbf, 0x91, 0x73, 0xb3, 0xb3, 0x28, 0xb7, 0xf2, 0x2e, 0x76, 0xa6, 0xcc, 0xb0,
	0x14, 0xdc, 0xb6, 0xf1, 0x66, 0xfe, 0xbd, 0xce, 0x43, 0x6b, 0xae, 0x9c, 0xed, 0x2d, 0xc1, 0xf5,
	0x64, 0x48, 0x48, 0xf4, 0x07, 0xdc, 0x46, 0xd9, 0x99, 0x51, 0x7f, 0x27, 0xef, 0xfe, 0x1d, 0x00,
	0x00, 0xff, 0xff, 0xd1, 0xf9, 0xed, 0xa2, 0x1f, 0x0d, 0x00, 0x00,
}
