// Code generated by protoc-gen-go.
// source: registration.proto
// DO NOT EDIT!

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestRegisterDevice struct {
	ClientPk    []byte `protobuf:"bytes,1,opt,name=client_pk,json=clientPk,proto3" json:"client_pk,omitempty"`
	AppId       int32  `protobuf:"varint,2,opt,name=app_id,json=appId" json:"app_id,omitempty"`
	AppTitle    string `protobuf:"bytes,3,opt,name=app_title,json=appTitle" json:"app_title,omitempty"`
	DeviceTitle string `protobuf:"bytes,4,opt,name=device_title,json=deviceTitle" json:"device_title,omitempty"`
}

func (m *RequestRegisterDevice) Reset()                    { *m = RequestRegisterDevice{} }
func (m *RequestRegisterDevice) String() string            { return proto.CompactTextString(m) }
func (*RequestRegisterDevice) ProtoMessage()               {}
func (*RequestRegisterDevice) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{0} }

func (m *RequestRegisterDevice) GetClientPk() []byte {
	if m != nil {
		return m.ClientPk
	}
	return nil
}

func (m *RequestRegisterDevice) GetAppId() int32 {
	if m != nil {
		return m.AppId
	}
	return 0
}

func (m *RequestRegisterDevice) GetAppTitle() string {
	if m != nil {
		return m.AppTitle
	}
	return ""
}

func (m *RequestRegisterDevice) GetDeviceTitle() string {
	if m != nil {
		return m.DeviceTitle
	}
	return ""
}

type ResponseDeviceRequest struct {
	ServerPk []byte `protobuf:"bytes,1,opt,name=server_pk,json=serverPk,proto3" json:"server_pk,omitempty"`
	AuthId   int64  `protobuf:"varint,2,opt,name=auth_id,json=authId" json:"auth_id,omitempty"`
	Token    string `protobuf:"bytes,3,opt,name=token" json:"token,omitempty"`
}

func (m *ResponseDeviceRequest) Reset()                    { *m = ResponseDeviceRequest{} }
func (m *ResponseDeviceRequest) String() string            { return proto.CompactTextString(m) }
func (*ResponseDeviceRequest) ProtoMessage()               {}
func (*ResponseDeviceRequest) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{1} }

func (m *ResponseDeviceRequest) GetServerPk() []byte {
	if m != nil {
		return m.ServerPk
	}
	return nil
}

func (m *ResponseDeviceRequest) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *ResponseDeviceRequest) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type RegisterDeprecatedDeviceRequest struct {
}

func (m *RegisterDeprecatedDeviceRequest) Reset()         { *m = RegisterDeprecatedDeviceRequest{} }
func (m *RegisterDeprecatedDeviceRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterDeprecatedDeviceRequest) ProtoMessage()    {}
func (*RegisterDeprecatedDeviceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor19, []int{2}
}

type RequestExchangeAuthIdForToken struct {
	AuthId    int64  `protobuf:"varint,1,opt,name=auth_id,json=authId" json:"auth_id,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *RequestExchangeAuthIdForToken) Reset()                    { *m = RequestExchangeAuthIdForToken{} }
func (m *RequestExchangeAuthIdForToken) String() string            { return proto.CompactTextString(m) }
func (*RequestExchangeAuthIdForToken) ProtoMessage()               {}
func (*RequestExchangeAuthIdForToken) Descriptor() ([]byte, []int) { return fileDescriptor19, []int{3} }

func (m *RequestExchangeAuthIdForToken) GetAuthId() int64 {
	if m != nil {
		return m.AuthId
	}
	return 0
}

func (m *RequestExchangeAuthIdForToken) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestRegisterDevice)(nil), "dialog.RequestRegisterDevice")
	proto.RegisterType((*ResponseDeviceRequest)(nil), "dialog.ResponseDeviceRequest")
	proto.RegisterType((*RegisterDeprecatedDeviceRequest)(nil), "dialog.RegisterDeprecatedDeviceRequest")
	proto.RegisterType((*RequestExchangeAuthIdForToken)(nil), "dialog.RequestExchangeAuthIdForToken")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registration service

type RegistrationClient interface {
	ExchangeAuthIdForToken(ctx context.Context, in *RequestExchangeAuthIdForToken, opts ...grpc.CallOption) (*ResponseDeviceRequest, error)
	// / register device to get auth token
	RegisterDevice(ctx context.Context, in *RequestRegisterDevice, opts ...grpc.CallOption) (*ResponseDeviceRequest, error)
	// deprecated
	RegisterDeprecatedDevice(ctx context.Context, in *RegisterDeprecatedDeviceRequest, opts ...grpc.CallOption) (*ResponseDeviceRequest, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) ExchangeAuthIdForToken(ctx context.Context, in *RequestExchangeAuthIdForToken, opts ...grpc.CallOption) (*ResponseDeviceRequest, error) {
	out := new(ResponseDeviceRequest)
	err := grpc.Invoke(ctx, "/dialog.Registration/ExchangeAuthIdForToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RegisterDevice(ctx context.Context, in *RequestRegisterDevice, opts ...grpc.CallOption) (*ResponseDeviceRequest, error) {
	out := new(ResponseDeviceRequest)
	err := grpc.Invoke(ctx, "/dialog.Registration/RegisterDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) RegisterDeprecatedDevice(ctx context.Context, in *RegisterDeprecatedDeviceRequest, opts ...grpc.CallOption) (*ResponseDeviceRequest, error) {
	out := new(ResponseDeviceRequest)
	err := grpc.Invoke(ctx, "/dialog.Registration/RegisterDeprecatedDevice", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registration service

type RegistrationServer interface {
	ExchangeAuthIdForToken(context.Context, *RequestExchangeAuthIdForToken) (*ResponseDeviceRequest, error)
	// / register device to get auth token
	RegisterDevice(context.Context, *RequestRegisterDevice) (*ResponseDeviceRequest, error)
	// deprecated
	RegisterDeprecatedDevice(context.Context, *RegisterDeprecatedDeviceRequest) (*ResponseDeviceRequest, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_ExchangeAuthIdForToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestExchangeAuthIdForToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ExchangeAuthIdForToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Registration/ExchangeAuthIdForToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ExchangeAuthIdForToken(ctx, req.(*RequestExchangeAuthIdForToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Registration/RegisterDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterDevice(ctx, req.(*RequestRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_RegisterDeprecatedDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeprecatedDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).RegisterDeprecatedDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Registration/RegisterDeprecatedDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).RegisterDeprecatedDevice(ctx, req.(*RegisterDeprecatedDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeAuthIdForToken",
			Handler:    _Registration_ExchangeAuthIdForToken_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _Registration_RegisterDevice_Handler,
		},
		{
			MethodName: "RegisterDeprecatedDevice",
			Handler:    _Registration_RegisterDeprecatedDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration.proto",
}

func init() { proto.RegisterFile("registration.proto", fileDescriptor19) }

var fileDescriptor19 = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x93, 0xcf, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xe5, 0x86, 0x84, 0x66, 0x88, 0x38, 0x58, 0x4d, 0x9b, 0x86, 0x44, 0xa4, 0x2b, 0x10,
	0xa1, 0x42, 0xbb, 0x2a, 0x3d, 0x20, 0x72, 0x89, 0x40, 0xfc, 0x51, 0x6f, 0xd5, 0xaa, 0xe2, 0x5a,
	0xb9, 0xbb, 0xa3, 0xad, 0x95, 0x65, 0x6d, 0x6c, 0x27, 0xe2, 0x86, 0xd4, 0x57, 0xe0, 0xc0, 0x89,
	0x07, 0xe0, 0x51, 0x38, 0xf3, 0x06, 0x11, 0x0f, 0x82, 0x6c, 0x2f, 0xca, 0x6e, 0x9b, 0x36, 0xa7,
	0xdd, 0x99, 0xcf, 0x9e, 0xef, 0xa7, 0x99, 0x31, 0x50, 0x85, 0x19, 0xd7, 0x46, 0x31, 0xc3, 0x45,
	0x11, 0x4a, 0x25, 0x8c, 0xa0, 0xad, 0x94, 0xb3, 0x5c, 0x64, 0xfd, 0xae, 0x4e, 0x58, 0xce, 0xe4,
	0x45, 0x54, 0x7e, 0xbd, 0xdc, 0x1f, 0x64, 0x42, 0x64, 0x39, 0x46, 0x4c, 0xf2, 0x88, 0x15, 0x85,
	0x30, 0xee, 0xae, 0xf6, 0x6a, 0xf0, 0x8b, 0x40, 0x37, 0xc6, 0x2f, 0x73, 0xd4, 0x26, 0x76, 0xa5,
	0x51, 0xbd, 0xc3, 0x05, 0x4f, 0x90, 0x3e, 0x82, 0x76, 0x92, 0x73, 0x2c, 0xcc, 0xb9, 0x9c, 0xf5,
	0xc8, 0x88, 0x8c, 0x3b, 0xf1, 0xb6, 0x4f, 0x9c, 0xce, 0x68, 0x17, 0x5a, 0x4c, 0xca, 0x73, 0x9e,
	0xf6, 0xb6, 0x46, 0x64, 0xdc, 0x8c, 0x9b, 0x4c, 0xca, 0x93, 0xd4, 0xde, 0xb1, 0x69, 0xc3, 0x4d,
	0x8e, 0xbd, 0xc6, 0x88, 0x8c, 0xdb, 0xf1, 0x36, 0x93, 0xf2, 0xcc, 0xc6, 0xf4, 0x00, 0x3a, 0xa9,
	0x2b, 0x5d, 0xea, 0xf7, 0x9c, 0xfe, 0xc0, 0xe7, 0xdc, 0x91, 0xc9, 0x60, 0x39, 0xdd, 0x87, 0x3d,
	0xfe, 0x39, 0x4c, 0xf3, 0x2c, 0xcc, 0x94, 0x4c, 0xc2, 0x8f, 0x4a, 0x26, 0x25, 0x5f, 0x70, 0xe5,
	0x58, 0xb5, 0x14, 0x85, 0x46, 0x0f, 0x59, 0x2a, 0xd6, 0x57, 0xa3, 0x5a, 0xa0, 0xaa, 0xb0, 0xfa,
	0xc4, 0xe9, 0x8c, 0xee, 0xc1, 0x7d, 0x36, 0x37, 0x97, 0xff, 0x61, 0x1b, 0x71, 0xcb, 0x86, 0x27,
	0x29, 0xdd, 0x81, 0xa6, 0x11, 0x33, 0x2c, 0x4a, 0x52, 0x1f, 0x4c, 0x86, 0xcb, 0x69, 0x1f, 0x7a,
	0x37, 0x19, 0xbc, 0x6f, 0x70, 0x00, 0x8f, 0x57, 0x8d, 0x92, 0x0a, 0x13, 0x66, 0x30, 0xad, 0xd1,
	0x04, 0x9f, 0x60, 0x58, 0xfe, 0xbe, 0xff, 0x9a, 0x5c, 0xb2, 0x22, 0xc3, 0x37, 0xce, 0xf0, 0x83,
	0x50, 0x67, 0xd6, 0xa2, 0x4a, 0x44, 0x6a, 0x44, 0x03, 0x68, 0x6b, 0x9e, 0x15, 0xcc, 0xcc, 0x15,
	0x3a, 0xd8, 0x4e, 0xbc, 0x4a, 0xbc, 0xfc, 0xdd, 0x80, 0x4e, 0x5c, 0x99, 0x3f, 0xfd, 0x41, 0x60,
	0xf7, 0x16, 0x8b, 0xa7, 0xa1, 0xdf, 0x8a, 0xf0, 0x4e, 0x92, 0xfe, 0x70, 0x75, 0x6c, 0x4d, 0x5f,
	0x83, 0x57, 0x57, 0x7f, 0xfe, 0x7e, 0xdf, 0x3a, 0x0a, 0x5e, 0x44, 0x8b, 0xa3, 0xc8, 0xf6, 0x22,
	0xaa, 0xfa, 0x47, 0xeb, 0x8b, 0x4e, 0xc8, 0x21, 0xfd, 0x06, 0x0f, 0xaf, 0xad, 0xd3, 0xf0, 0x1a,
	0x50, 0x5d, 0xde, 0x04, 0x12, 0x39, 0x90, 0xe7, 0xc1, 0x93, 0xf5, 0x20, 0xf5, 0x62, 0x16, 0xe0,
	0x27, 0x81, 0xde, 0x6d, 0x73, 0xa2, 0xcf, 0x56, 0x66, 0x77, 0x4e, 0x72, 0x13, 0xd5, 0x6b, 0x47,
	0x75, 0x1c, 0x84, 0x9b, 0xa8, 0xea, 0xd5, 0x27, 0xe4, 0xf0, 0xed, 0xfe, 0x72, 0xba, 0x0b, 0x3b,
	0xd5, 0x2d, 0xb3, 0xfb, 0xca, 0x13, 0xd4, 0x17, 0x2d, 0xf7, 0x32, 0x8f, 0xff, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xe4, 0x75, 0x87, 0x7a, 0xec, 0x03, 0x00, 0x00,
}
