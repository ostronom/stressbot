// Code generated by protoc-gen-go.
// source: raw_api.proto
// DO NOT EDIT!

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RequestRawRequest struct {
	Service *google_protobuf.StringValue `protobuf:"bytes,1,opt,name=service" json:"service,omitempty"`
	Body    *google_protobuf.BytesValue  `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
}

func (m *RequestRawRequest) Reset()                    { *m = RequestRawRequest{} }
func (m *RequestRawRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestRawRequest) ProtoMessage()               {}
func (*RequestRawRequest) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{0} }

func (m *RequestRawRequest) GetService() *google_protobuf.StringValue {
	if m != nil {
		return m.Service
	}
	return nil
}

func (m *RequestRawRequest) GetBody() *google_protobuf.BytesValue {
	if m != nil {
		return m.Body
	}
	return nil
}

type ResponseRawRequest struct {
	Body *google_protobuf.BytesValue `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *ResponseRawRequest) Reset()                    { *m = ResponseRawRequest{} }
func (m *ResponseRawRequest) String() string            { return proto.CompactTextString(m) }
func (*ResponseRawRequest) ProtoMessage()               {}
func (*ResponseRawRequest) Descriptor() ([]byte, []int) { return fileDescriptor18, []int{1} }

func (m *ResponseRawRequest) GetBody() *google_protobuf.BytesValue {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestRawRequest)(nil), "dialog.RequestRawRequest")
	proto.RegisterType((*ResponseRawRequest)(nil), "dialog.ResponseRawRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RawAPI service

type RawAPIClient interface {
	RawRequest(ctx context.Context, in *RequestRawRequest, opts ...grpc.CallOption) (*ResponseRawRequest, error)
}

type rawAPIClient struct {
	cc *grpc.ClientConn
}

func NewRawAPIClient(cc *grpc.ClientConn) RawAPIClient {
	return &rawAPIClient{cc}
}

func (c *rawAPIClient) RawRequest(ctx context.Context, in *RequestRawRequest, opts ...grpc.CallOption) (*ResponseRawRequest, error) {
	out := new(ResponseRawRequest)
	err := grpc.Invoke(ctx, "/dialog.RawAPI/RawRequest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RawAPI service

type RawAPIServer interface {
	RawRequest(context.Context, *RequestRawRequest) (*ResponseRawRequest, error)
}

func RegisterRawAPIServer(s *grpc.Server, srv RawAPIServer) {
	s.RegisterService(&_RawAPI_serviceDesc, srv)
}

func _RawAPI_RawRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RawAPIServer).RawRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.RawAPI/RawRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RawAPIServer).RawRequest(ctx, req.(*RequestRawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RawAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.RawAPI",
	HandlerType: (*RawAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RawRequest",
			Handler:    _RawAPI_RawRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raw_api.proto",
}

func init() { proto.RegisterFile("raw_api.proto", fileDescriptor18) }

var fileDescriptor18 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0xcd, 0x4a, 0x3b, 0x31,
	0x14, 0xc5, 0x99, 0xf2, 0x67, 0xfa, 0x37, 0xda, 0x45, 0x07, 0x3f, 0xda, 0xb1, 0x7e, 0x30, 0x20,
	0x88, 0x8b, 0xa4, 0xd6, 0x5d, 0x41, 0x8a, 0x05, 0x11, 0x77, 0x32, 0x82, 0x5b, 0xc9, 0x4c, 0xd2,
	0x31, 0x32, 0x26, 0x31, 0x49, 0x3b, 0x74, 0xeb, 0xb2, 0x5b, 0x1f, 0xc6, 0x07, 0xf1, 0x0d, 0x8a,
	0xab, 0x3e, 0x85, 0x38, 0x49, 0xe9, 0x60, 0x17, 0xae, 0x12, 0xee, 0xb9, 0xf7, 0xfc, 0x4e, 0x6e,
	0x40, 0x43, 0xe1, 0xe2, 0x11, 0x4b, 0x06, 0xa5, 0x12, 0x46, 0x04, 0x3e, 0x61, 0x38, 0x17, 0x59,
	0x78, 0x98, 0x09, 0x91, 0xe5, 0x14, 0x95, 0xd5, 0x64, 0x3c, 0x42, 0x85, 0xc2, 0x52, 0x52, 0xa5,
	0x6d, 0x5f, 0xd8, 0x71, 0x3a, 0x96, 0x0c, 0x61, 0xce, 0x85, 0xc1, 0x86, 0x09, 0xbe, 0x54, 0x9b,
	0x84, 0x8e, 0x18, 0x67, 0xd5, 0xd2, 0x8e, 0x4e, 0x71, 0x8e, 0x65, 0x82, 0xdc, 0x69, 0xcb, 0xd1,
	0x87, 0x07, 0x9a, 0x31, 0x7d, 0x1d, 0x53, 0x6d, 0x62, 0x5c, 0xb8, 0x5b, 0x70, 0x0d, 0xea, 0x9a,
	0xaa, 0x09, 0x4b, 0x69, 0xcb, 0x3b, 0xf6, 0x4e, 0x37, 0x7b, 0x1d, 0x68, 0x79, 0x70, 0x99, 0x07,
	0xde, 0x1b, 0xc5, 0x78, 0xf6, 0x80, 0xf3, 0x31, 0x1d, 0x36, 0x66, 0x8b, 0xee, 0x06, 0xa8, 0x4f,
	0x98, 0x66, 0x49, 0x4e, 0xe3, 0xe5, 0x6c, 0x70, 0x09, 0xfe, 0x25, 0x82, 0x4c, 0x5b, 0xb5, 0xd2,
	0x63, 0x7f, 0xcd, 0x63, 0x38, 0x35, 0x54, 0x5b, 0x8b, 0xad, 0xd9, 0xa2, 0xfb, 0x1f, 0xf8, 0x4f,
	0x8c, 0x10, 0xca, 0xe3, 0x72, 0xac, 0xdf, 0x99, 0x0f, 0xda, 0x60, 0x8f, 0xbd, 0x40, 0x92, 0x67,
	0x30, 0x53, 0x32, 0x85, 0x37, 0x4a, 0xa6, 0x2e, 0x63, 0x44, 0x40, 0x10, 0x53, 0x2d, 0x05, 0xd7,
	0xb4, 0x92, 0x1c, 0x39, 0xa4, 0xf7, 0x27, 0xd2, 0x41, 0x0e, 0xe6, 0x83, 0x10, 0xb4, 0xd6, 0x21,
	0xd6, 0xb9, 0x67, 0x80, 0x1f, 0xe3, 0xe2, 0xea, 0xee, 0x36, 0x78, 0x06, 0xa0, 0xc2, 0x69, 0x43,
	0xfb, 0x51, 0x70, 0x6d, 0x79, 0x61, 0xb8, 0x92, 0x7e, 0xc7, 0x8b, 0x4e, 0xde, 0x3e, 0xbf, 0xde,
	0x6b, 0x47, 0x51, 0x88, 0x26, 0xe7, 0xe8, 0x87, 0x86, 0xac, 0x3b, 0x5a, 0xf5, 0xf4, 0xbd, 0xb3,
	0x61, 0x7b, 0x3e, 0xd8, 0x05, 0xdb, 0xd5, 0x50, 0x6e, 0xa5, 0x3a, 0xf1, 0xcb, 0xa7, 0x5c, 0x7c,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x2e, 0x78, 0xa0, 0x6e, 0x38, 0x02, 0x00, 0x00,
}
