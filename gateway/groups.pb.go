// Code generated by protoc-gen-go.
// source: groups.proto
// DO NOT EDIT!

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/gogo/protobuf/types"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type GroupType int32

const (
	GroupType_GROUPTYPE_UNKNOWN GroupType = 0
	GroupType_GROUPTYPE_GROUP   GroupType = 1
	GroupType_GROUPTYPE_CHANNEL GroupType = 2
)

var GroupType_name = map[int32]string{
	0: "GROUPTYPE_UNKNOWN",
	1: "GROUPTYPE_GROUP",
	2: "GROUPTYPE_CHANNEL",
}
var GroupType_value = map[string]int32{
	"GROUPTYPE_UNKNOWN": 0,
	"GROUPTYPE_GROUP":   1,
	"GROUPTYPE_CHANNEL": 2,
}

func (x GroupType) String() string {
	return proto.EnumName(GroupType_name, int32(x))
}
func (GroupType) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

// / Possible permissions on a group
type GroupAdminPermission int32

const (
	GroupAdminPermission_GROUPADMINPERMISSION_UNKNOWN             GroupAdminPermission = 0
	GroupAdminPermission_GROUPADMINPERMISSION_EDITSHORTNAME       GroupAdminPermission = 1
	GroupAdminPermission_GROUPADMINPERMISSION_INVITE              GroupAdminPermission = 2
	GroupAdminPermission_GROUPADMINPERMISSION_KICK                GroupAdminPermission = 3
	GroupAdminPermission_GROUPADMINPERMISSION_UPDATEINFO          GroupAdminPermission = 4
	GroupAdminPermission_GROUPADMINPERMISSION_SETPERMISSIONS      GroupAdminPermission = 5
	GroupAdminPermission_GROUPADMINPERMISSION_EDITMESSAGE         GroupAdminPermission = 6
	GroupAdminPermission_GROUPADMINPERMISSION_DELETEMESSAGE       GroupAdminPermission = 7
	GroupAdminPermission_GROUPADMINPERMISSION_GETINTEGRATIONTOKEN GroupAdminPermission = 8
	GroupAdminPermission_GROUPADMINPERMISSION_SENDMESSAGE         GroupAdminPermission = 9
	GroupAdminPermission_GROUPADMINPERMISSION_PINMESSAGE          GroupAdminPermission = 10
)

var GroupAdminPermission_name = map[int32]string{
	0:  "GROUPADMINPERMISSION_UNKNOWN",
	1:  "GROUPADMINPERMISSION_EDITSHORTNAME",
	2:  "GROUPADMINPERMISSION_INVITE",
	3:  "GROUPADMINPERMISSION_KICK",
	4:  "GROUPADMINPERMISSION_UPDATEINFO",
	5:  "GROUPADMINPERMISSION_SETPERMISSIONS",
	6:  "GROUPADMINPERMISSION_EDITMESSAGE",
	7:  "GROUPADMINPERMISSION_DELETEMESSAGE",
	8:  "GROUPADMINPERMISSION_GETINTEGRATIONTOKEN",
	9:  "GROUPADMINPERMISSION_SENDMESSAGE",
	10: "GROUPADMINPERMISSION_PINMESSAGE",
}
var GroupAdminPermission_value = map[string]int32{
	"GROUPADMINPERMISSION_UNKNOWN":             0,
	"GROUPADMINPERMISSION_EDITSHORTNAME":       1,
	"GROUPADMINPERMISSION_INVITE":              2,
	"GROUPADMINPERMISSION_KICK":                3,
	"GROUPADMINPERMISSION_UPDATEINFO":          4,
	"GROUPADMINPERMISSION_SETPERMISSIONS":      5,
	"GROUPADMINPERMISSION_EDITMESSAGE":         6,
	"GROUPADMINPERMISSION_DELETEMESSAGE":       7,
	"GROUPADMINPERMISSION_GETINTEGRATIONTOKEN": 8,
	"GROUPADMINPERMISSION_SENDMESSAGE":         9,
	"GROUPADMINPERMISSION_PINMESSAGE":          10,
}

func (x GroupAdminPermission) String() string {
	return proto.EnumName(GroupAdminPermission_name, int32(x))
}
func (GroupAdminPermission) EnumDescriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

// Member information
type Member struct {
	Uid        int32                      `protobuf:"varint,1,opt,name=uid" json:"uid,omitempty"`
	InviterUid int32                      `protobuf:"varint,2,opt,name=inviter_uid,json=inviterUid" json:"inviter_uid,omitempty"`
	Date       int64                      `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
	IsAdmin    *google_protobuf.BoolValue `protobuf:"bytes,4,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	// / List of member permissions
	Permissions []GroupAdminPermission `protobuf:"varint,5,rep,packed,name=permissions,enum=dialog.GroupAdminPermission" json:"permissions,omitempty"`
}

func (m *Member) Reset()                    { *m = Member{} }
func (m *Member) String() string            { return proto.CompactTextString(m) }
func (*Member) ProtoMessage()               {}
func (*Member) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{0} }

func (m *Member) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Member) GetInviterUid() int32 {
	if m != nil {
		return m.InviterUid
	}
	return 0
}

func (m *Member) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *Member) GetIsAdmin() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsAdmin
	}
	return nil
}

func (m *Member) GetPermissions() []GroupAdminPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Group information
type Group struct {
	Id         int32      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	SpaceId    *UUIDValue `protobuf:"bytes,27,opt,name=space_id,json=spaceId" json:"space_id,omitempty"`
	AccessHash int64      `protobuf:"varint,2,opt,name=access_hash,json=accessHash" json:"access_hash,omitempty"`
	Title      string     `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Avatar     *Avatar    `protobuf:"bytes,4,opt,name=avatar" json:"avatar,omitempty"`
	// / Number of members
	MembersAmount *google_protobuf.Int32Value `protobuf:"bytes,24,opt,name=members_amount,json=membersAmount" json:"members_amount,omitempty"`
	// / Is current user a member of a group. Default is true.
	IsMember *google_protobuf.BoolValue `protobuf:"bytes,6,opt,name=is_member,json=isMember" json:"is_member,omitempty"`
	// / Is group hidden (not showing it in recent list). Default is false.
	IsHidden *google_protobuf.BoolValue `protobuf:"bytes,20,opt,name=is_hidden,json=isHidden" json:"is_hidden,omitempty"`
	// / Group Type. Used only for displaying information. Default is GROUP.
	GroupType GroupType `protobuf:"varint,25,opt,name=group_type,json=groupType,enum=dialog.GroupType" json:"group_type,omitempty"`
	// / Can user send messages. Default is equals isMember for Group and false for channels.
	CanSendMessage *google_protobuf.BoolValue `protobuf:"bytes,26,opt,name=can_send_message,json=canSendMessage" json:"can_send_message,omitempty"`
	IsAdmin        *google_protobuf.BoolValue `protobuf:"bytes,16,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
	CreatorUid     int32                      `protobuf:"varint,8,opt,name=creator_uid,json=creatorUid" json:"creator_uid,omitempty"`
	Members        []*Member                  `protobuf:"bytes,9,rep,name=members" json:"members,omitempty"`
	CreateDate     int64                      `protobuf:"varint,10,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	// / Theme of group
	Theme *google_protobuf.StringValue `protobuf:"bytes,17,opt,name=theme" json:"theme,omitempty"`
	// / About of group
	About *google_protobuf.StringValue `protobuf:"bytes,18,opt,name=about" json:"about,omitempty"`
	// / Group short name
	Shortname *google_protobuf.StringValue `protobuf:"bytes,19,opt,name=shortname" json:"shortname,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{1} }

func (m *Group) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Group) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *Group) GetAccessHash() int64 {
	if m != nil {
		return m.AccessHash
	}
	return 0
}

func (m *Group) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Group) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Group) GetMembersAmount() *google_protobuf.Int32Value {
	if m != nil {
		return m.MembersAmount
	}
	return nil
}

func (m *Group) GetIsMember() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsMember
	}
	return nil
}

func (m *Group) GetIsHidden() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsHidden
	}
	return nil
}

func (m *Group) GetGroupType() GroupType {
	if m != nil {
		return m.GroupType
	}
	return GroupType_GROUPTYPE_UNKNOWN
}

func (m *Group) GetCanSendMessage() *google_protobuf.BoolValue {
	if m != nil {
		return m.CanSendMessage
	}
	return nil
}

func (m *Group) GetIsAdmin() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsAdmin
	}
	return nil
}

func (m *Group) GetCreatorUid() int32 {
	if m != nil {
		return m.CreatorUid
	}
	return 0
}

func (m *Group) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Group) GetCreateDate() int64 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

func (m *Group) GetTheme() *google_protobuf.StringValue {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *Group) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *Group) GetShortname() *google_protobuf.StringValue {
	if m != nil {
		return m.Shortname
	}
	return nil
}

// Goup Full information - Deprecated
type GroupFull struct {
	Id         int32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	CreateDate int64 `protobuf:"varint,6,opt,name=create_date,json=createDate" json:"create_date,omitempty"`
	OwnerUid   int32 `protobuf:"varint,5,opt,name=owner_uid,json=ownerUid" json:"owner_uid,omitempty"`
	// / Group members. Can be empty when isAsyncMembers enabled.
	Members []*Member `protobuf:"bytes,12,rep,name=members" json:"members,omitempty"`
	// / Group Theme
	Theme *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=theme" json:"theme,omitempty"`
	// / Group about
	About *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=about" json:"about,omitempty"`
	// / Is Members need to be loaded asynchronous.
	IsAsyncMembers *google_protobuf.BoolValue `protobuf:"bytes,11,opt,name=is_async_members,json=isAsyncMembers" json:"is_async_members,omitempty"`
	// / Can current user view members of the group. Default is true.
	CanViewMembers *google_protobuf.BoolValue `protobuf:"bytes,8,opt,name=can_view_members,json=canViewMembers" json:"can_view_members,omitempty"`
	// / Can current user invite new people. Default is true.
	CanInvitePeople *google_protobuf.BoolValue `protobuf:"bytes,9,opt,name=can_invite_people,json=canInvitePeople" json:"can_invite_people,omitempty"`
	// / Is history shared among all users.
	IsSharedHistory *google_protobuf.BoolValue `protobuf:"bytes,10,opt,name=is_shared_history,json=isSharedHistory" json:"is_shared_history,omitempty"`
}

func (m *GroupFull) Reset()                    { *m = GroupFull{} }
func (m *GroupFull) String() string            { return proto.CompactTextString(m) }
func (*GroupFull) ProtoMessage()               {}
func (*GroupFull) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{2} }

func (m *GroupFull) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupFull) GetCreateDate() int64 {
	if m != nil {
		return m.CreateDate
	}
	return 0
}

func (m *GroupFull) GetOwnerUid() int32 {
	if m != nil {
		return m.OwnerUid
	}
	return 0
}

func (m *GroupFull) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GroupFull) GetTheme() *google_protobuf.StringValue {
	if m != nil {
		return m.Theme
	}
	return nil
}

func (m *GroupFull) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *GroupFull) GetIsAsyncMembers() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsAsyncMembers
	}
	return nil
}

func (m *GroupFull) GetCanViewMembers() *google_protobuf.BoolValue {
	if m != nil {
		return m.CanViewMembers
	}
	return nil
}

func (m *GroupFull) GetCanInvitePeople() *google_protobuf.BoolValue {
	if m != nil {
		return m.CanInvitePeople
	}
	return nil
}

func (m *GroupFull) GetIsSharedHistory() *google_protobuf.BoolValue {
	if m != nil {
		return m.IsSharedHistory
	}
	return nil
}

// Loading Full Groups - Deprecated
type RequestLoadFullGroups struct {
	Groups []*GroupOutPeer `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *RequestLoadFullGroups) Reset()                    { *m = RequestLoadFullGroups{} }
func (m *RequestLoadFullGroups) String() string            { return proto.CompactTextString(m) }
func (*RequestLoadFullGroups) ProtoMessage()               {}
func (*RequestLoadFullGroups) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{3} }

func (m *RequestLoadFullGroups) GetGroups() []*GroupOutPeer {
	if m != nil {
		return m.Groups
	}
	return nil
}

// / Deprecated
type ResponseLoadFullGroups struct {
	Groups []*GroupFull `protobuf:"bytes,1,rep,name=groups" json:"groups,omitempty"`
}

func (m *ResponseLoadFullGroups) Reset()                    { *m = ResponseLoadFullGroups{} }
func (m *ResponseLoadFullGroups) String() string            { return proto.CompactTextString(m) }
func (*ResponseLoadFullGroups) ProtoMessage()               {}
func (*ResponseLoadFullGroups) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{4} }

func (m *ResponseLoadFullGroups) GetGroups() []*GroupFull {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Loading group members
type RequestLoadMembers struct {
	Group *GroupOutPeer               `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Limit int32                       `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
	Next  *google_protobuf.BytesValue `protobuf:"bytes,3,opt,name=next" json:"next,omitempty"`
}

func (m *RequestLoadMembers) Reset()                    { *m = RequestLoadMembers{} }
func (m *RequestLoadMembers) String() string            { return proto.CompactTextString(m) }
func (*RequestLoadMembers) ProtoMessage()               {}
func (*RequestLoadMembers) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{5} }

func (m *RequestLoadMembers) GetGroup() *GroupOutPeer {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *RequestLoadMembers) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *RequestLoadMembers) GetNext() *google_protobuf.BytesValue {
	if m != nil {
		return m.Next
	}
	return nil
}

type ResponseLoadMembers struct {
	Members []*UserOutPeer              `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	Next    *google_protobuf.BytesValue `protobuf:"bytes,2,opt,name=next" json:"next,omitempty"`
}

func (m *ResponseLoadMembers) Reset()                    { *m = ResponseLoadMembers{} }
func (m *ResponseLoadMembers) String() string            { return proto.CompactTextString(m) }
func (*ResponseLoadMembers) ProtoMessage()               {}
func (*ResponseLoadMembers) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{6} }

func (m *ResponseLoadMembers) GetMembers() []*UserOutPeer {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ResponseLoadMembers) GetNext() *google_protobuf.BytesValue {
	if m != nil {
		return m.Next
	}
	return nil
}

// Update about title changed
type UpdateGroupTitleChanged struct {
	GroupId int32  `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
}

func (m *UpdateGroupTitleChanged) Reset()                    { *m = UpdateGroupTitleChanged{} }
func (m *UpdateGroupTitleChanged) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupTitleChanged) ProtoMessage()               {}
func (*UpdateGroupTitleChanged) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{7} }

func (m *UpdateGroupTitleChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupTitleChanged) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

// Update about avatar changed
type UpdateGroupAvatarChanged struct {
	GroupId int32   `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Avatar  *Avatar `protobuf:"bytes,2,opt,name=avatar" json:"avatar,omitempty"`
}

func (m *UpdateGroupAvatarChanged) Reset()                    { *m = UpdateGroupAvatarChanged{} }
func (m *UpdateGroupAvatarChanged) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupAvatarChanged) ProtoMessage()               {}
func (*UpdateGroupAvatarChanged) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{8} }

func (m *UpdateGroupAvatarChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupAvatarChanged) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

// Update about topic changed
type UpdateGroupTopicChanged struct {
	GroupId int32                        `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Topic   *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=topic" json:"topic,omitempty"`
}

func (m *UpdateGroupTopicChanged) Reset()                    { *m = UpdateGroupTopicChanged{} }
func (m *UpdateGroupTopicChanged) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupTopicChanged) ProtoMessage()               {}
func (*UpdateGroupTopicChanged) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{9} }

func (m *UpdateGroupTopicChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupTopicChanged) GetTopic() *google_protobuf.StringValue {
	if m != nil {
		return m.Topic
	}
	return nil
}

// Update about about changed
type UpdateGroupAboutChanged struct {
	GroupId int32                        `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	About   *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=about" json:"about,omitempty"`
}

func (m *UpdateGroupAboutChanged) Reset()                    { *m = UpdateGroupAboutChanged{} }
func (m *UpdateGroupAboutChanged) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupAboutChanged) ProtoMessage()               {}
func (*UpdateGroupAboutChanged) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{10} }

func (m *UpdateGroupAboutChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupAboutChanged) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Update about owner changed
type UpdateGroupOwnerChanged struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	UserId  int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
}

func (m *UpdateGroupOwnerChanged) Reset()                    { *m = UpdateGroupOwnerChanged{} }
func (m *UpdateGroupOwnerChanged) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupOwnerChanged) ProtoMessage()               {}
func (*UpdateGroupOwnerChanged) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{11} }

func (m *UpdateGroupOwnerChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupOwnerChanged) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

// Update about history shared
type UpdateGroupHistoryShared struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *UpdateGroupHistoryShared) Reset()                    { *m = UpdateGroupHistoryShared{} }
func (m *UpdateGroupHistoryShared) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupHistoryShared) ProtoMessage()               {}
func (*UpdateGroupHistoryShared) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{12} }

func (m *UpdateGroupHistoryShared) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

// Update about can send messages changed
type UpdateGroupCanSendMessagesChanged struct {
	GroupId         int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	CanSendMessages bool  `protobuf:"varint,2,opt,name=can_send_messages,json=canSendMessages" json:"can_send_messages,omitempty"`
}

func (m *UpdateGroupCanSendMessagesChanged) Reset()         { *m = UpdateGroupCanSendMessagesChanged{} }
func (m *UpdateGroupCanSendMessagesChanged) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupCanSendMessagesChanged) ProtoMessage()    {}
func (*UpdateGroupCanSendMessagesChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{13}
}

func (m *UpdateGroupCanSendMessagesChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupCanSendMessagesChanged) GetCanSendMessages() bool {
	if m != nil {
		return m.CanSendMessages
	}
	return false
}

// Update about can view members changed
type UpdateGroupCanViewMembersChanged struct {
	GroupId        int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	CanViewMembers bool  `protobuf:"varint,2,opt,name=can_view_members,json=canViewMembers" json:"can_view_members,omitempty"`
}

func (m *UpdateGroupCanViewMembersChanged) Reset()         { *m = UpdateGroupCanViewMembersChanged{} }
func (m *UpdateGroupCanViewMembersChanged) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupCanViewMembersChanged) ProtoMessage()    {}
func (*UpdateGroupCanViewMembersChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{14}
}

func (m *UpdateGroupCanViewMembersChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupCanViewMembersChanged) GetCanViewMembers() bool {
	if m != nil {
		return m.CanViewMembers
	}
	return false
}

// Update about can invite members changed
type UpdateGroupCanInviteMembersChanged struct {
	GroupId          int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	CanInviteMembers bool  `protobuf:"varint,2,opt,name=can_invite_members,json=canInviteMembers" json:"can_invite_members,omitempty"`
}

func (m *UpdateGroupCanInviteMembersChanged) Reset()         { *m = UpdateGroupCanInviteMembersChanged{} }
func (m *UpdateGroupCanInviteMembersChanged) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupCanInviteMembersChanged) ProtoMessage()    {}
func (*UpdateGroupCanInviteMembersChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{15}
}

func (m *UpdateGroupCanInviteMembersChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupCanInviteMembersChanged) GetCanInviteMembers() bool {
	if m != nil {
		return m.CanInviteMembers
	}
	return false
}

// Update about membership changed
type UpdateGroupMemberChanged struct {
	GroupId  int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	IsMember bool  `protobuf:"varint,2,opt,name=is_member,json=isMember" json:"is_member,omitempty"`
}

func (m *UpdateGroupMemberChanged) Reset()                    { *m = UpdateGroupMemberChanged{} }
func (m *UpdateGroupMemberChanged) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupMemberChanged) ProtoMessage()               {}
func (*UpdateGroupMemberChanged) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{16} }

func (m *UpdateGroupMemberChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMemberChanged) GetIsMember() bool {
	if m != nil {
		return m.IsMember
	}
	return false
}

// Update about members became async
type UpdateGroupMembersBecameAsync struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *UpdateGroupMembersBecameAsync) Reset()                    { *m = UpdateGroupMembersBecameAsync{} }
func (m *UpdateGroupMembersBecameAsync) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupMembersBecameAsync) ProtoMessage()               {}
func (*UpdateGroupMembersBecameAsync) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{17} }

func (m *UpdateGroupMembersBecameAsync) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

// Update about members updated
type UpdateGroupMembersUpdated struct {
	GroupId int32     `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Members []*Member `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *UpdateGroupMembersUpdated) Reset()                    { *m = UpdateGroupMembersUpdated{} }
func (m *UpdateGroupMembersUpdated) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupMembersUpdated) ProtoMessage()               {}
func (*UpdateGroupMembersUpdated) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{18} }

func (m *UpdateGroupMembersUpdated) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMembersUpdated) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

// Update about members changed
type UpdateGroupMemberDiff struct {
	RemovedUsers []int32   `protobuf:"varint,1,rep,packed,name=removed_users,json=removedUsers" json:"removed_users,omitempty"`
	AddedMembers []*Member `protobuf:"bytes,2,rep,name=added_members,json=addedMembers" json:"added_members,omitempty"`
	MembersCount int32     `protobuf:"varint,3,opt,name=members_count,json=membersCount" json:"members_count,omitempty"`
}

func (m *UpdateGroupMemberDiff) Reset()                    { *m = UpdateGroupMemberDiff{} }
func (m *UpdateGroupMemberDiff) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupMemberDiff) ProtoMessage()               {}
func (*UpdateGroupMemberDiff) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{19} }

func (m *UpdateGroupMemberDiff) GetRemovedUsers() []int32 {
	if m != nil {
		return m.RemovedUsers
	}
	return nil
}

func (m *UpdateGroupMemberDiff) GetAddedMembers() []*Member {
	if m != nil {
		return m.AddedMembers
	}
	return nil
}

func (m *UpdateGroupMemberDiff) GetMembersCount() int32 {
	if m != nil {
		return m.MembersCount
	}
	return 0
}

// Update about members count changed
type UpdateGroupMembersCountChanged struct {
	GroupId      int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	MembersCount int32 `protobuf:"varint,2,opt,name=members_count,json=membersCount" json:"members_count,omitempty"`
}

func (m *UpdateGroupMembersCountChanged) Reset()                    { *m = UpdateGroupMembersCountChanged{} }
func (m *UpdateGroupMembersCountChanged) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupMembersCountChanged) ProtoMessage()               {}
func (*UpdateGroupMembersCountChanged) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{20} }

func (m *UpdateGroupMembersCountChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMembersCountChanged) GetMembersCount() int32 {
	if m != nil {
		return m.MembersCount
	}
	return 0
}

// Update about member admin changed
type UpdateGroupMemberAdminChanged struct {
	GroupId int32 `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	UserId  int32 `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	IsAdmin bool  `protobuf:"varint,3,opt,name=is_admin,json=isAdmin" json:"is_admin,omitempty"`
}

func (m *UpdateGroupMemberAdminChanged) Reset()                    { *m = UpdateGroupMemberAdminChanged{} }
func (m *UpdateGroupMemberAdminChanged) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupMemberAdminChanged) ProtoMessage()               {}
func (*UpdateGroupMemberAdminChanged) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{21} }

func (m *UpdateGroupMemberAdminChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMemberAdminChanged) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateGroupMemberAdminChanged) GetIsAdmin() bool {
	if m != nil {
		return m.IsAdmin
	}
	return false
}

// Creating group chat
type RequestCreateGroup struct {
	Rid       int64          `protobuf:"varint,1,opt,name=rid" json:"rid,omitempty"`
	SpaceId   *UUIDValue     `protobuf:"bytes,9,opt,name=space_id,json=spaceId" json:"space_id,omitempty"`
	Title     string         `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Users     []*UserOutPeer `protobuf:"bytes,3,rep,name=users" json:"users,omitempty"`
	GroupType GroupType      `protobuf:"varint,6,opt,name=group_type,json=groupType,enum=dialog.GroupType" json:"group_type,omitempty"`
	// / optional shortname of a group, group will be public if set
	Username *google_protobuf.StringValue `protobuf:"bytes,8,opt,name=username" json:"username,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,7,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestCreateGroup) Reset()                    { *m = RequestCreateGroup{} }
func (m *RequestCreateGroup) String() string            { return proto.CompactTextString(m) }
func (*RequestCreateGroup) ProtoMessage()               {}
func (*RequestCreateGroup) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{22} }

func (m *RequestCreateGroup) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestCreateGroup) GetSpaceId() *UUIDValue {
	if m != nil {
		return m.SpaceId
	}
	return nil
}

func (m *RequestCreateGroup) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestCreateGroup) GetUsers() []*UserOutPeer {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *RequestCreateGroup) GetGroupType() GroupType {
	if m != nil {
		return m.GroupType
	}
	return GroupType_GROUPTYPE_UNKNOWN
}

func (m *RequestCreateGroup) GetUsername() *google_protobuf.StringValue {
	if m != nil {
		return m.Username
	}
	return nil
}

func (m *RequestCreateGroup) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseCreateGroup struct {
	Seq       int32          `protobuf:"varint,1,opt,name=seq" json:"seq,omitempty"`
	State     []byte         `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Group     *Group         `protobuf:"bytes,3,opt,name=group" json:"group,omitempty"`
	Users     []*User        `protobuf:"bytes,4,rep,name=users" json:"users,omitempty"`
	UserPeers []*UserOutPeer `protobuf:"bytes,5,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
}

func (m *ResponseCreateGroup) Reset()                    { *m = ResponseCreateGroup{} }
func (m *ResponseCreateGroup) String() string            { return proto.CompactTextString(m) }
func (*ResponseCreateGroup) ProtoMessage()               {}
func (*ResponseCreateGroup) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{23} }

func (m *ResponseCreateGroup) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseCreateGroup) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseCreateGroup) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *ResponseCreateGroup) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseCreateGroup) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

// Changing group title
type RequestEditGroupTitle struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,4,opt,name=rid" json:"rid,omitempty"`
	Title     string        `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestEditGroupTitle) Reset()                    { *m = RequestEditGroupTitle{} }
func (m *RequestEditGroupTitle) String() string            { return proto.CompactTextString(m) }
func (*RequestEditGroupTitle) ProtoMessage()               {}
func (*RequestEditGroupTitle) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{24} }

func (m *RequestEditGroupTitle) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestEditGroupTitle) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestEditGroupTitle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *RequestEditGroupTitle) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Sets group short name
type RequestSetGroupShortname struct {
	Peer *GroupOutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
	// / if shortname was empty, then group will become public
	Shortname string `protobuf:"bytes,2,opt,name=shortname" json:"shortname,omitempty"`
}

func (m *RequestSetGroupShortname) Reset()                    { *m = RequestSetGroupShortname{} }
func (m *RequestSetGroupShortname) String() string            { return proto.CompactTextString(m) }
func (*RequestSetGroupShortname) ProtoMessage()               {}
func (*RequestSetGroupShortname) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{25} }

func (m *RequestSetGroupShortname) GetPeer() *GroupOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

func (m *RequestSetGroupShortname) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

// Changing group avatar
type RequestEditGroupAvatar struct {
	GroupPeer    *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid          int64         `protobuf:"varint,4,opt,name=rid" json:"rid,omitempty"`
	FileLocation *FileLocation `protobuf:"bytes,3,opt,name=file_location,json=fileLocation" json:"file_location,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestEditGroupAvatar) Reset()                    { *m = RequestEditGroupAvatar{} }
func (m *RequestEditGroupAvatar) String() string            { return proto.CompactTextString(m) }
func (*RequestEditGroupAvatar) ProtoMessage()               {}
func (*RequestEditGroupAvatar) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{26} }

func (m *RequestEditGroupAvatar) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestEditGroupAvatar) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestEditGroupAvatar) GetFileLocation() *FileLocation {
	if m != nil {
		return m.FileLocation
	}
	return nil
}

func (m *RequestEditGroupAvatar) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseEditGroupAvatar struct {
	Avatar *Avatar    `protobuf:"bytes,1,opt,name=avatar" json:"avatar,omitempty"`
	Seq    int32      `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	State  []byte     `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Date   int64      `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
	Mid    *UUIDValue `protobuf:"bytes,5,opt,name=mid" json:"mid,omitempty"`
}

func (m *ResponseEditGroupAvatar) Reset()                    { *m = ResponseEditGroupAvatar{} }
func (m *ResponseEditGroupAvatar) String() string            { return proto.CompactTextString(m) }
func (*ResponseEditGroupAvatar) ProtoMessage()               {}
func (*ResponseEditGroupAvatar) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{27} }

func (m *ResponseEditGroupAvatar) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *ResponseEditGroupAvatar) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseEditGroupAvatar) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseEditGroupAvatar) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

func (m *ResponseEditGroupAvatar) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

// Removing group avatar
type RequestRemoveGroupAvatar struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,4,opt,name=rid" json:"rid,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestRemoveGroupAvatar) Reset()                    { *m = RequestRemoveGroupAvatar{} }
func (m *RequestRemoveGroupAvatar) String() string            { return proto.CompactTextString(m) }
func (*RequestRemoveGroupAvatar) ProtoMessage()               {}
func (*RequestRemoveGroupAvatar) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{28} }

func (m *RequestRemoveGroupAvatar) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestRemoveGroupAvatar) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestRemoveGroupAvatar) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Edit group topic
type RequestEditGroupTopic struct {
	GroupPeer *GroupOutPeer                `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64                        `protobuf:"varint,2,opt,name=rid" json:"rid,omitempty"`
	Topic     *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=topic" json:"topic,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,4,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestEditGroupTopic) Reset()                    { *m = RequestEditGroupTopic{} }
func (m *RequestEditGroupTopic) String() string            { return proto.CompactTextString(m) }
func (*RequestEditGroupTopic) ProtoMessage()               {}
func (*RequestEditGroupTopic) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{29} }

func (m *RequestEditGroupTopic) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestEditGroupTopic) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestEditGroupTopic) GetTopic() *google_protobuf.StringValue {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *RequestEditGroupTopic) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Edit Group About
type RequestEditGroupAbout struct {
	GroupPeer *GroupOutPeer                `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64                        `protobuf:"varint,2,opt,name=rid" json:"rid,omitempty"`
	About     *google_protobuf.StringValue `protobuf:"bytes,3,opt,name=about" json:"about,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestEditGroupAbout) Reset()                    { *m = RequestEditGroupAbout{} }
func (m *RequestEditGroupAbout) String() string            { return proto.CompactTextString(m) }
func (*RequestEditGroupAbout) ProtoMessage()               {}
func (*RequestEditGroupAbout) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{30} }

func (m *RequestEditGroupAbout) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestEditGroupAbout) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestEditGroupAbout) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

func (m *RequestEditGroupAbout) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Inviting user to group
type RequestInviteUser struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,4,opt,name=rid" json:"rid,omitempty"`
	User      *UserOutPeer  `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestInviteUser) Reset()                    { *m = RequestInviteUser{} }
func (m *RequestInviteUser) String() string            { return proto.CompactTextString(m) }
func (*RequestInviteUser) ProtoMessage()               {}
func (*RequestInviteUser) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{31} }

func (m *RequestInviteUser) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestInviteUser) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestInviteUser) GetUser() *UserOutPeer {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RequestInviteUser) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Leaving group
type RequestLeaveGroup struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,2,opt,name=rid" json:"rid,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,3,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestLeaveGroup) Reset()                    { *m = RequestLeaveGroup{} }
func (m *RequestLeaveGroup) String() string            { return proto.CompactTextString(m) }
func (*RequestLeaveGroup) ProtoMessage()               {}
func (*RequestLeaveGroup) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{32} }

func (m *RequestLeaveGroup) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestLeaveGroup) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestLeaveGroup) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Kicking user from group
type RequestKickUser struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	Rid       int64         `protobuf:"varint,4,opt,name=rid" json:"rid,omitempty"`
	User      *UserOutPeer  `protobuf:"bytes,3,opt,name=user" json:"user,omitempty"`
	// / Optimizations drops some info from response to decrease traffic and latency
	Optimizations []UpdateOptimization `protobuf:"varint,5,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestKickUser) Reset()                    { *m = RequestKickUser{} }
func (m *RequestKickUser) String() string            { return proto.CompactTextString(m) }
func (*RequestKickUser) ProtoMessage()               {}
func (*RequestKickUser) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{33} }

func (m *RequestKickUser) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestKickUser) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *RequestKickUser) GetUser() *UserOutPeer {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *RequestKickUser) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

// Make user admin
type RequestMakeUserAdmin struct {
	GroupPeer   *GroupOutPeer          `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	UserPeer    *UserOutPeer           `protobuf:"bytes,2,opt,name=user_peer,json=userPeer" json:"user_peer,omitempty"`
	Permissions []GroupAdminPermission `protobuf:"varint,3,rep,packed,name=permissions,enum=dialog.GroupAdminPermission" json:"permissions,omitempty"`
}

func (m *RequestMakeUserAdmin) Reset()                    { *m = RequestMakeUserAdmin{} }
func (m *RequestMakeUserAdmin) String() string            { return proto.CompactTextString(m) }
func (*RequestMakeUserAdmin) ProtoMessage()               {}
func (*RequestMakeUserAdmin) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{34} }

func (m *RequestMakeUserAdmin) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestMakeUserAdmin) GetUserPeer() *UserOutPeer {
	if m != nil {
		return m.UserPeer
	}
	return nil
}

func (m *RequestMakeUserAdmin) GetPermissions() []GroupAdminPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// A struct mapping a group member to their permissions
// userId the id of the group member
// permissions a list of permissions that user has
type GroupMemberPermission struct {
	UserId      int32                  `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Permissions []GroupAdminPermission `protobuf:"varint,2,rep,packed,name=permissions,enum=dialog.GroupAdminPermission" json:"permissions,omitempty"`
}

func (m *GroupMemberPermission) Reset()                    { *m = GroupMemberPermission{} }
func (m *GroupMemberPermission) String() string            { return proto.CompactTextString(m) }
func (*GroupMemberPermission) ProtoMessage()               {}
func (*GroupMemberPermission) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{35} }

func (m *GroupMemberPermission) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMemberPermission) GetPermissions() []GroupAdminPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Fetches the group administration permissions for each of the users from the list
type RequestGetGroupMemberPermissions struct {
	GroupId int32   `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	UserIds []int32 `protobuf:"varint,2,rep,packed,name=user_ids,json=userIds" json:"user_ids,omitempty"`
}

func (m *RequestGetGroupMemberPermissions) Reset()         { *m = RequestGetGroupMemberPermissions{} }
func (m *RequestGetGroupMemberPermissions) String() string { return proto.CompactTextString(m) }
func (*RequestGetGroupMemberPermissions) ProtoMessage()    {}
func (*RequestGetGroupMemberPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{36}
}

func (m *RequestGetGroupMemberPermissions) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *RequestGetGroupMemberPermissions) GetUserIds() []int32 {
	if m != nil {
		return m.UserIds
	}
	return nil
}

type ResponseGetGroupMemberPermissions struct {
	Permissions []*GroupMemberPermission `protobuf:"bytes,1,rep,name=permissions" json:"permissions,omitempty"`
}

func (m *ResponseGetGroupMemberPermissions) Reset()         { *m = ResponseGetGroupMemberPermissions{} }
func (m *ResponseGetGroupMemberPermissions) String() string { return proto.CompactTextString(m) }
func (*ResponseGetGroupMemberPermissions) ProtoMessage()    {}
func (*ResponseGetGroupMemberPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{37}
}

func (m *ResponseGetGroupMemberPermissions) GetPermissions() []*GroupMemberPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Update about the user's permissions
type UpdateGroupMemberPermissionsChanged struct {
	GroupId     int32                  `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	UserId      int32                  `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	Permissions []GroupAdminPermission `protobuf:"varint,3,rep,packed,name=permissions,enum=dialog.GroupAdminPermission" json:"permissions,omitempty"`
}

func (m *UpdateGroupMemberPermissionsChanged) Reset()         { *m = UpdateGroupMemberPermissionsChanged{} }
func (m *UpdateGroupMemberPermissionsChanged) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupMemberPermissionsChanged) ProtoMessage()    {}
func (*UpdateGroupMemberPermissionsChanged) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{38}
}

func (m *UpdateGroupMemberPermissionsChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMemberPermissionsChanged) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *UpdateGroupMemberPermissionsChanged) GetPermissions() []GroupAdminPermission {
	if m != nil {
		return m.Permissions
	}
	return nil
}

// Transfer ownership of group
type RequestTransferOwnership struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	NewOwner  int32         `protobuf:"varint,2,opt,name=new_owner,json=newOwner" json:"new_owner,omitempty"`
}

func (m *RequestTransferOwnership) Reset()                    { *m = RequestTransferOwnership{} }
func (m *RequestTransferOwnership) String() string            { return proto.CompactTextString(m) }
func (*RequestTransferOwnership) ProtoMessage()               {}
func (*RequestTransferOwnership) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{39} }

func (m *RequestTransferOwnership) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestTransferOwnership) GetNewOwner() int32 {
	if m != nil {
		return m.NewOwner
	}
	return 0
}

// Response for invite url methods
type ResponseInviteUrl struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *ResponseInviteUrl) Reset()                    { *m = ResponseInviteUrl{} }
func (m *ResponseInviteUrl) String() string            { return proto.CompactTextString(m) }
func (*ResponseInviteUrl) ProtoMessage()               {}
func (*ResponseInviteUrl) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{40} }

func (m *ResponseInviteUrl) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Building invite url
type RequestGetGroupInviteUrl struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
}

func (m *RequestGetGroupInviteUrl) Reset()                    { *m = RequestGetGroupInviteUrl{} }
func (m *RequestGetGroupInviteUrl) String() string            { return proto.CompactTextString(m) }
func (*RequestGetGroupInviteUrl) ProtoMessage()               {}
func (*RequestGetGroupInviteUrl) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{41} }

func (m *RequestGetGroupInviteUrl) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

// Get group invite url base
type RequestGetGroupInviteUrlBase struct {
}

func (m *RequestGetGroupInviteUrlBase) Reset()                    { *m = RequestGetGroupInviteUrlBase{} }
func (m *RequestGetGroupInviteUrlBase) String() string            { return proto.CompactTextString(m) }
func (*RequestGetGroupInviteUrlBase) ProtoMessage()               {}
func (*RequestGetGroupInviteUrlBase) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{42} }

type ResponseGetGroupInviteUrlBase struct {
	Url string `protobuf:"bytes,1,opt,name=url" json:"url,omitempty"`
}

func (m *ResponseGetGroupInviteUrlBase) Reset()                    { *m = ResponseGetGroupInviteUrlBase{} }
func (m *ResponseGetGroupInviteUrlBase) String() string            { return proto.CompactTextString(m) }
func (*ResponseGetGroupInviteUrlBase) ProtoMessage()               {}
func (*ResponseGetGroupInviteUrlBase) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{43} }

func (m *ResponseGetGroupInviteUrlBase) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

// Revoking invite urls
type RequestRevokeInviteUrl struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
}

func (m *RequestRevokeInviteUrl) Reset()                    { *m = RequestRevokeInviteUrl{} }
func (m *RequestRevokeInviteUrl) String() string            { return proto.CompactTextString(m) }
func (*RequestRevokeInviteUrl) ProtoMessage()               {}
func (*RequestRevokeInviteUrl) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{44} }

func (m *RequestRevokeInviteUrl) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

// Join group method
type RequestJoinGroup struct {
	Token         string               `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	Optimizations []UpdateOptimization `protobuf:"varint,2,rep,packed,name=optimizations,enum=dialog.UpdateOptimization" json:"optimizations,omitempty"`
}

func (m *RequestJoinGroup) Reset()                    { *m = RequestJoinGroup{} }
func (m *RequestJoinGroup) String() string            { return proto.CompactTextString(m) }
func (*RequestJoinGroup) ProtoMessage()               {}
func (*RequestJoinGroup) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{45} }

func (m *RequestJoinGroup) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RequestJoinGroup) GetOptimizations() []UpdateOptimization {
	if m != nil {
		return m.Optimizations
	}
	return nil
}

type ResponseJoinGroup struct {
	Group     *Group         `protobuf:"bytes,1,opt,name=group" json:"group,omitempty"`
	Users     []*User        `protobuf:"bytes,5,rep,name=users" json:"users,omitempty"`
	UserPeers []*UserOutPeer `protobuf:"bytes,7,rep,name=user_peers,json=userPeers" json:"user_peers,omitempty"`
	Mid       *UUIDValue     `protobuf:"bytes,8,opt,name=mid" json:"mid,omitempty"`
	Seq       int32          `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	State     []byte         `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Date      int64          `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
}

func (m *ResponseJoinGroup) Reset()                    { *m = ResponseJoinGroup{} }
func (m *ResponseJoinGroup) String() string            { return proto.CompactTextString(m) }
func (*ResponseJoinGroup) ProtoMessage()               {}
func (*ResponseJoinGroup) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{46} }

func (m *ResponseJoinGroup) GetGroup() *Group {
	if m != nil {
		return m.Group
	}
	return nil
}

func (m *ResponseJoinGroup) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

func (m *ResponseJoinGroup) GetUserPeers() []*UserOutPeer {
	if m != nil {
		return m.UserPeers
	}
	return nil
}

func (m *ResponseJoinGroup) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *ResponseJoinGroup) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseJoinGroup) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

func (m *ResponseJoinGroup) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Join group by peer
type RequestJoinGroupByPeer struct {
	Peer *GroupOutPeer `protobuf:"bytes,1,opt,name=peer" json:"peer,omitempty"`
}

func (m *RequestJoinGroupByPeer) Reset()                    { *m = RequestJoinGroupByPeer{} }
func (m *RequestJoinGroupByPeer) String() string            { return proto.CompactTextString(m) }
func (*RequestJoinGroupByPeer) ProtoMessage()               {}
func (*RequestJoinGroupByPeer) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{47} }

func (m *RequestJoinGroupByPeer) GetPeer() *GroupOutPeer {
	if m != nil {
		return m.Peer
	}
	return nil
}

// [OBSOLETE] Make user admin
type RequestMakeUserAdminObsolete struct {
	GroupPeer *GroupOutPeer `protobuf:"bytes,1,opt,name=group_peer,json=groupPeer" json:"group_peer,omitempty"`
	UserPeer  *UserOutPeer  `protobuf:"bytes,2,opt,name=user_peer,json=userPeer" json:"user_peer,omitempty"`
}

func (m *RequestMakeUserAdminObsolete) Reset()                    { *m = RequestMakeUserAdminObsolete{} }
func (m *RequestMakeUserAdminObsolete) String() string            { return proto.CompactTextString(m) }
func (*RequestMakeUserAdminObsolete) ProtoMessage()               {}
func (*RequestMakeUserAdminObsolete) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{48} }

func (m *RequestMakeUserAdminObsolete) GetGroupPeer() *GroupOutPeer {
	if m != nil {
		return m.GroupPeer
	}
	return nil
}

func (m *RequestMakeUserAdminObsolete) GetUserPeer() *UserOutPeer {
	if m != nil {
		return m.UserPeer
	}
	return nil
}

type ResponseMakeUserAdminObsolete struct {
	Members []*Member `protobuf:"bytes,1,rep,name=members" json:"members,omitempty"`
	Seq     int32     `protobuf:"varint,2,opt,name=seq" json:"seq,omitempty"`
	State   []byte    `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *ResponseMakeUserAdminObsolete) Reset()                    { *m = ResponseMakeUserAdminObsolete{} }
func (m *ResponseMakeUserAdminObsolete) String() string            { return proto.CompactTextString(m) }
func (*ResponseMakeUserAdminObsolete) ProtoMessage()               {}
func (*ResponseMakeUserAdminObsolete) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{49} }

func (m *ResponseMakeUserAdminObsolete) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *ResponseMakeUserAdminObsolete) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *ResponseMakeUserAdminObsolete) GetState() []byte {
	if m != nil {
		return m.State
	}
	return nil
}

// Update about inviting current user to group
type UpdateGroupInviteObsolete struct {
	GroupId   int32      `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Rid       int64      `protobuf:"varint,9,opt,name=rid" json:"rid,omitempty"`
	Mid       *UUIDValue `protobuf:"bytes,10,opt,name=mid" json:"mid,omitempty"`
	InviteUid int32      `protobuf:"varint,5,opt,name=invite_uid,json=inviteUid" json:"invite_uid,omitempty"`
	Date      int64      `protobuf:"varint,8,opt,name=date" json:"date,omitempty"`
}

func (m *UpdateGroupInviteObsolete) Reset()                    { *m = UpdateGroupInviteObsolete{} }
func (m *UpdateGroupInviteObsolete) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupInviteObsolete) ProtoMessage()               {}
func (*UpdateGroupInviteObsolete) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{50} }

func (m *UpdateGroupInviteObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupInviteObsolete) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateGroupInviteObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupInviteObsolete) GetInviteUid() int32 {
	if m != nil {
		return m.InviteUid
	}
	return 0
}

func (m *UpdateGroupInviteObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about inviting user to group
type UpdateGroupUserInvitedObsolete struct {
	GroupId    int32      `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Rid        int64      `protobuf:"varint,5,opt,name=rid" json:"rid,omitempty"`
	Mid        *UUIDValue `protobuf:"bytes,6,opt,name=mid" json:"mid,omitempty"`
	Uid        int32      `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	InviterUid int32      `protobuf:"varint,3,opt,name=inviter_uid,json=inviterUid" json:"inviter_uid,omitempty"`
	Date       int64      `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
}

func (m *UpdateGroupUserInvitedObsolete) Reset()                    { *m = UpdateGroupUserInvitedObsolete{} }
func (m *UpdateGroupUserInvitedObsolete) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupUserInvitedObsolete) ProtoMessage()               {}
func (*UpdateGroupUserInvitedObsolete) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{51} }

func (m *UpdateGroupUserInvitedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupUserInvitedObsolete) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateGroupUserInvitedObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupUserInvitedObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupUserInvitedObsolete) GetInviterUid() int32 {
	if m != nil {
		return m.InviterUid
	}
	return 0
}

func (m *UpdateGroupUserInvitedObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about leaving user
type UpdateGroupUserLeaveObsolete struct {
	GroupId int32      `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Mid     *UUIDValue `protobuf:"bytes,5,opt,name=mid" json:"mid,omitempty"`
	Uid     int32      `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Date    int64      `protobuf:"varint,3,opt,name=date" json:"date,omitempty"`
}

func (m *UpdateGroupUserLeaveObsolete) Reset()                    { *m = UpdateGroupUserLeaveObsolete{} }
func (m *UpdateGroupUserLeaveObsolete) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupUserLeaveObsolete) ProtoMessage()               {}
func (*UpdateGroupUserLeaveObsolete) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{52} }

func (m *UpdateGroupUserLeaveObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupUserLeaveObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupUserLeaveObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupUserLeaveObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about kicking user
type UpdateGroupUserKickObsolete struct {
	GroupId   int32      `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Mid       *UUIDValue `protobuf:"bytes,6,opt,name=mid" json:"mid,omitempty"`
	Uid       int32      `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	KickerUid int32      `protobuf:"varint,3,opt,name=kicker_uid,json=kickerUid" json:"kicker_uid,omitempty"`
	Date      int64      `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
}

func (m *UpdateGroupUserKickObsolete) Reset()                    { *m = UpdateGroupUserKickObsolete{} }
func (m *UpdateGroupUserKickObsolete) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupUserKickObsolete) ProtoMessage()               {}
func (*UpdateGroupUserKickObsolete) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{53} }

func (m *UpdateGroupUserKickObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupUserKickObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupUserKickObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupUserKickObsolete) GetKickerUid() int32 {
	if m != nil {
		return m.KickerUid
	}
	return 0
}

func (m *UpdateGroupUserKickObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Silent group members update
type UpdateGroupMembersUpdateObsolete struct {
	GroupId int32     `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Members []*Member `protobuf:"bytes,2,rep,name=members" json:"members,omitempty"`
}

func (m *UpdateGroupMembersUpdateObsolete) Reset()         { *m = UpdateGroupMembersUpdateObsolete{} }
func (m *UpdateGroupMembersUpdateObsolete) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupMembersUpdateObsolete) ProtoMessage()    {}
func (*UpdateGroupMembersUpdateObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{54}
}

func (m *UpdateGroupMembersUpdateObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupMembersUpdateObsolete) GetMembers() []*Member {
	if m != nil {
		return m.Members
	}
	return nil
}

// Update about group title change
type UpdateGroupTitleChangedObsolete struct {
	GroupId int32      `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Mid     *UUIDValue `protobuf:"bytes,6,opt,name=mid" json:"mid,omitempty"`
	Uid     int32      `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Title   string     `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Date    int64      `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
}

func (m *UpdateGroupTitleChangedObsolete) Reset()         { *m = UpdateGroupTitleChangedObsolete{} }
func (m *UpdateGroupTitleChangedObsolete) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupTitleChangedObsolete) ProtoMessage()    {}
func (*UpdateGroupTitleChangedObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{55}
}

func (m *UpdateGroupTitleChangedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupTitleChangedObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupTitleChangedObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupTitleChangedObsolete) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateGroupTitleChangedObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about group topic change
type UpdateGroupTopicChangedObsolete struct {
	GroupId int32                        `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Rid     int64                        `protobuf:"varint,2,opt,name=rid" json:"rid,omitempty"`
	Uid     int32                        `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
	Topic   *google_protobuf.StringValue `protobuf:"bytes,4,opt,name=topic" json:"topic,omitempty"`
	Date    int64                        `protobuf:"varint,5,opt,name=date" json:"date,omitempty"`
}

func (m *UpdateGroupTopicChangedObsolete) Reset()         { *m = UpdateGroupTopicChangedObsolete{} }
func (m *UpdateGroupTopicChangedObsolete) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupTopicChangedObsolete) ProtoMessage()    {}
func (*UpdateGroupTopicChangedObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{56}
}

func (m *UpdateGroupTopicChangedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupTopicChangedObsolete) GetRid() int64 {
	if m != nil {
		return m.Rid
	}
	return 0
}

func (m *UpdateGroupTopicChangedObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupTopicChangedObsolete) GetTopic() *google_protobuf.StringValue {
	if m != nil {
		return m.Topic
	}
	return nil
}

func (m *UpdateGroupTopicChangedObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update about group about change
type UpdateGroupAboutChangedObsolete struct {
	GroupId int32                        `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	About   *google_protobuf.StringValue `protobuf:"bytes,2,opt,name=about" json:"about,omitempty"`
}

func (m *UpdateGroupAboutChangedObsolete) Reset()         { *m = UpdateGroupAboutChangedObsolete{} }
func (m *UpdateGroupAboutChangedObsolete) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupAboutChangedObsolete) ProtoMessage()    {}
func (*UpdateGroupAboutChangedObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{57}
}

func (m *UpdateGroupAboutChangedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupAboutChangedObsolete) GetAbout() *google_protobuf.StringValue {
	if m != nil {
		return m.About
	}
	return nil
}

// Update about group avatar change
type UpdateGroupAvatarChangedObsolete struct {
	GroupId int32      `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Mid     *UUIDValue `protobuf:"bytes,6,opt,name=mid" json:"mid,omitempty"`
	Uid     int32      `protobuf:"varint,2,opt,name=uid" json:"uid,omitempty"`
	Avatar  *Avatar    `protobuf:"bytes,3,opt,name=avatar" json:"avatar,omitempty"`
	Date    int64      `protobuf:"varint,4,opt,name=date" json:"date,omitempty"`
}

func (m *UpdateGroupAvatarChangedObsolete) Reset()         { *m = UpdateGroupAvatarChangedObsolete{} }
func (m *UpdateGroupAvatarChangedObsolete) String() string { return proto.CompactTextString(m) }
func (*UpdateGroupAvatarChangedObsolete) ProtoMessage()    {}
func (*UpdateGroupAvatarChangedObsolete) Descriptor() ([]byte, []int) {
	return fileDescriptor8, []int{58}
}

func (m *UpdateGroupAvatarChangedObsolete) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupAvatarChangedObsolete) GetMid() *UUIDValue {
	if m != nil {
		return m.Mid
	}
	return nil
}

func (m *UpdateGroupAvatarChangedObsolete) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UpdateGroupAvatarChangedObsolete) GetAvatar() *Avatar {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *UpdateGroupAvatarChangedObsolete) GetDate() int64 {
	if m != nil {
		return m.Date
	}
	return 0
}

// Update group short name
type UpdateGroupShortnameChanged struct {
	GroupId   int32  `protobuf:"varint,1,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
	Shortname string `protobuf:"bytes,2,opt,name=shortname" json:"shortname,omitempty"`
	Uid       int32  `protobuf:"varint,3,opt,name=uid" json:"uid,omitempty"`
}

func (m *UpdateGroupShortnameChanged) Reset()                    { *m = UpdateGroupShortnameChanged{} }
func (m *UpdateGroupShortnameChanged) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupShortnameChanged) ProtoMessage()               {}
func (*UpdateGroupShortnameChanged) Descriptor() ([]byte, []int) { return fileDescriptor8, []int{59} }

func (m *UpdateGroupShortnameChanged) GetGroupId() int32 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *UpdateGroupShortnameChanged) GetShortname() string {
	if m != nil {
		return m.Shortname
	}
	return ""
}

func (m *UpdateGroupShortnameChanged) GetUid() int32 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func init() {
	proto.RegisterType((*Member)(nil), "dialog.Member")
	proto.RegisterType((*Group)(nil), "dialog.Group")
	proto.RegisterType((*GroupFull)(nil), "dialog.GroupFull")
	proto.RegisterType((*RequestLoadFullGroups)(nil), "dialog.RequestLoadFullGroups")
	proto.RegisterType((*ResponseLoadFullGroups)(nil), "dialog.ResponseLoadFullGroups")
	proto.RegisterType((*RequestLoadMembers)(nil), "dialog.RequestLoadMembers")
	proto.RegisterType((*ResponseLoadMembers)(nil), "dialog.ResponseLoadMembers")
	proto.RegisterType((*UpdateGroupTitleChanged)(nil), "dialog.UpdateGroupTitleChanged")
	proto.RegisterType((*UpdateGroupAvatarChanged)(nil), "dialog.UpdateGroupAvatarChanged")
	proto.RegisterType((*UpdateGroupTopicChanged)(nil), "dialog.UpdateGroupTopicChanged")
	proto.RegisterType((*UpdateGroupAboutChanged)(nil), "dialog.UpdateGroupAboutChanged")
	proto.RegisterType((*UpdateGroupOwnerChanged)(nil), "dialog.UpdateGroupOwnerChanged")
	proto.RegisterType((*UpdateGroupHistoryShared)(nil), "dialog.UpdateGroupHistoryShared")
	proto.RegisterType((*UpdateGroupCanSendMessagesChanged)(nil), "dialog.UpdateGroupCanSendMessagesChanged")
	proto.RegisterType((*UpdateGroupCanViewMembersChanged)(nil), "dialog.UpdateGroupCanViewMembersChanged")
	proto.RegisterType((*UpdateGroupCanInviteMembersChanged)(nil), "dialog.UpdateGroupCanInviteMembersChanged")
	proto.RegisterType((*UpdateGroupMemberChanged)(nil), "dialog.UpdateGroupMemberChanged")
	proto.RegisterType((*UpdateGroupMembersBecameAsync)(nil), "dialog.UpdateGroupMembersBecameAsync")
	proto.RegisterType((*UpdateGroupMembersUpdated)(nil), "dialog.UpdateGroupMembersUpdated")
	proto.RegisterType((*UpdateGroupMemberDiff)(nil), "dialog.UpdateGroupMemberDiff")
	proto.RegisterType((*UpdateGroupMembersCountChanged)(nil), "dialog.UpdateGroupMembersCountChanged")
	proto.RegisterType((*UpdateGroupMemberAdminChanged)(nil), "dialog.UpdateGroupMemberAdminChanged")
	proto.RegisterType((*RequestCreateGroup)(nil), "dialog.RequestCreateGroup")
	proto.RegisterType((*ResponseCreateGroup)(nil), "dialog.ResponseCreateGroup")
	proto.RegisterType((*RequestEditGroupTitle)(nil), "dialog.RequestEditGroupTitle")
	proto.RegisterType((*RequestSetGroupShortname)(nil), "dialog.RequestSetGroupShortname")
	proto.RegisterType((*RequestEditGroupAvatar)(nil), "dialog.RequestEditGroupAvatar")
	proto.RegisterType((*ResponseEditGroupAvatar)(nil), "dialog.ResponseEditGroupAvatar")
	proto.RegisterType((*RequestRemoveGroupAvatar)(nil), "dialog.RequestRemoveGroupAvatar")
	proto.RegisterType((*RequestEditGroupTopic)(nil), "dialog.RequestEditGroupTopic")
	proto.RegisterType((*RequestEditGroupAbout)(nil), "dialog.RequestEditGroupAbout")
	proto.RegisterType((*RequestInviteUser)(nil), "dialog.RequestInviteUser")
	proto.RegisterType((*RequestLeaveGroup)(nil), "dialog.RequestLeaveGroup")
	proto.RegisterType((*RequestKickUser)(nil), "dialog.RequestKickUser")
	proto.RegisterType((*RequestMakeUserAdmin)(nil), "dialog.RequestMakeUserAdmin")
	proto.RegisterType((*GroupMemberPermission)(nil), "dialog.GroupMemberPermission")
	proto.RegisterType((*RequestGetGroupMemberPermissions)(nil), "dialog.RequestGetGroupMemberPermissions")
	proto.RegisterType((*ResponseGetGroupMemberPermissions)(nil), "dialog.ResponseGetGroupMemberPermissions")
	proto.RegisterType((*UpdateGroupMemberPermissionsChanged)(nil), "dialog.UpdateGroupMemberPermissionsChanged")
	proto.RegisterType((*RequestTransferOwnership)(nil), "dialog.RequestTransferOwnership")
	proto.RegisterType((*ResponseInviteUrl)(nil), "dialog.ResponseInviteUrl")
	proto.RegisterType((*RequestGetGroupInviteUrl)(nil), "dialog.RequestGetGroupInviteUrl")
	proto.RegisterType((*RequestGetGroupInviteUrlBase)(nil), "dialog.RequestGetGroupInviteUrlBase")
	proto.RegisterType((*ResponseGetGroupInviteUrlBase)(nil), "dialog.ResponseGetGroupInviteUrlBase")
	proto.RegisterType((*RequestRevokeInviteUrl)(nil), "dialog.RequestRevokeInviteUrl")
	proto.RegisterType((*RequestJoinGroup)(nil), "dialog.RequestJoinGroup")
	proto.RegisterType((*ResponseJoinGroup)(nil), "dialog.ResponseJoinGroup")
	proto.RegisterType((*RequestJoinGroupByPeer)(nil), "dialog.RequestJoinGroupByPeer")
	proto.RegisterType((*RequestMakeUserAdminObsolete)(nil), "dialog.RequestMakeUserAdminObsolete")
	proto.RegisterType((*ResponseMakeUserAdminObsolete)(nil), "dialog.ResponseMakeUserAdminObsolete")
	proto.RegisterType((*UpdateGroupInviteObsolete)(nil), "dialog.UpdateGroupInviteObsolete")
	proto.RegisterType((*UpdateGroupUserInvitedObsolete)(nil), "dialog.UpdateGroupUserInvitedObsolete")
	proto.RegisterType((*UpdateGroupUserLeaveObsolete)(nil), "dialog.UpdateGroupUserLeaveObsolete")
	proto.RegisterType((*UpdateGroupUserKickObsolete)(nil), "dialog.UpdateGroupUserKickObsolete")
	proto.RegisterType((*UpdateGroupMembersUpdateObsolete)(nil), "dialog.UpdateGroupMembersUpdateObsolete")
	proto.RegisterType((*UpdateGroupTitleChangedObsolete)(nil), "dialog.UpdateGroupTitleChangedObsolete")
	proto.RegisterType((*UpdateGroupTopicChangedObsolete)(nil), "dialog.UpdateGroupTopicChangedObsolete")
	proto.RegisterType((*UpdateGroupAboutChangedObsolete)(nil), "dialog.UpdateGroupAboutChangedObsolete")
	proto.RegisterType((*UpdateGroupAvatarChangedObsolete)(nil), "dialog.UpdateGroupAvatarChangedObsolete")
	proto.RegisterType((*UpdateGroupShortnameChanged)(nil), "dialog.UpdateGroupShortnameChanged")
	proto.RegisterEnum("dialog.GroupType", GroupType_name, GroupType_value)
	proto.RegisterEnum("dialog.GroupAdminPermission", GroupAdminPermission_name, GroupAdminPermission_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Groups service

type GroupsClient interface {
	// / deprecated
	LoadFullGroups(ctx context.Context, in *RequestLoadFullGroups, opts ...grpc.CallOption) (*ResponseLoadFullGroups, error)
	LoadMembers(ctx context.Context, in *RequestLoadMembers, opts ...grpc.CallOption) (*ResponseLoadMembers, error)
	CreateGroup(ctx context.Context, in *RequestCreateGroup, opts ...grpc.CallOption) (*ResponseCreateGroup, error)
	EditGroupTitle(ctx context.Context, in *RequestEditGroupTitle, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	SetGroupShortname(ctx context.Context, in *RequestSetGroupShortname, opts ...grpc.CallOption) (*ResponseSeq, error)
	EditGroupAvatar(ctx context.Context, in *RequestEditGroupAvatar, opts ...grpc.CallOption) (*ResponseEditGroupAvatar, error)
	RemoveGroupAvatar(ctx context.Context, in *RequestRemoveGroupAvatar, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	EditGroupTopic(ctx context.Context, in *RequestEditGroupTopic, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	EditGroupAbout(ctx context.Context, in *RequestEditGroupAbout, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	InviteUser(ctx context.Context, in *RequestInviteUser, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	LeaveGroup(ctx context.Context, in *RequestLeaveGroup, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	KickUser(ctx context.Context, in *RequestKickUser, opts ...grpc.CallOption) (*ResponseSeqDateMid, error)
	MakeUserAdmin(ctx context.Context, in *RequestMakeUserAdmin, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	GetGroupMemberPermissions(ctx context.Context, in *RequestGetGroupMemberPermissions, opts ...grpc.CallOption) (*ResponseGetGroupMemberPermissions, error)
	TransferOwnership(ctx context.Context, in *RequestTransferOwnership, opts ...grpc.CallOption) (*ResponseSeqDate, error)
	GetGroupInviteUrl(ctx context.Context, in *RequestGetGroupInviteUrl, opts ...grpc.CallOption) (*ResponseInviteUrl, error)
	GetGroupInviteUrlBase(ctx context.Context, in *RequestGetGroupInviteUrlBase, opts ...grpc.CallOption) (*ResponseGetGroupInviteUrlBase, error)
	RevokeInviteUrl(ctx context.Context, in *RequestRevokeInviteUrl, opts ...grpc.CallOption) (*ResponseInviteUrl, error)
	JoinGroup(ctx context.Context, in *RequestJoinGroup, opts ...grpc.CallOption) (*ResponseJoinGroup, error)
	JoinGroupByPeer(ctx context.Context, in *RequestJoinGroupByPeer, opts ...grpc.CallOption) (*ResponseVoid, error)
	MakeUserAdminObsolete(ctx context.Context, in *RequestMakeUserAdminObsolete, opts ...grpc.CallOption) (*ResponseMakeUserAdminObsolete, error)
}

type groupsClient struct {
	cc *grpc.ClientConn
}

func NewGroupsClient(cc *grpc.ClientConn) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) LoadFullGroups(ctx context.Context, in *RequestLoadFullGroups, opts ...grpc.CallOption) (*ResponseLoadFullGroups, error) {
	out := new(ResponseLoadFullGroups)
	err := grpc.Invoke(ctx, "/dialog.Groups/LoadFullGroups", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) LoadMembers(ctx context.Context, in *RequestLoadMembers, opts ...grpc.CallOption) (*ResponseLoadMembers, error) {
	out := new(ResponseLoadMembers)
	err := grpc.Invoke(ctx, "/dialog.Groups/LoadMembers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) CreateGroup(ctx context.Context, in *RequestCreateGroup, opts ...grpc.CallOption) (*ResponseCreateGroup, error) {
	out := new(ResponseCreateGroup)
	err := grpc.Invoke(ctx, "/dialog.Groups/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) EditGroupTitle(ctx context.Context, in *RequestEditGroupTitle, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/EditGroupTitle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) SetGroupShortname(ctx context.Context, in *RequestSetGroupShortname, opts ...grpc.CallOption) (*ResponseSeq, error) {
	out := new(ResponseSeq)
	err := grpc.Invoke(ctx, "/dialog.Groups/SetGroupShortname", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) EditGroupAvatar(ctx context.Context, in *RequestEditGroupAvatar, opts ...grpc.CallOption) (*ResponseEditGroupAvatar, error) {
	out := new(ResponseEditGroupAvatar)
	err := grpc.Invoke(ctx, "/dialog.Groups/EditGroupAvatar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) RemoveGroupAvatar(ctx context.Context, in *RequestRemoveGroupAvatar, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/RemoveGroupAvatar", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) EditGroupTopic(ctx context.Context, in *RequestEditGroupTopic, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Groups/EditGroupTopic", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) EditGroupAbout(ctx context.Context, in *RequestEditGroupAbout, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Groups/EditGroupAbout", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) InviteUser(ctx context.Context, in *RequestInviteUser, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/InviteUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) LeaveGroup(ctx context.Context, in *RequestLeaveGroup, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/LeaveGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) KickUser(ctx context.Context, in *RequestKickUser, opts ...grpc.CallOption) (*ResponseSeqDateMid, error) {
	out := new(ResponseSeqDateMid)
	err := grpc.Invoke(ctx, "/dialog.Groups/KickUser", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) MakeUserAdmin(ctx context.Context, in *RequestMakeUserAdmin, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Groups/MakeUserAdmin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GetGroupMemberPermissions(ctx context.Context, in *RequestGetGroupMemberPermissions, opts ...grpc.CallOption) (*ResponseGetGroupMemberPermissions, error) {
	out := new(ResponseGetGroupMemberPermissions)
	err := grpc.Invoke(ctx, "/dialog.Groups/GetGroupMemberPermissions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) TransferOwnership(ctx context.Context, in *RequestTransferOwnership, opts ...grpc.CallOption) (*ResponseSeqDate, error) {
	out := new(ResponseSeqDate)
	err := grpc.Invoke(ctx, "/dialog.Groups/TransferOwnership", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GetGroupInviteUrl(ctx context.Context, in *RequestGetGroupInviteUrl, opts ...grpc.CallOption) (*ResponseInviteUrl, error) {
	out := new(ResponseInviteUrl)
	err := grpc.Invoke(ctx, "/dialog.Groups/GetGroupInviteUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GetGroupInviteUrlBase(ctx context.Context, in *RequestGetGroupInviteUrlBase, opts ...grpc.CallOption) (*ResponseGetGroupInviteUrlBase, error) {
	out := new(ResponseGetGroupInviteUrlBase)
	err := grpc.Invoke(ctx, "/dialog.Groups/GetGroupInviteUrlBase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) RevokeInviteUrl(ctx context.Context, in *RequestRevokeInviteUrl, opts ...grpc.CallOption) (*ResponseInviteUrl, error) {
	out := new(ResponseInviteUrl)
	err := grpc.Invoke(ctx, "/dialog.Groups/RevokeInviteUrl", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) JoinGroup(ctx context.Context, in *RequestJoinGroup, opts ...grpc.CallOption) (*ResponseJoinGroup, error) {
	out := new(ResponseJoinGroup)
	err := grpc.Invoke(ctx, "/dialog.Groups/JoinGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) JoinGroupByPeer(ctx context.Context, in *RequestJoinGroupByPeer, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := grpc.Invoke(ctx, "/dialog.Groups/JoinGroupByPeer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) MakeUserAdminObsolete(ctx context.Context, in *RequestMakeUserAdminObsolete, opts ...grpc.CallOption) (*ResponseMakeUserAdminObsolete, error) {
	out := new(ResponseMakeUserAdminObsolete)
	err := grpc.Invoke(ctx, "/dialog.Groups/MakeUserAdminObsolete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Groups service

type GroupsServer interface {
	// / deprecated
	LoadFullGroups(context.Context, *RequestLoadFullGroups) (*ResponseLoadFullGroups, error)
	LoadMembers(context.Context, *RequestLoadMembers) (*ResponseLoadMembers, error)
	CreateGroup(context.Context, *RequestCreateGroup) (*ResponseCreateGroup, error)
	EditGroupTitle(context.Context, *RequestEditGroupTitle) (*ResponseSeqDateMid, error)
	SetGroupShortname(context.Context, *RequestSetGroupShortname) (*ResponseSeq, error)
	EditGroupAvatar(context.Context, *RequestEditGroupAvatar) (*ResponseEditGroupAvatar, error)
	RemoveGroupAvatar(context.Context, *RequestRemoveGroupAvatar) (*ResponseSeqDateMid, error)
	EditGroupTopic(context.Context, *RequestEditGroupTopic) (*ResponseSeqDate, error)
	EditGroupAbout(context.Context, *RequestEditGroupAbout) (*ResponseSeqDate, error)
	InviteUser(context.Context, *RequestInviteUser) (*ResponseSeqDateMid, error)
	LeaveGroup(context.Context, *RequestLeaveGroup) (*ResponseSeqDateMid, error)
	KickUser(context.Context, *RequestKickUser) (*ResponseSeqDateMid, error)
	MakeUserAdmin(context.Context, *RequestMakeUserAdmin) (*ResponseSeqDate, error)
	GetGroupMemberPermissions(context.Context, *RequestGetGroupMemberPermissions) (*ResponseGetGroupMemberPermissions, error)
	TransferOwnership(context.Context, *RequestTransferOwnership) (*ResponseSeqDate, error)
	GetGroupInviteUrl(context.Context, *RequestGetGroupInviteUrl) (*ResponseInviteUrl, error)
	GetGroupInviteUrlBase(context.Context, *RequestGetGroupInviteUrlBase) (*ResponseGetGroupInviteUrlBase, error)
	RevokeInviteUrl(context.Context, *RequestRevokeInviteUrl) (*ResponseInviteUrl, error)
	JoinGroup(context.Context, *RequestJoinGroup) (*ResponseJoinGroup, error)
	JoinGroupByPeer(context.Context, *RequestJoinGroupByPeer) (*ResponseVoid, error)
	MakeUserAdminObsolete(context.Context, *RequestMakeUserAdminObsolete) (*ResponseMakeUserAdminObsolete, error)
}

func RegisterGroupsServer(s *grpc.Server, srv GroupsServer) {
	s.RegisterService(&_Groups_serviceDesc, srv)
}

func _Groups_LoadFullGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadFullGroups)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).LoadFullGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/LoadFullGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).LoadFullGroups(ctx, req.(*RequestLoadFullGroups))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_LoadMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLoadMembers)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).LoadMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/LoadMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).LoadMembers(ctx, req.(*RequestLoadMembers))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCreateGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CreateGroup(ctx, req.(*RequestCreateGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_EditGroupTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditGroupTitle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).EditGroupTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/EditGroupTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).EditGroupTitle(ctx, req.(*RequestEditGroupTitle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_SetGroupShortname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestSetGroupShortname)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).SetGroupShortname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/SetGroupShortname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).SetGroupShortname(ctx, req.(*RequestSetGroupShortname))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_EditGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditGroupAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).EditGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/EditGroupAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).EditGroupAvatar(ctx, req.(*RequestEditGroupAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_RemoveGroupAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRemoveGroupAvatar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).RemoveGroupAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/RemoveGroupAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).RemoveGroupAvatar(ctx, req.(*RequestRemoveGroupAvatar))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_EditGroupTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditGroupTopic)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).EditGroupTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/EditGroupTopic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).EditGroupTopic(ctx, req.(*RequestEditGroupTopic))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_EditGroupAbout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditGroupAbout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).EditGroupAbout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/EditGroupAbout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).EditGroupAbout(ctx, req.(*RequestEditGroupAbout))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_InviteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInviteUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).InviteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/InviteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).InviteUser(ctx, req.(*RequestInviteUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_LeaveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLeaveGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).LeaveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/LeaveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).LeaveGroup(ctx, req.(*RequestLeaveGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_KickUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestKickUser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).KickUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/KickUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).KickUser(ctx, req.(*RequestKickUser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_MakeUserAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMakeUserAdmin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).MakeUserAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/MakeUserAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).MakeUserAdmin(ctx, req.(*RequestMakeUserAdmin))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GetGroupMemberPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetGroupMemberPermissions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GetGroupMemberPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/GetGroupMemberPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GetGroupMemberPermissions(ctx, req.(*RequestGetGroupMemberPermissions))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_TransferOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestTransferOwnership)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).TransferOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/TransferOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).TransferOwnership(ctx, req.(*RequestTransferOwnership))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GetGroupInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetGroupInviteUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GetGroupInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/GetGroupInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GetGroupInviteUrl(ctx, req.(*RequestGetGroupInviteUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GetGroupInviteUrlBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestGetGroupInviteUrlBase)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GetGroupInviteUrlBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/GetGroupInviteUrlBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GetGroupInviteUrlBase(ctx, req.(*RequestGetGroupInviteUrlBase))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_RevokeInviteUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRevokeInviteUrl)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).RevokeInviteUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/RevokeInviteUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).RevokeInviteUrl(ctx, req.(*RequestRevokeInviteUrl))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_JoinGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).JoinGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/JoinGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).JoinGroup(ctx, req.(*RequestJoinGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_JoinGroupByPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestJoinGroupByPeer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).JoinGroupByPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/JoinGroupByPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).JoinGroupByPeer(ctx, req.(*RequestJoinGroupByPeer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_MakeUserAdminObsolete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMakeUserAdminObsolete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).MakeUserAdminObsolete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.Groups/MakeUserAdminObsolete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).MakeUserAdminObsolete(ctx, req.(*RequestMakeUserAdminObsolete))
	}
	return interceptor(ctx, in, info, handler)
}

var _Groups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadFullGroups",
			Handler:    _Groups_LoadFullGroups_Handler,
		},
		{
			MethodName: "LoadMembers",
			Handler:    _Groups_LoadMembers_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _Groups_CreateGroup_Handler,
		},
		{
			MethodName: "EditGroupTitle",
			Handler:    _Groups_EditGroupTitle_Handler,
		},
		{
			MethodName: "SetGroupShortname",
			Handler:    _Groups_SetGroupShortname_Handler,
		},
		{
			MethodName: "EditGroupAvatar",
			Handler:    _Groups_EditGroupAvatar_Handler,
		},
		{
			MethodName: "RemoveGroupAvatar",
			Handler:    _Groups_RemoveGroupAvatar_Handler,
		},
		{
			MethodName: "EditGroupTopic",
			Handler:    _Groups_EditGroupTopic_Handler,
		},
		{
			MethodName: "EditGroupAbout",
			Handler:    _Groups_EditGroupAbout_Handler,
		},
		{
			MethodName: "InviteUser",
			Handler:    _Groups_InviteUser_Handler,
		},
		{
			MethodName: "LeaveGroup",
			Handler:    _Groups_LeaveGroup_Handler,
		},
		{
			MethodName: "KickUser",
			Handler:    _Groups_KickUser_Handler,
		},
		{
			MethodName: "MakeUserAdmin",
			Handler:    _Groups_MakeUserAdmin_Handler,
		},
		{
			MethodName: "GetGroupMemberPermissions",
			Handler:    _Groups_GetGroupMemberPermissions_Handler,
		},
		{
			MethodName: "TransferOwnership",
			Handler:    _Groups_TransferOwnership_Handler,
		},
		{
			MethodName: "GetGroupInviteUrl",
			Handler:    _Groups_GetGroupInviteUrl_Handler,
		},
		{
			MethodName: "GetGroupInviteUrlBase",
			Handler:    _Groups_GetGroupInviteUrlBase_Handler,
		},
		{
			MethodName: "RevokeInviteUrl",
			Handler:    _Groups_RevokeInviteUrl_Handler,
		},
		{
			MethodName: "JoinGroup",
			Handler:    _Groups_JoinGroup_Handler,
		},
		{
			MethodName: "JoinGroupByPeer",
			Handler:    _Groups_JoinGroupByPeer_Handler,
		},
		{
			MethodName: "MakeUserAdminObsolete",
			Handler:    _Groups_MakeUserAdminObsolete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "groups.proto",
}

func init() { proto.RegisterFile("groups.proto", fileDescriptor8) }

var fileDescriptor8 = []byte{
	// 3139 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x5a, 0xdf, 0x6f, 0x23, 0x57,
	0xf5, 0xff, 0xce, 0x38, 0x76, 0xec, 0x93, 0x1f, 0xeb, 0xcc, 0x66, 0xbb, 0x8e, 0x37, 0x3f, 0xbc,
	0x93, 0xed, 0x7e, 0xb3, 0x61, 0x9b, 0x94, 0x14, 0x28, 0x6d, 0x11, 0x4b, 0xb2, 0xf1, 0x66, 0xcd,
	0x6e, 0x9c, 0x60, 0x3b, 0x8b, 0x78, 0xb2, 0x26, 0x9e, 0x9b, 0x64, 0x88, 0x3d, 0xe3, 0xce, 0x4c,
	0xb2, 0x4d, 0xa9, 0x8a, 0x04, 0xaa, 0x54, 0x15, 0x55, 0x80, 0x5a, 0x78, 0xa9, 0x00, 0xf1, 0x00,
	0xe2, 0x85, 0x07, 0x1e, 0xe0, 0x81, 0x37, 0x84, 0xc4, 0x1f, 0x00, 0x2f, 0x20, 0x21, 0x1e, 0x56,
	0x48, 0x48, 0x15, 0xe2, 0x81, 0xbf, 0x00, 0xdd, 0x1f, 0x33, 0x9e, 0xb9, 0x33, 0xe3, 0xf1, 0x38,
	0xbb, 0x29, 0x0f, 0x3c, 0xc5, 0x99, 0x7b, 0xee, 0xf9, 0x9c, 0x5f, 0xf7, 0xde, 0x73, 0xce, 0xbd,
	0x30, 0x7e, 0x68, 0x1a, 0x27, 0x5d, 0x6b, 0xa5, 0x6b, 0x1a, 0xb6, 0x21, 0x65, 0x54, 0x4d, 0x69,
	0x1b, 0x87, 0xc5, 0xf9, 0x43, 0xc3, 0x38, 0x6c, 0xa3, 0x55, 0xf2, 0x75, 0xff, 0xe4, 0x60, 0xf5,
	0xb1, 0xa9, 0x74, 0xbb, 0xc8, 0x64, 0x74, 0xc5, 0x59, 0x36, 0xae, 0x74, 0xb5, 0x55, 0x45, 0xd7,
	0x0d, 0x5b, 0xb1, 0x35, 0x43, 0x77, 0x46, 0xa7, 0x54, 0x74, 0xa0, 0xe9, 0x9a, 0xf7, 0xd3, 0xe5,
	0x8e, 0x66, 0xb5, 0x50, 0xbb, 0xad, 0xe8, 0xc8, 0x38, 0x71, 0x3e, 0x8e, 0x75, 0x51, 0x8f, 0xe5,
	0x95, 0x0e, 0x52, 0x35, 0xa5, 0xa9, 0xe8, 0x6a, 0xf3, 0x40, 0x6b, 0x23, 0x97, 0xe6, 0xc4, 0xf2,
	0xd0, 0x58, 0x2d, 0xa5, 0xad, 0x74, 0xf7, 0x57, 0xd9, 0x5f, 0xfa, 0x59, 0xfe, 0xbe, 0x08, 0x99,
	0x6d, 0xd4, 0xd9, 0x47, 0xa6, 0xb4, 0x00, 0xa9, 0x13, 0x4d, 0x2d, 0x08, 0x25, 0x61, 0x29, 0xbd,
	0x31, 0xf1, 0xde, 0xc7, 0x2f, 0xe6, 0x60, 0xf4, 0x54, 0xb3, 0xb4, 0xfd, 0x36, 0xaa, 0xe1, 0x11,
	0x69, 0x05, 0xc6, 0x34, 0xfd, 0x54, 0xb3, 0x91, 0xd9, 0xc4, 0x84, 0x62, 0x18, 0x21, 0x30, 0x8a,
	0x3d, 0x4d, 0x95, 0xae, 0xc3, 0x88, 0xaa, 0xd8, 0xa8, 0x90, 0x2a, 0x09, 0x4b, 0x29, 0x9e, 0x90,
	0x0c, 0x49, 0x9b, 0x90, 0xd5, 0xac, 0xa6, 0xa2, 0x76, 0x34, 0xbd, 0x30, 0x52, 0x12, 0x96, 0xc6,
	0xd6, 0x8a, 0x2b, 0xd4, 0x3e, 0x2b, 0x8e, 0xfd, 0x56, 0x36, 0x0c, 0xa3, 0xfd, 0x48, 0x69, 0x9f,
	0x20, 0x9e, 0xc5, 0xa8, 0x66, 0xad, 0xe3, 0x99, 0xd2, 0x36, 0x8c, 0x75, 0x91, 0xd9, 0xd1, 0x2c,
	0x0b, 0x9b, 0xad, 0x90, 0x2e, 0xa5, 0x96, 0x26, 0xd7, 0x66, 0x57, 0xa8, 0x43, 0x56, 0xb6, 0xb0,
	0x97, 0x08, 0xe1, 0xae, 0x4b, 0xc4, 0xb3, 0xf2, 0xce, 0x97, 0xdf, 0xc9, 0x42, 0x9a, 0x4c, 0x92,
	0xe6, 0x40, 0x8c, 0xb2, 0x88, 0xa8, 0xa9, 0xd2, 0x6d, 0xc8, 0x5a, 0x5d, 0xa5, 0x85, 0x9a, 0x9a,
	0x5a, 0xb8, 0x46, 0xa4, 0x9f, 0x72, 0x40, 0xf7, 0xf6, 0x2a, 0x9b, 0x44, 0xe8, 0xda, 0x28, 0x21,
	0xa9, 0xa8, 0xd2, 0x0b, 0x30, 0xa6, 0xb4, 0x5a, 0xc8, 0xb2, 0x9a, 0x47, 0x8a, 0x75, 0x44, 0xcc,
	0x97, 0xda, 0x18, 0x7f, 0xef, 0xe3, 0x17, 0xb3, 0x90, 0x51, 0x15, 0xfd, 0x10, 0x99, 0x35, 0xa0,
	0x04, 0xf7, 0x15, 0xeb, 0x48, 0x92, 0x21, 0x6d, 0x6b, 0x76, 0x9b, 0x9a, 0x2f, 0xe7, 0x10, 0x1e,
	0x69, 0xaa, 0x8a, 0xf4, 0x1a, 0x1d, 0x92, 0x3e, 0x0b, 0x19, 0xe5, 0x54, 0xb1, 0x15, 0x93, 0x19,
	0x6f, 0xd2, 0x81, 0x5f, 0x27, 0x5f, 0x1d, 0x99, 0x5b, 0x46, 0xa7, 0xab, 0xb4, 0xec, 0x1a, 0x23,
	0x96, 0xbe, 0x02, 0x93, 0x1d, 0xe2, 0x73, 0xab, 0xa9, 0x74, 0x8c, 0x13, 0xdd, 0x2e, 0x14, 0xc8,
	0xf4, 0x6b, 0x01, 0xdb, 0x57, 0x74, 0xfb, 0xa5, 0xb5, 0x50, 0xe3, 0x4f, 0x30, 0x0e, 0xeb, 0x84,
	0x81, 0x74, 0x0f, 0x72, 0x9a, 0xd5, 0xa4, 0xdf, 0x0a, 0x99, 0xa4, 0x9e, 0xcc, 0x6a, 0x16, 0x0b,
	0x42, 0xca, 0x87, 0x6a, 0x59, 0x98, 0x1e, 0x82, 0xcf, 0x7d, 0x32, 0x55, 0xba, 0x03, 0x40, 0x56,
	0x67, 0xd3, 0x3e, 0xeb, 0xa2, 0xc2, 0x4c, 0x49, 0x58, 0x9a, 0xec, 0x39, 0x87, 0x38, 0xb7, 0x71,
	0xd6, 0x0d, 0xcc, 0xcf, 0x1d, 0x3a, 0x23, 0x52, 0x1d, 0xf2, 0x2d, 0x45, 0x6f, 0x5a, 0x48, 0x57,
	0x9b, 0x1d, 0x64, 0x59, 0xca, 0x21, 0x2a, 0x14, 0x93, 0xca, 0x33, 0xd9, 0x52, 0xf4, 0x3a, 0xd2,
	0xd5, 0x6d, 0xca, 0xc0, 0x17, 0xee, 0xf9, 0xa1, 0xc3, 0x7d, 0x05, 0xc6, 0x5a, 0x26, 0x52, 0x6c,
	0x83, 0xae, 0xc3, 0x6c, 0xe8, 0x3a, 0x64, 0x14, 0x78, 0x1d, 0xbe, 0x0c, 0xa3, 0xcc, 0x59, 0x85,
	0x5c, 0x29, 0xe5, 0x0d, 0x13, 0x6a, 0x74, 0x3e, 0x4c, 0x1c, 0x6a, 0x17, 0x08, 0x35, 0xc9, 0x3a,
	0x86, 0xb0, 0x75, 0x4c, 0x81, 0xd0, 0x26, 0x5e, 0xcd, 0x5f, 0x82, 0xb4, 0x7d, 0x84, 0x3a, 0xa8,
	0x30, 0x45, 0x74, 0x9b, 0x0d, 0xe8, 0x56, 0xb7, 0x4d, 0x4d, 0x3f, 0xa4, 0xda, 0xf1, 0x01, 0x8d,
	0x27, 0x62, 0x0e, 0xca, 0xbe, 0x71, 0x62, 0x17, 0xa4, 0xe4, 0x1c, 0xc8, 0x44, 0xa9, 0x02, 0x39,
	0xeb, 0xc8, 0x30, 0x6d, 0x5d, 0xe9, 0xa0, 0xc2, 0xe5, 0x01, 0xb8, 0xf0, 0x21, 0xe0, 0xce, 0x96,
	0x3f, 0x4a, 0x43, 0x8e, 0x84, 0xca, 0xbd, 0x93, 0x76, 0x3b, 0x6e, 0x2f, 0xe0, 0x6c, 0x95, 0x89,
	0xb3, 0xd5, 0x32, 0xe4, 0x8c, 0xc7, 0x3a, 0xdb, 0x4a, 0xd3, 0x61, 0x5c, 0xb3, 0x64, 0x9c, 0x73,
	0xe0, 0x78, 0x3f, 0x07, 0xba, 0x91, 0xe2, 0x38, 0xd0, 0x75, 0x88, 0x78, 0x6e, 0x87, 0xa4, 0x86,
	0x75, 0x48, 0x1d, 0xf2, 0x38, 0xe6, 0xad, 0x33, 0xbd, 0xd5, 0x74, 0xb4, 0x18, 0x4b, 0xbc, 0x90,
	0x34, 0x6b, 0x1d, 0x73, 0xd8, 0x66, 0x8a, 0xb1, 0xd5, 0x79, 0xaa, 0xa1, 0xc7, 0x2e, 0xd3, 0xec,
	0x30, 0xab, 0xf3, 0x91, 0x86, 0x1e, 0x3b, 0x4c, 0xf7, 0x60, 0x0a, 0x33, 0xa5, 0x27, 0x58, 0xb3,
	0x8b, 0x8c, 0x6e, 0x1b, 0x15, 0x72, 0x49, 0xb9, 0x5e, 0x6a, 0x29, 0x7a, 0x85, 0xb0, 0xd8, 0x25,
	0x1c, 0x30, 0x5b, 0xcd, 0x6a, 0x5a, 0x47, 0x8a, 0x89, 0xd4, 0xe6, 0x91, 0x66, 0xd9, 0x86, 0x79,
	0x46, 0xd6, 0x52, 0x32, 0xb6, 0x9a, 0x55, 0x27, 0x2c, 0xee, 0x53, 0x0e, 0xb2, 0x09, 0x57, 0x6a,
	0xe8, 0xf5, 0x13, 0x64, 0xd9, 0x0f, 0x0d, 0x45, 0xc5, 0x21, 0x4a, 0x62, 0xd5, 0x92, 0x5e, 0x83,
	0x0c, 0x4d, 0x4c, 0x0a, 0x02, 0x09, 0x96, 0x69, 0xdf, 0xb6, 0xb7, 0x73, 0x62, 0xef, 0xa2, 0xe0,
	0x9a, 0x67, 0x53, 0x5e, 0x9d, 0x7d, 0x72, 0x67, 0x06, 0xae, 0x6a, 0x9d, 0x15, 0xb5, 0x7d, 0xb8,
	0x72, 0x68, 0x76, 0x5b, 0x2b, 0x5b, 0x66, 0xb7, 0xc5, 0x80, 0xe4, 0x7d, 0x78, 0xae, 0x86, 0xac,
	0xae, 0xa1, 0x5b, 0x88, 0x03, 0xbd, 0xc5, 0x81, 0xfa, 0xf7, 0x5a, 0x4c, 0xe8, 0x42, 0xcc, 0x3d,
	0xb9, 0x53, 0x84, 0x42, 0x10, 0x82, 0xf2, 0x95, 0xff, 0x28, 0x80, 0xe4, 0x51, 0xcc, 0x71, 0xce,
	0x2b, 0x90, 0x26, 0xf3, 0xc9, 0x0a, 0x8c, 0x51, 0xca, 0xb1, 0x19, 0x9d, 0x21, 0x2d, 0x42, 0xba,
	0xad, 0x75, 0x34, 0x3b, 0x3c, 0x63, 0xa1, 0x63, 0xd2, 0x17, 0x61, 0x44, 0x47, 0x6f, 0x38, 0x71,
	0x1e, 0x3c, 0x09, 0x37, 0xce, 0x6c, 0x64, 0x85, 0x7a, 0x86, 0xcc, 0x8b, 0x31, 0xdc, 0x87, 0x02,
	0x5c, 0xf6, 0x5a, 0xce, 0xd1, 0xea, 0x85, 0xde, 0xca, 0xa6, 0x76, 0xbb, 0xec, 0x26, 0x10, 0x16,
	0x32, 0x99, 0x5a, 0xbd, 0xf5, 0xbc, 0xca, 0x84, 0x14, 0x63, 0x85, 0x64, 0x52, 0xc5, 0xd8, 0xfa,
	0x10, 0xae, 0xee, 0x75, 0xf1, 0x7e, 0x45, 0x4f, 0x44, 0x9c, 0x53, 0xdc, 0x3d, 0xc2, 0xa9, 0x88,
	0x2a, 0x2d, 0x41, 0x96, 0x1e, 0xa0, 0x51, 0x9b, 0xde, 0x28, 0x19, 0xae, 0xa8, 0xbd, 0x44, 0x45,
	0x8c, 0x4c, 0x54, 0xe4, 0x6f, 0x40, 0xc1, 0x03, 0x44, 0xb3, 0x93, 0xe4, 0x48, 0xbd, 0x74, 0x47,
	0xec, 0x97, 0xee, 0x38, 0xf3, 0x18, 0xb1, 0xfc, 0x8e, 0xe0, 0x57, 0xd3, 0xe8, 0x6a, 0xad, 0xe4,
	0xe0, 0x78, 0x2f, 0xc5, 0x33, 0x87, 0xda, 0x4b, 0xf1, 0x44, 0x5e, 0x8e, 0x75, 0xbc, 0x3d, 0x0e,
	0x25, 0x07, 0xdd, 0x91, 0xc5, 0x21, 0x77, 0x64, 0xf9, 0xd8, 0x27, 0xc6, 0x0e, 0x3e, 0x65, 0x92,
	0x8b, 0x71, 0x13, 0x46, 0x71, 0x79, 0xd1, 0x8c, 0x2a, 0x04, 0x32, 0x78, 0xb4, 0xa2, 0xca, 0x9b,
	0x3e, 0xcf, 0xb3, 0xcd, 0x8b, 0xee, 0x64, 0x83, 0xa3, 0xc9, 0xef, 0x0a, 0x70, 0xdd, 0xc3, 0xe6,
	0xae, 0x2f, 0xad, 0xb2, 0x92, 0x4b, 0xff, 0x0a, 0xdd, 0xea, 0xbd, 0xd9, 0x9d, 0x45, 0xf4, 0xc8,
	0x86, 0x6d, 0xe7, 0x5e, 0x2c, 0xec, 0xc5, 0x92, 0x5f, 0x14, 0xcf, 0x19, 0x92, 0x5c, 0x92, 0x97,
	0x43, 0x4e, 0xb2, 0x50, 0x41, 0xb8, 0xd3, 0x4a, 0xfe, 0x8e, 0x00, 0xb2, 0x5f, 0x0e, 0x7a, 0xea,
	0x0c, 0x2d, 0xc9, 0x6b, 0x20, 0x79, 0x8e, 0xbf, 0xbe, 0xb2, 0xe4, 0x5b, 0x1c, 0x9a, 0xdc, 0xf5,
	0xb9, 0x99, 0x7e, 0x4d, 0x2e, 0xc2, 0xb2, 0xb7, 0x8a, 0x08, 0x45, 0x76, 0x2b, 0x05, 0xb9, 0x02,
	0x73, 0x01, 0x44, 0x6b, 0x03, 0xb5, 0x94, 0x0e, 0x22, 0xa9, 0x42, 0x82, 0xe8, 0x7a, 0x1b, 0x66,
	0x82, 0xac, 0xe8, 0x97, 0x64, 0xae, 0x1c, 0xed, 0x59, 0x2d, 0x41, 0x9a, 0x26, 0xff, 0x5e, 0x80,
	0x2b, 0x01, 0x01, 0x36, 0xb5, 0x83, 0x03, 0x69, 0x0d, 0x26, 0x4c, 0xd4, 0x31, 0x4e, 0x91, 0xda,
	0x24, 0xc5, 0x3c, 0x39, 0x25, 0x02, 0x12, 0x8c, 0x33, 0x1a, 0x7c, 0x66, 0x58, 0xd2, 0x06, 0x4c,
	0x28, 0xaa, 0x8a, 0xd4, 0x66, 0x22, 0x61, 0xc6, 0xc9, 0x1c, 0xe7, 0x5c, 0x5a, 0x03, 0xa7, 0xbe,
	0x6b, 0xb6, 0x48, 0x81, 0x98, 0x0a, 0xd3, 0x7c, 0x9c, 0xd1, 0xdc, 0xc5, 0x24, 0xf2, 0xdb, 0x30,
	0x1f, 0xb4, 0x22, 0x19, 0x4a, 0x1e, 0x08, 0x01, 0x7c, 0x31, 0x1e, 0xff, 0x23, 0x21, 0x24, 0x22,
	0x48, 0xc5, 0xf4, 0xcc, 0x76, 0x37, 0xcc, 0xd1, 0x2d, 0xe8, 0x52, 0x61, 0xf1, 0xea, 0x14, 0x6d,
	0xf2, 0x6f, 0x53, 0x6e, 0x5a, 0x73, 0x97, 0x54, 0x01, 0xb4, 0xc3, 0xb0, 0x00, 0x29, 0x93, 0x49,
	0x13, 0x28, 0x17, 0xf0, 0x88, 0xaf, 0xc7, 0x90, 0x8b, 0xed, 0x31, 0x0c, 0x70, 0x16, 0x4b, 0x9f,
	0x87, 0x34, 0x8d, 0xa5, 0x54, 0x64, 0xc6, 0x11, 0xc8, 0x91, 0xc8, 0x04, 0xae, 0xa8, 0xce, 0x24,
	0x2f, 0xaa, 0xb7, 0x20, 0x8b, 0x39, 0x91, 0xda, 0x2c, 0x9b, 0xbc, 0x36, 0x73, 0x27, 0x4b, 0x3b,
	0x30, 0x61, 0x74, 0x6d, 0xad, 0xa3, 0xbd, 0x49, 0xbb, 0x67, 0x85, 0x51, 0xd2, 0xf3, 0x29, 0xba,
	0xba, 0x90, 0x38, 0xd8, 0xf1, 0x90, 0x04, 0xfa, 0x17, 0xbe, 0xf9, 0x31, 0xe9, 0xdb, 0x5f, 0x3c,
	0xe9, 0x9b, 0xd7, 0x7b, 0x79, 0x48, 0x59, 0xe8, 0x75, 0x1a, 0x4b, 0x35, 0xfc, 0x53, 0x9a, 0x86,
	0xb4, 0x65, 0xe3, 0x02, 0x10, 0x3b, 0x60, 0xbc, 0x46, 0xff, 0xc1, 0x19, 0x28, 0x4d, 0x5e, 0x69,
	0x76, 0x39, 0xe1, 0xb3, 0x99, 0x93, 0xa6, 0xca, 0x8e, 0x5f, 0x46, 0x88, 0x5f, 0xc6, 0xbd, 0x7e,
	0x71, 0x3c, 0xb0, 0x06, 0x40, 0xe2, 0x92, 0x74, 0xff, 0x48, 0xa3, 0x2b, 0x22, 0x65, 0xcc, 0x61,
	0x32, 0xfc, 0x2b, 0x36, 0xdf, 0xfe, 0xae, 0xe8, 0x16, 0x12, 0x65, 0x55, 0xb3, 0x7b, 0x99, 0xa0,
	0xb4, 0xe1, 0xb8, 0x1b, 0xa3, 0x25, 0xc9, 0xbb, 0xa9, 0xc7, 0xf1, 0x88, 0x13, 0xdf, 0x23, 0x91,
	0xf1, 0x3d, 0x48, 0x9b, 0x2b, 0xe0, 0xed, 0xf4, 0x33, 0xf5, 0xf6, 0x8f, 0x05, 0x28, 0xb0, 0xdf,
	0x75, 0x44, 0x0d, 0x52, 0x77, 0x9a, 0x02, 0xd2, 0xcb, 0x30, 0x92, 0xd4, 0x1c, 0x64, 0x82, 0xf4,
	0x29, 0x6f, 0x63, 0x82, 0x2e, 0xcf, 0xc8, 0xd6, 0x43, 0x8c, 0x80, 0xbf, 0x11, 0x71, 0x1d, 0xe6,
	0x77, 0x19, 0x4d, 0x81, 0x2f, 0xc6, 0x67, 0xf7, 0x61, 0xe2, 0x40, 0x6b, 0xa3, 0x66, 0xdb, 0x68,
	0x11, 0x83, 0xb2, 0xb0, 0x76, 0x71, 0xee, 0x69, 0x6d, 0xf4, 0x90, 0x8d, 0xf1, 0x85, 0xe6, 0xf8,
	0x81, 0x67, 0xf0, 0xa2, 0x3d, 0xfb, 0x3b, 0x01, 0xae, 0x3a, 0x81, 0xcf, 0x5b, 0xee, 0xa6, 0x5b,
	0x5c, 0x08, 0x61, 0xc5, 0x85, 0xdb, 0x3c, 0x65, 0x6b, 0x5e, 0x0c, 0x59, 0xf3, 0x29, 0xef, 0x9a,
	0x97, 0x58, 0xf7, 0x9b, 0x98, 0x91, 0xb5, 0xbb, 0x17, 0x21, 0xd5, 0x61, 0xed, 0x9e, 0xd0, 0x7d,
	0x1c, 0x8f, 0xc6, 0xad, 0xd7, 0x7f, 0xf5, 0xa2, 0xb3, 0x46, 0x8e, 0xfd, 0x0b, 0x77, 0xff, 0x05,
	0x3b, 0xed, 0x97, 0x61, 0x1b, 0x14, 0x2e, 0xa8, 0x9e, 0xa6, 0xb6, 0x62, 0xa4, 0xb6, 0x6e, 0xdd,
	0x97, 0x1a, 0xb2, 0xee, 0x0b, 0xda, 0x6b, 0xe4, 0xc2, 0xed, 0x45, 0x6a, 0xcd, 0x0b, 0xb3, 0xd7,
	0x39, 0x3b, 0x86, 0x17, 0x1c, 0x5f, 0x3f, 0x11, 0x61, 0x8a, 0xfd, 0xa6, 0x35, 0x0d, 0x3e, 0x47,
	0x2f, 0x66, 0x25, 0x7d, 0x0e, 0x46, 0xf0, 0x39, 0xcd, 0x4c, 0x35, 0x48, 0x26, 0x46, 0xe8, 0x2f,
	0xda, 0x42, 0xff, 0x10, 0x5c, 0x0b, 0x3d, 0x44, 0x0a, 0xdb, 0x71, 0x2e, 0x26, 0x9a, 0x02, 0x9a,
	0xa6, 0x9e, 0xa9, 0xa6, 0x3f, 0x12, 0xe1, 0x12, 0xfb, 0xfd, 0x40, 0x6b, 0x1d, 0xff, 0x2f, 0x12,
	0x38, 0xfb, 0xbc, 0x2b, 0xc2, 0x34, 0xfb, 0xbd, 0xad, 0x1c, 0x93, 0x95, 0x42, 0xef, 0xa4, 0x9e,
	0x86, 0x91, 0xee, 0x40, 0xce, 0x4d, 0x6e, 0x59, 0x77, 0x6b, 0x10, 0x43, 0x64, 0x9d, 0x54, 0x97,
	0xbf, 0x07, 0x4e, 0x9d, 0xef, 0x1e, 0x38, 0xc6, 0x14, 0xef, 0x0b, 0x70, 0xc5, 0x53, 0x68, 0xf6,
	0x78, 0x7a, 0x8b, 0x47, 0xa1, 0x5f, 0xf1, 0xf8, 0xd0, 0x2f, 0xae, 0x38, 0x80, 0xb8, 0xfe, 0xfd,
	0xd2, 0x77, 0x6b, 0xfd, 0xa1, 0x00, 0x25, 0x26, 0xdb, 0x16, 0xcb, 0x5a, 0x79, 0xc9, 0xac, 0x04,
	0x15, 0xf0, 0x12, 0x2d, 0xd5, 0x9a, 0x9a, 0x4a, 0x25, 0x0b, 0x52, 0x52, 0x2d, 0xe2, 0xcc, 0xf4,
	0x6d, 0x01, 0xae, 0x3b, 0xb9, 0x4b, 0xb4, 0x5c, 0x77, 0xfc, 0xa6, 0xa0, 0xbd, 0xf0, 0x39, 0x9f,
	0x29, 0xf8, 0x49, 0x7e, 0x5f, 0xc5, 0x24, 0x4d, 0x7f, 0x10, 0x60, 0x31, 0xd0, 0x1b, 0xf0, 0x08,
	0xf0, 0xec, 0x3a, 0x04, 0x4f, 0x37, 0x26, 0xe5, 0x5f, 0xf4, 0xb2, 0xbf, 0x86, 0xa9, 0xe8, 0xd6,
	0x01, 0x32, 0x49, 0x03, 0xd7, 0x3a, 0xd2, 0x9e, 0xce, 0x8e, 0xbc, 0x0c, 0x39, 0x1d, 0x3d, 0x6e,
	0x92, 0xbb, 0xc7, 0x70, 0xcd, 0xb2, 0x3a, 0x7a, 0x4c, 0x30, 0x63, 0x3c, 0xbf, 0x89, 0x0f, 0x0d,
	0x6a, 0x7f, 0x76, 0xae, 0x9a, 0x6d, 0x9c, 0x3d, 0x9f, 0x98, 0x6d, 0x22, 0x5b, 0xae, 0x86, 0x7f,
	0xc6, 0x79, 0xee, 0x2d, 0x57, 0x5f, 0x27, 0x7a, 0x7a, 0xcc, 0x9e, 0x82, 0xbe, 0x31, 0x3a, 0x7c,
	0x01, 0x66, 0xa3, 0xd0, 0x37, 0x14, 0x2b, 0xae, 0x4e, 0xdb, 0x85, 0x39, 0x3e, 0xf4, 0x7d, 0xd3,
	0x93, 0x5b, 0xe3, 0x4d, 0xb7, 0xf0, 0xab, 0xa1, 0x53, 0xe3, 0x18, 0x5d, 0xa4, 0x2d, 0x7e, 0x26,
	0x40, 0x9e, 0xfd, 0xfe, 0xb2, 0xa1, 0xe9, 0x5b, 0xce, 0xdd, 0x9a, 0x6d, 0x1c, 0x23, 0x9d, 0xea,
	0x10, 0xe8, 0x1b, 0x91, 0x31, 0xa9, 0xca, 0x1f, 0x52, 0x62, 0xec, 0x21, 0xe5, 0xdf, 0xe8, 0x12,
	0x9d, 0x51, 0xdf, 0x13, 0x7b, 0x81, 0xe7, 0x13, 0xd4, 0x7b, 0x7f, 0x18, 0xd3, 0x82, 0x49, 0x0f,
	0xda, 0x82, 0x19, 0x1d, 0xa4, 0x05, 0xe3, 0xd4, 0x7d, 0xd9, 0x7e, 0x75, 0xdf, 0x79, 0x0a, 0xcb,
	0xb8, 0xb0, 0x31, 0xdc, 0xb0, 0x71, 0x0d, 0xb2, 0x71, 0x46, 0x96, 0xfb, 0xb0, 0xed, 0x8c, 0xf8,
	0x42, 0x7b, 0x36, 0x2c, 0x4f, 0xd8, 0xd9, 0xb7, 0x8c, 0x36, 0xb2, 0xd1, 0x7f, 0x45, 0xbe, 0x10,
	0x17, 0x47, 0x42, 0x6f, 0xf9, 0x86, 0x2b, 0xb1, 0xc4, 0xdf, 0xde, 0x72, 0x3d, 0xf6, 0xde, 0xc5,
	0xed, 0x80, 0xbe, 0x8d, 0xf3, 0xe3, 0x5f, 0x05, 0xdf, 0x4d, 0x05, 0x5d, 0xfd, 0x1e, 0x71, 0x06,
	0x3d, 0xbc, 0x58, 0x3a, 0x9a, 0x8b, 0x4c, 0x47, 0x59, 0xc0, 0x42, 0xdf, 0x80, 0xbd, 0x0d, 0xec,
	0xb5, 0x5f, 0xf4, 0x1b, 0x96, 0x1c, 0x25, 0xf0, 0xbe, 0x06, 0xcc, 0x46, 0xbe, 0x06, 0x94, 0x3f,
	0x10, 0x7d, 0x57, 0x08, 0xd8, 0xe0, 0x54, 0x45, 0x75, 0x78, 0x1d, 0xd3, 0x91, 0x3a, 0xae, 0x51,
	0x1d, 0x33, 0x11, 0x3a, 0x06, 0xe6, 0x60, 0x95, 0xd9, 0x1b, 0x49, 0x71, 0xd0, 0x37, 0x92, 0xa9,
	0x41, 0xdf, 0x48, 0x8e, 0x44, 0x5b, 0xe5, 0x57, 0x02, 0xcc, 0x72, 0x56, 0x21, 0x55, 0xd8, 0x10,
	0x36, 0x19, 0xa4, 0xff, 0x14, 0xaf, 0x63, 0xfc, 0xbb, 0x4e, 0xf9, 0x6f, 0x02, 0x5c, 0xe3, 0x64,
	0xc6, 0xf5, 0xd4, 0xf0, 0x22, 0x67, 0xce, 0x27, 0xf2, 0x6d, 0x80, 0x63, 0xad, 0x75, 0xdc, 0xcf,
	0x2b, 0x39, 0x4a, 0x30, 0xa0, 0x53, 0xb8, 0x5b, 0x60, 0xdf, 0x9d, 0xe1, 0x10, 0x5a, 0x0e, 0x7d,
	0x75, 0xf8, 0x67, 0x01, 0x16, 0x22, 0x9e, 0x70, 0x7c, 0x62, 0xc6, 0x1e, 0xa4, 0xa5, 0x3f, 0x80,
	0x89, 0xff, 0xcd, 0xa9, 0xe6, 0x79, 0xb6, 0x31, 0xfc, 0x76, 0x10, 0xdd, 0x69, 0x60, 0x6a, 0xa5,
	0x22, 0xd5, 0x72, 0x1b, 0x81, 0x23, 0xc3, 0x36, 0x02, 0x1d, 0xa5, 0xd3, 0xd1, 0x4a, 0xbf, 0xef,
	0x57, 0xda, 0xfb, 0x46, 0x64, 0x08, 0xa5, 0xcf, 0xff, 0x56, 0xe4, 0x9f, 0xfe, 0x38, 0xf7, 0xbd,
	0xdc, 0xf9, 0xc4, 0x02, 0xac, 0xf7, 0x0e, 0x28, 0x95, 0xe4, 0xd9, 0xf3, 0x00, 0x31, 0xf7, 0x03,
	0xff, 0xbe, 0xe5, 0x5e, 0xfb, 0x24, 0xaf, 0x0f, 0x93, 0x5c, 0xf7, 0xc4, 0xc6, 0xde, 0x72, 0x95,
	0xbd, 0x44, 0x25, 0xb7, 0xa8, 0x57, 0x60, 0x6a, 0xab, 0xb6, 0xb3, 0xb7, 0xdb, 0xf8, 0xda, 0x6e,
	0xb9, 0xb9, 0x57, 0x7d, 0x50, 0xdd, 0xf9, 0x6a, 0x35, 0xff, 0x7f, 0xd2, 0x65, 0xb8, 0xd4, 0xfb,
	0x4c, 0x7e, 0xe5, 0x05, 0x3f, 0xed, 0xdd, 0xfb, 0xeb, 0xd5, 0x6a, 0xf9, 0x61, 0x5e, 0x5c, 0xfe,
	0x75, 0x0a, 0xa6, 0xc3, 0x6a, 0x4f, 0xa9, 0x04, 0xb3, 0x84, 0x7e, 0x7d, 0x73, 0xbb, 0x52, 0xdd,
	0x2d, 0xd7, 0xb6, 0x2b, 0xf5, 0x7a, 0x65, 0xa7, 0xea, 0x81, 0xb9, 0x09, 0x72, 0x28, 0x45, 0x79,
	0xb3, 0xd2, 0xa8, 0xdf, 0xdf, 0xa9, 0x35, 0xaa, 0xeb, 0xdb, 0xe5, 0xbc, 0x20, 0x2d, 0xc0, 0xb5,
	0x50, 0xba, 0x4a, 0xf5, 0x51, 0xa5, 0x51, 0xce, 0x8b, 0xd2, 0x1c, 0xcc, 0x84, 0x12, 0x3c, 0xa8,
	0xdc, 0x7d, 0x90, 0x4f, 0x49, 0x8b, 0xb0, 0x10, 0x2e, 0xc9, 0xee, 0xe6, 0x7a, 0xa3, 0x5c, 0xa9,
	0xde, 0xdb, 0xc9, 0x8f, 0x48, 0xff, 0x0f, 0x8b, 0xa1, 0x44, 0xf5, 0x72, 0xa3, 0xf7, 0x5f, 0x3d,
	0x9f, 0x96, 0x6e, 0x40, 0x29, 0x52, 0xea, 0xed, 0x72, 0xbd, 0xbe, 0xbe, 0x55, 0xce, 0x67, 0x22,
	0x75, 0xdb, 0x2c, 0x3f, 0x2c, 0x37, 0xca, 0x0e, 0xdd, 0xa8, 0x74, 0x1b, 0x96, 0x42, 0xe9, 0xb6,
	0xca, 0x8d, 0x4a, 0xb5, 0x51, 0xde, 0xaa, 0xad, 0x37, 0x2a, 0x3b, 0xd5, 0xc6, 0xce, 0x83, 0x72,
	0x35, 0x9f, 0x8d, 0xc4, 0xae, 0x97, 0xab, 0x9b, 0x0e, 0xcf, 0x5c, 0xa4, 0xbe, 0xbb, 0x95, 0xaa,
	0x43, 0x04, 0x6b, 0x3f, 0x9d, 0x86, 0x0c, 0x7b, 0x71, 0xf9, 0x26, 0x4c, 0x72, 0x6f, 0x30, 0xdd,
	0x7e, 0x49, 0xe8, 0xbb, 0xd0, 0xe2, 0x7c, 0x6f, 0x38, 0xec, 0x09, 0xa7, 0x7c, 0xeb, 0x5b, 0x7f,
	0xfa, 0xfb, 0x07, 0xe2, 0xa2, 0x3c, 0xbf, 0x7a, 0xfa, 0xe9, 0x55, 0x9c, 0x7b, 0xae, 0xd2, 0x81,
	0x55, 0x3f, 0xdd, 0xab, 0xc2, 0xb2, 0xa4, 0xc3, 0x98, 0xf7, 0x15, 0x63, 0x31, 0x04, 0x98, 0x8d,
	0x15, 0xaf, 0x85, 0xa1, 0x3a, 0xaf, 0x86, 0x6e, 0x12, 0xc8, 0x92, 0x7c, 0x2d, 0x0c, 0x92, 0x11,
	0x31, 0x3c, 0xef, 0xb5, 0x3b, 0x8f, 0xe7, 0x19, 0x0b, 0xe2, 0x79, 0x06, 0xa3, 0xf1, 0x3c, 0x44,
	0x18, 0xef, 0x14, 0x26, 0xb9, 0xbb, 0x70, 0xde, 0xb6, 0xfe, 0xe1, 0x62, 0x91, 0x47, 0xad, 0xa3,
	0xd7, 0x37, 0x15, 0x1b, 0x6d, 0x6b, 0x6a, 0xb4, 0x5d, 0xfd, 0x3c, 0x30, 0xee, 0x1b, 0x30, 0x15,
	0xbc, 0x71, 0x2e, 0x71, 0xd0, 0x01, 0x8a, 0xe2, 0xe5, 0x10, 0x74, 0xf9, 0x36, 0x81, 0xbd, 0x29,
	0x5f, 0xe7, 0x61, 0x03, 0xf3, 0x31, 0xf2, 0xdb, 0x70, 0x89, 0xbf, 0x10, 0x9d, 0x8f, 0x52, 0x99,
	0x8e, 0x17, 0x17, 0x78, 0x54, 0x8e, 0x40, 0x5e, 0x26, 0x12, 0xdc, 0x90, 0x17, 0x22, 0x15, 0xa7,
	0x84, 0x18, 0xff, 0x9b, 0xb8, 0x66, 0xe7, 0x6f, 0x33, 0x79, 0xcd, 0x03, 0x14, 0x7d, 0xed, 0x1e,
	0x69, 0x80, 0x00, 0x1b, 0x2c, 0x80, 0xe5, 0x75, 0x39, 0x39, 0xad, 0xa3, 0x5d, 0x8e, 0x87, 0x8b,
	0x57, 0x23, 0xa0, 0x07, 0xf1, 0x37, 0x66, 0xc0, 0x83, 0xd2, 0x2b, 0xba, 0x48, 0x50, 0x32, 0x7c,
	0x1e, 0x50, 0xc2, 0x00, 0x83, 0x7e, 0x1d, 0xc0, 0x73, 0xcf, 0x35, 0xc3, 0x01, 0xf6, 0x86, 0xfa,
	0x1a, 0xf7, 0x79, 0x82, 0xb7, 0x20, 0x17, 0x79, 0xbc, 0xde, 0x7c, 0x86, 0xe5, 0xb9, 0x31, 0xe2,
	0xb1, 0x7a, 0x43, 0xc3, 0x61, 0xf5, 0xe6, 0x63, 0x2c, 0x15, 0xb2, 0xee, 0x9d, 0xcd, 0x55, 0x0e,
	0xc9, 0x19, 0xe8, 0x8b, 0xb3, 0x48, 0x70, 0xe6, 0xe4, 0x02, 0x8f, 0xe3, 0xcc, 0xc6, 0x28, 0x5d,
	0x98, 0xf0, 0xdf, 0x7c, 0xcc, 0x72, 0x50, 0xbe, 0xd1, 0x68, 0x87, 0x2d, 0x11, 0x30, 0x59, 0x9e,
	0xe3, 0xc1, 0x7c, 0xf3, 0x31, 0xe2, 0xcf, 0x05, 0x98, 0xe9, 0xd3, 0xd1, 0xe7, 0xe0, 0x23, 0x29,
	0x8b, 0xb7, 0x78, 0x51, 0x22, 0x49, 0xe5, 0xcf, 0x10, 0xe1, 0x56, 0xe4, 0x5b, 0xbc, 0x70, 0x91,
	0x53, 0xb0, 0xa0, 0x6f, 0xc1, 0x54, 0xb0, 0x27, 0xcd, 0xaf, 0xe1, 0x00, 0x45, 0xb4, 0x89, 0x22,
	0x17, 0x70, 0x80, 0x07, 0xdd, 0xc1, 0xa6, 0x82, 0x1d, 0xe2, 0x52, 0x84, 0x75, 0x5c, 0x8a, 0xe2,
	0x0c, 0x8f, 0xee, 0x0e, 0x45, 0xe3, 0x07, 0xb8, 0x60, 0xfc, 0x1f, 0x0a, 0x70, 0x25, 0xbc, 0xcb,
	0x7b, 0x23, 0x4e, 0x08, 0x4c, 0x55, 0x7c, 0x3e, 0xca, 0x3d, 0x3e, 0x32, 0xf9, 0x45, 0x22, 0xd4,
	0xb2, 0xfc, 0x7c, 0xac, 0x50, 0xa4, 0x41, 0x4d, 0x0e, 0x95, 0x4b, 0x7c, 0xb3, 0x78, 0x3e, 0xb0,
	0xb1, 0xfa, 0xc6, 0xfb, 0x19, 0x25, 0x72, 0x53, 0xe7, 0x78, 0x60, 0xe4, 0x03, 0xc8, 0xf5, 0x1a,
	0xb0, 0x05, 0x0e, 0xd3, 0x1d, 0x09, 0xa2, 0xb9, 0x43, 0xf2, 0x0d, 0x82, 0x36, 0x2f, 0xcf, 0xf0,
	0x68, 0x2e, 0x09, 0xdd, 0x46, 0x2f, 0xf1, 0x7d, 0xcd, 0xf9, 0x28, 0x34, 0x3a, 0x5e, 0x9c, 0xe6,
	0x31, 0x1f, 0x19, 0x9a, 0x1a, 0xad, 0x1c, 0x37, 0xdd, 0xf1, 0x77, 0x78, 0x5b, 0xf0, 0x46, 0xbf,
	0x1d, 0xc1, 0xa1, 0x0a, 0xfa, 0x3b, 0x94, 0x2c, 0xda, 0xdf, 0xa1, 0xe4, 0xaf, 0x0a, 0xcb, 0x1b,
	0x33, 0x4f, 0xee, 0x3c, 0x07, 0xd3, 0xde, 0x1e, 0xa2, 0x85, 0xcc, 0x53, 0xad, 0x85, 0xac, 0xfd,
	0x0c, 0x29, 0xfc, 0x5e, 0xfa, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2d, 0x7c, 0x72, 0xa3, 0xba,
	0x3c, 0x00, 0x00,
}
