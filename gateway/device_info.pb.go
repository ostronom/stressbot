// Code generated by protoc-gen-go. DO NOT EDIT.
// source: device_info.proto

package dialog

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/types"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PlatformType int32

const (
	PlatformType_PLATFORMTYPE_UNKNOWN PlatformType = 0
	PlatformType_PLATFORMTYPE_ANDROID PlatformType = 1
	PlatformType_PLATFORMTYPE_IOS     PlatformType = 2
	PlatformType_PLATFORMTYPE_WEB     PlatformType = 3
	PlatformType_PLATFORMTYPE_CLC     PlatformType = 4
	PlatformType_PLATFORMTYPE_TESTS   PlatformType = 42
)

var PlatformType_name = map[int32]string{
	0:  "PLATFORMTYPE_UNKNOWN",
	1:  "PLATFORMTYPE_ANDROID",
	2:  "PLATFORMTYPE_IOS",
	3:  "PLATFORMTYPE_WEB",
	4:  "PLATFORMTYPE_CLC",
	42: "PLATFORMTYPE_TESTS",
}
var PlatformType_value = map[string]int32{
	"PLATFORMTYPE_UNKNOWN": 0,
	"PLATFORMTYPE_ANDROID": 1,
	"PLATFORMTYPE_IOS":     2,
	"PLATFORMTYPE_WEB":     3,
	"PLATFORMTYPE_CLC":     4,
	"PLATFORMTYPE_TESTS":   42,
}

func (x PlatformType) String() string {
	return proto.EnumName(PlatformType_name, int32(x))
}
func (PlatformType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_device_info_65d3de86c760987b, []int{0}
}

// Notifying about device information
type RequestNotifyAboutDeviceInfo struct {
	PreferredLanguages   []string              `protobuf:"bytes,1,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
	TimeZone             *wrappers.StringValue `protobuf:"bytes,2,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *RequestNotifyAboutDeviceInfo) Reset()         { *m = RequestNotifyAboutDeviceInfo{} }
func (m *RequestNotifyAboutDeviceInfo) String() string { return proto.CompactTextString(m) }
func (*RequestNotifyAboutDeviceInfo) ProtoMessage()    {}
func (*RequestNotifyAboutDeviceInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_info_65d3de86c760987b, []int{0}
}
func (m *RequestNotifyAboutDeviceInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestNotifyAboutDeviceInfo.Unmarshal(m, b)
}
func (m *RequestNotifyAboutDeviceInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestNotifyAboutDeviceInfo.Marshal(b, m, deterministic)
}
func (dst *RequestNotifyAboutDeviceInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestNotifyAboutDeviceInfo.Merge(dst, src)
}
func (m *RequestNotifyAboutDeviceInfo) XXX_Size() int {
	return xxx_messageInfo_RequestNotifyAboutDeviceInfo.Size(m)
}
func (m *RequestNotifyAboutDeviceInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestNotifyAboutDeviceInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RequestNotifyAboutDeviceInfo proto.InternalMessageInfo

func (m *RequestNotifyAboutDeviceInfo) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

func (m *RequestNotifyAboutDeviceInfo) GetTimeZone() *wrappers.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

// Generic client info, containing information about platform type, version, sdk etc
// platform The platform enum. Can be either Android, Web or iOS
// deviceName For android: vendor and model; For iOS: model; For Web: platform and user agent
// appName Optional application name
// appVersion Application version
// sdkVersion Optional SDK version
// preferredLanguages Optional ISO-639 language code and ISO-3166 country code: ru-RU
// timeZone Optional TimeZone id
type ClientInfo struct {
	Platform             PlatformType          `protobuf:"varint,1,opt,name=platform,enum=dialog.PlatformType" json:"platform,omitempty"`
	DeviceName           string                `protobuf:"bytes,2,opt,name=device_name,json=deviceName" json:"device_name,omitempty"`
	AppName              string                `protobuf:"bytes,3,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	AppVersion           *wrappers.StringValue `protobuf:"bytes,4,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	SdkVersion           *wrappers.StringValue `protobuf:"bytes,5,opt,name=sdk_version,json=sdkVersion" json:"sdk_version,omitempty"`
	PreferredLanguages   []string              `protobuf:"bytes,6,rep,name=preferred_languages,json=preferredLanguages" json:"preferred_languages,omitempty"`
	TimeZone             *wrappers.StringValue `protobuf:"bytes,7,opt,name=time_zone,json=timeZone" json:"time_zone,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *ClientInfo) Reset()         { *m = ClientInfo{} }
func (m *ClientInfo) String() string { return proto.CompactTextString(m) }
func (*ClientInfo) ProtoMessage()    {}
func (*ClientInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_device_info_65d3de86c760987b, []int{1}
}
func (m *ClientInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ClientInfo.Unmarshal(m, b)
}
func (m *ClientInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ClientInfo.Marshal(b, m, deterministic)
}
func (dst *ClientInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientInfo.Merge(dst, src)
}
func (m *ClientInfo) XXX_Size() int {
	return xxx_messageInfo_ClientInfo.Size(m)
}
func (m *ClientInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ClientInfo proto.InternalMessageInfo

func (m *ClientInfo) GetPlatform() PlatformType {
	if m != nil {
		return m.Platform
	}
	return PlatformType_PLATFORMTYPE_UNKNOWN
}

func (m *ClientInfo) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *ClientInfo) GetAppName() string {
	if m != nil {
		return m.AppName
	}
	return ""
}

func (m *ClientInfo) GetAppVersion() *wrappers.StringValue {
	if m != nil {
		return m.AppVersion
	}
	return nil
}

func (m *ClientInfo) GetSdkVersion() *wrappers.StringValue {
	if m != nil {
		return m.SdkVersion
	}
	return nil
}

func (m *ClientInfo) GetPreferredLanguages() []string {
	if m != nil {
		return m.PreferredLanguages
	}
	return nil
}

func (m *ClientInfo) GetTimeZone() *wrappers.StringValue {
	if m != nil {
		return m.TimeZone
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestNotifyAboutDeviceInfo)(nil), "dialog.RequestNotifyAboutDeviceInfo")
	proto.RegisterType((*ClientInfo)(nil), "dialog.ClientInfo")
	proto.RegisterEnum("dialog.PlatformType", PlatformType_name, PlatformType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceInfoClient is the client API for DeviceInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceInfoClient interface {
	NotifyAboutDeviceInfo(ctx context.Context, in *RequestNotifyAboutDeviceInfo, opts ...grpc.CallOption) (*ResponseVoid, error)
}

type deviceInfoClient struct {
	cc *grpc.ClientConn
}

func NewDeviceInfoClient(cc *grpc.ClientConn) DeviceInfoClient {
	return &deviceInfoClient{cc}
}

func (c *deviceInfoClient) NotifyAboutDeviceInfo(ctx context.Context, in *RequestNotifyAboutDeviceInfo, opts ...grpc.CallOption) (*ResponseVoid, error) {
	out := new(ResponseVoid)
	err := c.cc.Invoke(ctx, "/dialog.DeviceInfo/NotifyAboutDeviceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceInfoServer is the server API for DeviceInfo service.
type DeviceInfoServer interface {
	NotifyAboutDeviceInfo(context.Context, *RequestNotifyAboutDeviceInfo) (*ResponseVoid, error)
}

func RegisterDeviceInfoServer(s *grpc.Server, srv DeviceInfoServer) {
	s.RegisterService(&_DeviceInfo_serviceDesc, srv)
}

func _DeviceInfo_NotifyAboutDeviceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestNotifyAboutDeviceInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceInfoServer).NotifyAboutDeviceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dialog.DeviceInfo/NotifyAboutDeviceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceInfoServer).NotifyAboutDeviceInfo(ctx, req.(*RequestNotifyAboutDeviceInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dialog.DeviceInfo",
	HandlerType: (*DeviceInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotifyAboutDeviceInfo",
			Handler:    _DeviceInfo_NotifyAboutDeviceInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device_info.proto",
}

func init() { proto.RegisterFile("device_info.proto", fileDescriptor_device_info_65d3de86c760987b) }

var fileDescriptor_device_info_65d3de86c760987b = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0x2d, 0xac, 0xfc, 0x19, 0xd4, 0x74, 0xbb, 0xec, 0xca, 0x12, 0x62, 0x08, 0xf1, 0x80,
	0x1c, 0x5a, 0x45, 0x4f, 0x7b, 0x90, 0xf0, 0x4f, 0x25, 0x62, 0x21, 0x80, 0x6c, 0xf4, 0x42, 0x06,
	0xfa, 0xb6, 0x99, 0x6c, 0x3b, 0x33, 0xce, 0xb4, 0x98, 0xf5, 0xe8, 0x4d, 0xaf, 0x5e, 0x3c, 0xf8,
	0x79, 0xbc, 0x79, 0xf2, 0x1b, 0x6c, 0x3c, 0xf9, 0x29, 0x0c, 0x94, 0xee, 0xb2, 0x82, 0x26, 0xae,
	0xa7, 0x26, 0xcf, 0xfb, 0x7b, 0x9f, 0xbe, 0x33, 0xcf, 0xbc, 0x68, 0xd7, 0x82, 0x39, 0x99, 0xc1,
	0x84, 0x50, 0x9b, 0xe9, 0x5c, 0x30, 0x9f, 0x69, 0x09, 0x8b, 0x60, 0x97, 0x39, 0xf9, 0x3b, 0x0e,
	0x63, 0x8e, 0x0b, 0xc6, 0x52, 0x9d, 0x06, 0xb6, 0xf1, 0x56, 0x60, 0xce, 0x41, 0xc8, 0x90, 0xcb,
	0x17, 0x56, 0x75, 0xcc, 0x89, 0x81, 0x29, 0x65, 0x3e, 0xf6, 0x09, 0xa3, 0x51, 0x75, 0xd7, 0x02,
	0x9b, 0x50, 0xb2, 0x2e, 0xed, 0x79, 0x44, 0xce, 0xc0, 0x75, 0x31, 0x05, 0x16, 0x44, 0xe2, 0xbe,
	0x9c, 0x61, 0x17, 0xf3, 0xa9, 0xb1, 0xfa, 0x86, 0x72, 0xe9, 0xab, 0x82, 0x0a, 0x03, 0x78, 0x13,
	0x80, 0xf4, 0x4d, 0xe6, 0x13, 0xfb, 0xb4, 0x3e, 0x65, 0x81, 0xdf, 0x5a, 0x0e, 0xdb, 0xa1, 0x36,
	0xd3, 0x1e, 0xa3, 0x3d, 0x2e, 0xc0, 0x06, 0x21, 0xc0, 0x9a, 0xb8, 0x98, 0x3a, 0x01, 0x76, 0x40,
	0xe6, 0x94, 0x62, 0xbc, 0x9c, 0x6e, 0xdc, 0xfc, 0xf8, 0xf3, 0x7e, 0x1a, 0x25, 0xe7, 0x44, 0x92,
	0xa9, 0x0b, 0x03, 0xed, 0x9c, 0xec, 0x46, 0xa0, 0xf6, 0x0c, 0xa5, 0x7d, 0xe2, 0xc1, 0xe4, 0x1d,
	0xa3, 0x90, 0x8b, 0x15, 0x95, 0x72, 0xa6, 0x5a, 0xd0, 0xc3, 0x13, 0xe9, 0xd1, 0x89, 0xf5, 0xa1,
	0x2f, 0x08, 0x75, 0xc6, 0xd8, 0x0d, 0xe0, 0x77, 0xcf, 0xd4, 0xa2, 0xfb, 0x35, 0xa3, 0x70, 0x54,
	0x38, 0xab, 0x1d, 0xa2, 0xdb, 0xc4, 0xd3, 0x2d, 0xd7, 0xd1, 0x1d, 0xc1, 0x67, 0xfa, 0x53, 0xc1,
	0x67, 0xab, 0xe1, 0x4b, 0xdf, 0xe2, 0x08, 0x35, 0x5d, 0x02, 0xd4, 0x5f, 0x8e, 0x5d, 0x43, 0x29,
	0xee, 0x62, 0xdf, 0x66, 0xc2, 0xcb, 0x29, 0x45, 0xa5, 0x7c, 0xab, 0x9a, 0xd5, 0xc3, 0xfb, 0xd6,
	0xfb, 0x2b, 0x7d, 0x74, 0xca, 0x37, 0xff, 0x16, 0x35, 0x69, 0x3a, 0xca, 0xac, 0x22, 0xa3, 0xd8,
	0x0b, 0x27, 0xdf, 0x38, 0x2f, 0x0a, 0x09, 0x13, 0x7b, 0xa0, 0x95, 0x51, 0x0a, 0x73, 0x1e, 0xc2,
	0xf1, 0x6d, 0x70, 0x12, 0x73, 0xbe, 0x24, 0xbb, 0x28, 0xb3, 0x20, 0xe7, 0x20, 0x24, 0x61, 0x34,
	0xb7, 0xf3, 0xef, 0x77, 0x82, 0x30, 0xe7, 0xe3, 0xb0, 0x7d, 0xe1, 0x26, 0xad, 0x93, 0x73, 0xb7,
	0xeb, 0x57, 0x70, 0x93, 0xd6, 0x49, 0xe4, 0xf6, 0x87, 0xb4, 0x13, 0x57, 0x4a, 0x3b, 0xf9, 0x1f,
	0x69, 0x57, 0xbe, 0x28, 0xe8, 0xc6, 0x7a, 0x52, 0x5a, 0x0e, 0x65, 0xfb, 0xdd, 0xfa, 0xe8, 0x49,
	0x6f, 0xf0, 0x62, 0xf4, 0xaa, 0xdf, 0x9e, 0xbc, 0x34, 0x9f, 0x9b, 0xbd, 0x63, 0x53, 0xbd, 0xb6,
	0x51, 0xa9, 0x9b, 0xad, 0x41, 0xaf, 0xd3, 0x52, 0x15, 0x2d, 0x8b, 0xd4, 0x4b, 0x95, 0x4e, 0x6f,
	0xa8, 0xc6, 0x36, 0xd4, 0xe3, 0x76, 0x43, 0x8d, 0x6f, 0xa8, 0xcd, 0x6e, 0x53, 0xdd, 0xd1, 0x0e,
	0x90, 0x76, 0x49, 0x1d, 0xb5, 0x87, 0xa3, 0xa1, 0x5a, 0xa9, 0x7e, 0x56, 0x10, 0x5a, 0xdb, 0x92,
	0x0f, 0x0a, 0xda, 0xdf, 0xbe, 0x3f, 0x77, 0xa3, 0x67, 0xf7, 0xb7, 0x2d, 0xcb, 0x67, 0x2f, 0x28,
	0xc9, 0x19, 0x95, 0x30, 0x66, 0xc4, 0x2a, 0x3d, 0x7a, 0xff, 0xfd, 0xc7, 0xa7, 0x98, 0x5e, 0xba,
	0x67, 0xcc, 0x1f, 0x18, 0x8b, 0x17, 0x6f, 0x5c, 0xb4, 0x18, 0x5b, 0x8d, 0x8e, 0x94, 0x4a, 0xe3,
	0xf0, 0xac, 0x76, 0x80, 0xb2, 0xeb, 0x7b, 0x22, 0x41, 0x2c, 0x00, 0x39, 0x4d, 0x2c, 0x33, 0x78,
	0xf8, 0x2b, 0x00, 0x00, 0xff, 0xff, 0xc3, 0xb9, 0x3e, 0x39, 0x8e, 0x04, 0x00, 0x00,
}
